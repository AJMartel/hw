
; 
; Disassembled by: 
; DASMx object code disassembler 
; (c) Copyright 1996-2003 Conquest Consultants 
; Version 1.40 (Oct 18 2003) 
; 
; File: chorus_1_volume_fixed.bin 
; 
; Size: 31232 bytes 
; Checksum: 48C8 
; CRC-32: 3FA3AF90 
; 
; Date: Thu Jun 21 11:36:31 2018 
; 
; CPU: Motorola 68HC05 (68HC05 family) 
; 
; 
; 
org $0400 
; 
L0400: 
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
L0401: 
          sei                           ; Set Interrupt Mask, I ← 1);           
L0402: 
          bset 6,RAM1_0ba               ; Set Bit 6 at memory RAM1_0ba (Mn <- 1 ) 
L0404: 
          bclr 5,RAM1_0ba               ; Clear bit 5 at RAM1_0ba                 
L0406: 
          brset 7,Miscell,L0423         ; Branch to L0423 if Bit POR is set at Miscell (Mn=1)
L0409: 
          jsr L374A                     ; Jump to Subroutine at L374A             
L040C: 
          bne L0423                     ; Branch to L0423 if Not Equal (Z = 0);   
L040E: 
          lda #$53                      ; Load Accumulator with value of Memory at #$53, A <- (#$53)
L0410: 
          cmp RAM1_06b                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_06b)
L0412: 
          bne L0423                     ; Branch to L0423 if Not Equal (Z = 0);   
L0414: 
          jsr L2141                     ; Jump to Subroutine at L2141             
L0417: 
          jsr L2069                     ; Jump to Subroutine at L2069             
L041A: 
          clr RAM1_06b                  ; Clear byte at RAM1_06b <- 0x00          
L041C: 
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
L041E: 
          bset 3,DDRB                   ; Set Bit MUTE_WOOFER at memory DDRB (Mn <- 1 )
L0420: 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
L0423: 
          jsr L2031                     ; Jump to Subroutine at L2031             
L0426: 
          jmp L04F1                     ; Unconditional Jump to L04F1             
; 
L0429: 
          jsr L3778                     ; Jump to Subroutine at L3778             
L042C: 
          lda SCDR                      ; Load Accumulator with value of Memory at SCDR, A <- (SCDR)
L042E: 
          jmp L04B0                     ; Unconditional Jump to L04B0             
; 
L0431: 
          lda TSR                       ; Load Accumulator with value of Memory at TSR, A <- (TSR)
L0433: 
          lda TCL                       ; Load Accumulator with value of Memory at TCL, A <- (TCL)
L0435: 
          rti                           ; Return from Interrupt                   
; 
L0436: 
          brset 7,TSR,L04A3             ; Branch to L04A3 if Bit ICF1 is set at TSR (Mn=1)
L0439: 
          brclr 3,TSR,L048B             ; Branch to L048B if Bit OCF2 Clear (Mn = 0)
L043C: 
          lda OCL2                      ; Load Accumulator with value of Memory at OCL2, A <- (OCL2)
L043E: 
          add #$88                      ; Add without Carry, A ← (A) + (#$88)   
L0440: 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
L0441: 
          lda OCH2                      ; Load Accumulator with value of Memory at OCH2, A <- (OCH2)
L0443: 
          adc #$13                      ; ADD with CARRY, A ← (A) + (#$13) + (C) 
L0445: 
          sta OCH2                      ; Store Accumulator in Memory at OCH2     
L0447: 
          lda TSR                       ; Load Accumulator with value of Memory at TSR, A <- (TSR)
L0449: 
          stx OCL2                      ; Store Index Register In Memory at OCL2  
L044B: 
          bset 3,RAM1_067               ; Set Bit 3 at memory RAM1_067 (Mn <- 1 ) 
L044D: 
          brclr 1,DDRC,L0453            ; Branch to L0453 if Bit WDOG_TEL Clear (Mn = 0)
L0450: 
          brset 1,PortC,L0455           ; Branch to L0455 if Bit WDOG_TEL is set at PortC (Mn=1)
L0453: 
          bset 4,RAM1_05d               ; Set Bit 4 at memory RAM1_05d (Mn <- 1 ) 
L0455: 
          bclr 1,PortC                  ; Clear bit WDOG_TEL at PortC             
L0457: 
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
L0459: 
          beq L045D                     ; Branch to L045D if Equal Z=1            
L045B: 
          dec RAM1_063                  ; Decrement Byte at RAM1_063 Byte = Byte - 1
L045D: 
          dec RAM1_068                  ; Decrement Byte at RAM1_068 Byte = Byte - 1
L045F: 
          bne L0463                     ; Branch to L0463 if Not Equal (Z = 0);   
L0461: 
          bset 7,RAM1_067               ; Set Bit 7 at memory RAM1_067 (Mn <- 1 ) 
L0463: 
          jsr L376B                     ; Jump to Subroutine at L376B             
L0466: 
          lda RAM1_068                  ; Load Accumulator with value of Memory at RAM1_068, A <- (RAM1_068)
L0468: 
          bit #$3F                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$3F)
L046A: 
          bne L046E                     ; Branch to L046E if Not Equal (Z = 0);   
L046C: 
          bset 6,RAM1_067               ; Set Bit 6 at memory RAM1_067 (Mn <- 1 ) 
L046E: 
          bit #$03                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$03)
L0470: 
          bne L047C                     ; Branch to L047C if Not Equal (Z = 0);   
L0472: 
          bset 4,RAM1_067               ; Set Bit 4 at memory RAM1_067 (Mn <- 1 ) 
L0474: 
          jsr L4C73                     ; Jump to Subroutine at L4C73             
L0477: 
          jsr L223C                     ; Jump to Subroutine at L223C             
L047A: 
          lda RAM1_068                  ; Load Accumulator with value of Memory at RAM1_068, A <- (RAM1_068)
L047C: 
          bit #$0F                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$0F)
L047E: 
          bne L048B                     ; Branch to L048B if Not Equal (Z = 0);   
L0480: 
          bset 5,RAM1_067               ; Set Bit 5 at memory RAM1_067 (Mn <- 1 ) 
L0482: 
          brset 2,RAM1_05e,L0489        ; Branch to L0489 if Bit 2 is set at RAM1_05e (Mn=1)
L0485: 
          lda ACH                       ; Load Accumulator with value of Memory at ACH, A <- (ACH)
L0487: 
          bra L049A                     ; Branch Always (1 = 1)                   
; 
L0489: 
          bclr 2,RAM1_05e               ; Clear bit 2 at RAM1_05e                 
L048B: 
          brclr 6,TSR,L04B0             ; Branch to L04B0 if Bit OCF1 Clear (Mn = 0)
L048E: 
          bset 2,RAM1_05e               ; Set Bit 2 at memory RAM1_05e (Mn <- 1 ) 
L0490: 
          ldx OCL1                      ; Load Index Register with Memory Byte, X <- (OCL1)
L0492: 
          lda OCH1                      ; Load Accumulator with value of Memory at OCH1, A <- (OCH1)
L0494: 
          brclr 0,RAM1_061,L049A        ; Branch to L049A if Bit 0 Clear (Mn = 0) 
L0497: 
          jsr L0B9E                     ; Jump to Subroutine at L0B9E             
L049A: 
          sta OCH1                      ; Store Accumulator in Memory at OCH1     
L049C: 
          stx OCL1                      ; Store Index Register In Memory at OCL1  
L049E: 
          bra L04B0                     ; Branch Always (1 = 1)                   
; 
L04A0: 
          brclr 7,TSR,L04A8             ; Branch to L04A8 if Bit ICF1 Clear (Mn = 0)
L04A3: 
          jsr L21DD                     ; Jump to Subroutine at L21DD             
L04A6: 
          bra L04B0                     ; Branch Always (1 = 1)                   
; 
L04A8: 
          brclr 4,TSR,L04B0             ; Branch to L04B0 if Bit ICF2 Clear (Mn = 0)
L04AB: 
          jsr L4C57                     ; Jump to Subroutine at L4C57             
L04AE: 
          lda ICL2                      ; Load Accumulator with value of Memory at ICL2, A <- (ICL2)
L04B0: 
          brclr 7,TSR,L04BE             ; Branch to L04BE if Bit ICF1 Clear (Mn = 0)
L04B3: 
          brset 4,RAM1_05e,L04BE        ; Branch to L04BE if Bit 4 is set at RAM1_05e (Mn=1)
L04B6: 
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
L04B8: 
          bclr 1,TCR                    ; Clear bit IEDG1 at TCR                  
L04BA: 
          bset 3,RAM1_076               ; Set Bit 3 at memory RAM1_076 (Mn <- 1 ) 
L04BC: 
          lda ICL1                      ; Load Accumulator with value of Memory at ICL1, A <- (ICL1)
L04BE: 
          brclr 4,TSR,L04C3             ; Branch to L04C3 if Bit ICF2 Clear (Mn = 0)
L04C1: 
          bset 7,RAM1_096               ; Set Bit 7 at memory RAM1_096 (Mn <- 1 ) 
L04C3: 
          rti                           ; Return from Interrupt                   
; 
L04C4: 
          brclr 7,TSR,L04D2             ; Branch to L04D2 if Bit ICF1 Clear (Mn = 0)
L04C7: 
          brset 4,RAM1_05e,L04D2        ; Branch to L04D2 if Bit 4 is set at RAM1_05e (Mn=1)
L04CA: 
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
L04CC: 
          bclr 1,TCR                    ; Clear bit IEDG1 at TCR                  
L04CE: 
          bset 3,RAM1_076               ; Set Bit 3 at memory RAM1_076 (Mn <- 1 ) 
L04D0: 
          lda ICL1                      ; Load Accumulator with value of Memory at ICL1, A <- (ICL1)
L04D2: 
          cli                           ; Clear Interrupt Mask (I <- 0)           
L04D3: 
          rts                           ; Return from Subroutine                  
; 
L04D4: 
          lda #$53                      ; Load Accumulator with value of Memory at #$53, A <- (#$53)
L04D6: 
          sta RAM1_06b                  ; Store Accumulator in Memory at RAM1_06b 
L04D8: 
          bset 0,Miscell                ; Set Bit WDOG at memory Miscell (Mn <- 1 )
L04DA: 
          stop                          ; Stop Oscillator and Enable IRQ Pin      
L04DB: 
          bra L04D4                     ; Branch Always (1 = 1)                   
; 
L04DD: 
          lda #$28                      ; Load Accumulator with value of Memory at #$28, A <- (#$28)
L04DF: 
deca 
L04E0: 
          beq L04E5                     ; Branch to L04E5 if Equal Z=1            
L04E2: 
          bil L04DF                     ; Branch to L04DF if IRQ Pin Low IRQ=0    
L04E4: 
          rti                           ; Return from Interrupt                   
; 
L04E5: 
          brset 7,RAM1_0ba,L04ED        ; Branch to L04ED if Bit 7 is set at RAM1_0ba (Mn=1)
L04E8: 
          brset 6,RAM1_0b9,L04ED        ; Branch to L04ED if Bit 6 is set at RAM1_0b9 (Mn=1)
L04EB: 
          bset 7,RAM1_061               ; Set Bit 7 at memory RAM1_061 (Mn <- 1 ) 
L04ED: 
          bclr 6,RAM1_0ba               ; Clear bit 6 at RAM1_0ba                 
L04EF: 
          clr STACK_0d6                 ; Clear byte at STACK_0d6 <- 0x00         
L04F1: 
          sei                           ; Set Interrupt Mask, I ← 1);           
L04F2: 
          bclr 4,Miscell                ; Clear bit INTE at Miscell               
L04F4: 
          bclr 5,RAM1_0ba               ; Clear bit 5 at RAM1_0ba                 
L04F6: 
          bclr 3,RAM1_061               ; Clear bit 3 at RAM1_061                 
L04F8: 
          jsr L071F                     ; Jump to Subroutine at L071F             
L04FB: 
          bset 3,RAM1_061               ; Set Bit 3 at memory RAM1_061 (Mn <- 1 ) 
L04FD: 
          bclr 5,PortB                  ; Clear bit RESET_SLAVE at PortB          
L04FF: 
          bclr 5,RAM1_06a               ; Clear bit 5 at RAM1_06a                 
L0501: 
          jsr L2643                     ; Jump to Subroutine at L2643             
L0504: 
          bset 5,PortB                  ; Set Bit RESET_SLAVE at memory PortB (Mn <- 1 )
L0506: 
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
L0507: 
          bclr 2,RAM1_05d               ; Clear bit 2 at RAM1_05d                 
L0509: 
          brset 1,Miscell,L04D4         ; Branch to L04D4 if Bit SM is set at Miscell (Mn=1)
L050C: 
          sei                           ; Set Interrupt Mask, I ← 1);           
L050D: 
          jsr L2118                     ; Jump to Subroutine at L2118             
L0510: 
          cli                           ; Clear Interrupt Mask (I <- 0)           
L0511: 
          brset 0,RAM1_061,L051E        ; Branch to L051E if Bit 0 is set at RAM1_061 (Mn=1)
L0514: 
          bclr 7,RAM1_061               ; Clear bit 7 at RAM1_061                 
L0516: 
          brset 6,RAM1_061,L051B        ; Branch to L051B if Bit 6 is set at RAM1_061 (Mn=1)
L0519: 
          bclr 6,RAM1_05f               ; Clear bit 6 at RAM1_05f                 
L051B: 
          jmp L08B2                     ; Unconditional Jump to L08B2             
; 
L051E: 
          bil L04ED                     ; Branch to L04ED if IRQ Pin Low IRQ=0    
L0520: 
          brclr 3,RAM1_061,L04F1        ; Branch to L04F1 if Bit 3 Clear (Mn = 0) 
L0523: 
          jsr L3815                     ; Jump to Subroutine at L3815             
L0526: 
          bclr 3,STACK_0ce              ; Clear bit 3 at STACK_0ce                
L0528: 
          bclr 6,RAM1_05f               ; Clear bit 6 at RAM1_05f                 
L052A: 
          brset 2,TCR,L052F             ; Branch to L052F if Bit OLV2 is set at TCR (Mn=1)
L052D: 
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
L052F: 
          bset 2,TCR                    ; Set Bit OLV2 at memory TCR (Mn <- 1 )   
L0531: 
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
L0533: 
          bset 0,PortB                  ; Set Bit ENA_12V_ANTENE at memory PortB (Mn <- 1 )
L0535: 
          brset 3,RAM1_07f,L0541        ; Branch to L0541 if Bit 3 is set at RAM1_07f (Mn=1)
L0538: 
          brset 2,RAM1_07f,L0541        ; Branch to L0541 if Bit 2 is set at RAM1_07f (Mn=1)
L053B: 
          brset 7,RAM1_069,L0541        ; Branch to L0541 if Bit 7 is set at RAM1_069 (Mn=1)
L053E: 
          jsr L0B8C                     ; Jump to Subroutine at L0B8C             
L0541: 
          jsr L2082                     ; Jump to Subroutine at L2082             
L0544: 
          jsr L2079                     ; Jump to Subroutine at L2079             
L0547: 
          brset 0,RAM1_0a1,L055C        ; Branch to L055C if Bit 0 is set at RAM1_0a1 (Mn=1)
L054A: 
          bclr 2,DDRC                   ; Clear bit WR_SP at DDRC                 
L054C: 
          bclr 3,DDRC                   ; Clear bit RD_SP at DDRC                 
L054E: 
          jsr L2643                     ; Jump to Subroutine at L2643             
L0551: 
          lda PortC                     ; Load Accumulator with value of Memory at PortC, A <- (PortC)
L0553: 
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
L0555: 
          bne L0560                     ; Branch to L0560 if Not Equal (Z = 0);   
L0557: 
          bclr 5,RAM1_069               ; Clear bit 5 at RAM1_069                 
L0559: 
          brset 3,RAM1_08e,L0566        ; Branch to L0566 if Bit 3 is set at RAM1_08e (Mn=1)
L055C: 
          bset 4,RAM1_069               ; Set Bit 4 at memory RAM1_069 (Mn <- 1 ) 
L055E: 
          bra L0568                     ; Branch Always (1 = 1)                   
; 
L0560: 
          bset 5,RAM1_069               ; Set Bit 5 at memory RAM1_069 (Mn <- 1 ) 
L0562: 
          bclr 1,RAM1_081               ; Clear bit 1 at RAM1_081                 
L0564: 
          bclr 3,RAM1_08e               ; Clear bit 3 at RAM1_08e                 
L0566: 
          bclr 4,RAM1_069               ; Clear bit 4 at RAM1_069                 
L0568: 
          bset 2,DDRC                   ; Set Bit WR_SP at memory DDRC (Mn <- 1 ) 
L056A: 
          bset 3,DDRC                   ; Set Bit RD_SP at memory DDRC (Mn <- 1 ) 
L056C: 
          cli                           ; Clear Interrupt Mask (I <- 0)           
L056D: 
          brclr 6,RAM1_0ba,L0573        ; Branch to L0573 if Bit 6 Clear (Mn = 0) 
L0570: 
          brset 5,RAM1_061,L057D        ; Branch to L057D if Bit 5 is set at RAM1_061 (Mn=1)
L0573: 
          jsr L1375                     ; Jump to Subroutine at L1375             
L0576: 
          bset 5,RAM1_061               ; Set Bit 5 at memory RAM1_061 (Mn <- 1 ) 
L0578: 
          jsr L0713                     ; Jump to Subroutine at L0713             
L057B: 
          bclr 2,RAM1_09e               ; Clear bit 2 at RAM1_09e                 
L057D: 
          brset 6,RAM1_061,L0585        ; Branch to L0585 if Bit 6 is set at RAM1_061 (Mn=1)
L0580: 
          jsr L3155                     ; Jump to Subroutine at L3155             
L0583: 
          bset 6,RAM1_061               ; Set Bit 6 at memory RAM1_061 (Mn <- 1 ) 
L0585: 
          brset 4,RAM1_061,L0591        ; Branch to L0591 if Bit 4 is set at RAM1_061 (Mn=1)
L0588: 
          jsr L2725                     ; Jump to Subroutine at L2725             
L058B: 
          jsr L1EF3                     ; Jump to Subroutine at L1EF3             
L058E: 
          jsr L48DF                     ; Jump to Subroutine at L48DF             
L0591: 
          bset 4,RAM1_061               ; Set Bit 4 at memory RAM1_061 (Mn <- 1 ) 
L0593: 
          brset 2,RAM1_09e,L0599        ; Branch to L0599 if Bit 2 is set at RAM1_09e (Mn=1)
L0596: 
          jsr L39C1                     ; Jump to Subroutine at L39C1             
L0599: 
          jsr L0713                     ; Jump to Subroutine at L0713             
L059C: 
          jsr L36FC                     ; Jump to Subroutine at L36FC             
L059F: 
          jsr L3B0A                     ; Jump to Subroutine at L3B0A             
L05A2: 
          jsr L0B2F                     ; Jump to Subroutine at L0B2F             
L05A5: 
          clrx                          ; Clear Index Register, X <- 0x00         
L05A6: 
          jsr L2649                     ; Jump to Subroutine at L2649             
L05A9: 
          brclr 3,RAM1_08b,L05BB        ; Branch to L05BB if Bit 3 Clear (Mn = 0) 
L05AC: 
          lda #$0B                      ; Load Accumulator with value of Memory at #$0B, A <- (#$0B)
L05AE: 
          brset 4,RAM1_08b,L05B6        ; Branch to L05B6 if Bit 4 is set at RAM1_08b (Mn=1)
L05B1: 
          lda #$1A                      ; Load Accumulator with value of Memory at #$1A, A <- (#$1A)
L05B3: 
          brclr 1,RAM1_081,L05BB        ; Branch to L05BB if Bit 1 Clear (Mn = 0) 
L05B6: 
          jsr L24E5                     ; Jump to Subroutine at L24E5             
L05B9: 
          bset 1,STACK_0cb              ; Set Bit 1 at memory STACK_0cb (Mn <- 1 )
L05BB: 
          clr RAM1_067                  ; Clear byte at RAM1_067 <- 0x00          
L05BD: 
          clr RAM1_068                  ; Clear byte at RAM1_068 <- 0x00          
L05BF: 
          brclr 4,RAM1_0bb,L05C4        ; Branch to L05C4 if Bit 4 Clear (Mn = 0) 
L05C2: 
          bset 2,RAM1_094               ; Set Bit 2 at memory RAM1_094 (Mn <- 1 ) 
L05C4: 
          sei                           ; Set Interrupt Mask, I ← 1);           
L05C5: 
          bset 4,Miscell                ; Set Bit INTE at memory Miscell (Mn <- 1 )
L05C7: 
          bset 7,TCR                    ; Set Bit ICIE at memory TCR (Mn <- 1 )   
L05C9: 
          cli                           ; Clear Interrupt Mask (I <- 0)           
L05CA: 
          brset 7,RAM1_069,L05D4        ; Branch to L05D4 if Bit 7 is set at RAM1_069 (Mn=1)
L05CD: 
          brclr 5,RAM1_0bb,L05D4        ; Branch to L05D4 if Bit 5 Clear (Mn = 0) 
L05D0: 
          bset 7,RAM1_069               ; Set Bit 7 at memory RAM1_069 (Mn <- 1 ) 
L05D2: 
          bset 1,RAM1_05d               ; Set Bit 1 at memory RAM1_05d (Mn <- 1 ) 
L05D4: 
          jsr L0785                     ; Jump to Subroutine at L0785             
L05D7: 
          brset 2,RAM1_05d,L05E3        ; Branch to L05E3 if Bit 2 is set at RAM1_05d (Mn=1)
L05DA: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
L05DB: 
          brclr 3,PortA,L05E6           ; Branch to L05E6 if Bit SLAVE_STATUS Clear (Mn = 0)
L05DE: 
deca 
L05DF: 
          bne L05DB                     ; Branch to L05DB if Not Equal (Z = 0);   
L05E1: 
          bclr 4,RAM1_061               ; Clear bit 4 at RAM1_061                 
L05E3: 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
L05E6: 
          bih L05EB                     ; Branch to L05EB if IRQ Pin High IRQ=1   
L05E8: 
          jmp L04E5                     ; Unconditional Jump to L04E5             
; 
L05EB: 
          jsr L22BD                     ; Jump to Subroutine at L22BD             
L05EE: 
          jsr L3164                     ; Jump to Subroutine at L3164             
L05F1: 
          jsr L4C7B                     ; Jump to Subroutine at L4C7B             
L05F4: 
          jsr L142B                     ; Jump to Subroutine at L142B             
L05F7: 
          jsr L37F4                     ; Jump to Subroutine at L37F4             
L05FA: 
          jsr L40DD                     ; Jump to Subroutine at L40DD             
L05FD: 
          jsr L4955                     ; Jump to Subroutine at L4955             
L0600: 
          jsr L27CF                     ; Jump to Subroutine at L27CF             
L0603: 
          jsr L27C2                     ; Jump to Subroutine at L27C2             
L0606: 
          jsr L1F1C                     ; Jump to Subroutine at L1F1C             
L0609: 
          jsr L3A48                     ; Jump to Subroutine at L3A48             
L060C: 
          jsr L3B88                     ; Jump to Subroutine at L3B88             
L060F: 
          jsr L0614                     ; Jump to Subroutine at L0614             
L0612: 
          bra L05C4                     ; Branch Always (1 = 1)                   
; 
L0614: 
          brset 3,RAM1_067,L062D        ; Branch to L062D if Bit 3 is set at RAM1_067 (Mn=1)
L0617: 
          brset 2,RAM1_067,L0640        ; Branch to L0640 if Bit 2 is set at RAM1_067 (Mn=1)
L061A: 
          brset 1,RAM1_067,L0647        ; Branch to L0647 if Bit 1 is set at RAM1_067 (Mn=1)
L061D: 
          brset 0,RAM1_067,L0670        ; Branch to L0670 if Bit 0 is set at RAM1_067 (Mn=1)
L0620: 
          brset 4,RAM1_067,L0649        ; Branch to L0649 if Bit 4 is set at RAM1_067 (Mn=1)
L0623: 
          brset 5,RAM1_067,L065A        ; Branch to L065A if Bit 5 is set at RAM1_067 (Mn=1)
L0626: 
          brset 6,RAM1_067,L0665        ; Branch to L0665 if Bit 6 is set at RAM1_067 (Mn=1)
L0629: 
          brset 7,RAM1_067,L066D        ; Branch to L066D if Bit 7 is set at RAM1_067 (Mn=1)
L062C: 
          rts                           ; Return from Subroutine                  
; 
L062D: 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
L062F: 
          bset 2,RAM1_067               ; Set Bit 2 at memory RAM1_067 (Mn <- 1 ) 
L0631: 
          jsr L200B                     ; Jump to Subroutine at L200B             
L0634: 
          jsr L386E                     ; Jump to Subroutine at L386E             
L0637: 
          jsr L274E                     ; Jump to Subroutine at L274E             
L063A: 
          jsr L23CE                     ; Jump to Subroutine at L23CE             
L063D: 
          jmp L39F4                     ; Unconditional Jump to L39F4             
; 
L0640: 
          bclr 2,RAM1_067               ; Clear bit 2 at RAM1_067                 
L0642: 
          bset 1,RAM1_067               ; Set Bit 1 at memory RAM1_067 (Mn <- 1 ) 
L0644: 
          jmp L0719                     ; Unconditional Jump to L0719             
L0647: 
          bra L06B5                     ; Branch Always (1 = 1)                   
; 
L0649: 
          bclr 4,RAM1_067               ; Clear bit 4 at RAM1_067                 
L064B: 
          jsr L2730                     ; Jump to Subroutine at L2730             
L064E: 
          jsr L1EF4                     ; Jump to Subroutine at L1EF4             
L0651: 
          jsr L3173                     ; Jump to Subroutine at L3173             
L0654: 
          jsr L3CE1                     ; Jump to Subroutine at L3CE1             
L0657: 
          jmp L27C3                     ; Unconditional Jump to L27C3             
; 
L065A: 
          bclr 5,RAM1_067               ; Clear bit 5 at RAM1_067                 
L065C: 
          jsr L1419                     ; Jump to Subroutine at L1419             
L065F: 
          jsr L3D06                     ; Jump to Subroutine at L3D06             
L0662: 
          jmp L3730                     ; Unconditional Jump to L3730             
; 
L0665: 
          bclr 6,RAM1_067               ; Clear bit 6 at RAM1_067                 
L0667: 
          jsr L3BA2                     ; Jump to Subroutine at L3BA2             
L066A: 
          jmp L4CB4                     ; Unconditional Jump to L4CB4             
; 
L066D: 
          bclr 7,RAM1_067               ; Clear bit 7 at RAM1_067                 
L066F: 
          rts                           ; Return from Subroutine                  
; 
L0670: 
          bclr 0,RAM1_067               ; Clear bit 0 at RAM1_067                 
L0672: 
          jsr L490B                     ; Jump to Subroutine at L490B             
L0675: 
          jsr L316A                     ; Jump to Subroutine at L316A             
L0678: 
          jsr L3BFE                     ; Jump to Subroutine at L3BFE             
L067B: 
          brset 7,RAM1_060,L06A4        ; Branch to L06A4 if Bit 7 is set at RAM1_060 (Mn=1)
L067E: 
          brclr 3,RAM1_08b,L069E        ; Branch to L069E if Bit 3 Clear (Mn = 0) 
L0681: 
          brset 3,STACK_0ce,L069B       ; Branch to L069B if Bit 3 is set at STACK_0ce (Mn=1)
L0684: 
          brclr 6,RAM1_05d,L0692        ; Branch to L0692 if Bit 6 Clear (Mn = 0) 
L0687: 
          bclr 1,STACK_0cb              ; Clear bit 1 at STACK_0cb                
L0689: 
          jsr L38D0                     ; Jump to Subroutine at L38D0             
L068C: 
          jsr L454C                     ; Jump to Subroutine at L454C             
L068F: 
          jsr L2174                     ; Jump to Subroutine at L2174             
L0692: 
          jsr L34F7                     ; Jump to Subroutine at L34F7             
L0695: 
          jsr L479C                     ; Jump to Subroutine at L479C             
L0698: 
          jsr L460C                     ; Jump to Subroutine at L460C             
L069B: 
          jsr L28B0                     ; Jump to Subroutine at L28B0             
L069E: 
          jsr L2D55                     ; Jump to Subroutine at L2D55             
L06A1: 
          jsr L4B76                     ; Jump to Subroutine at L4B76             
L06A4: 
          jsr L4541                     ; Jump to Subroutine at L4541             
L06A7: 
          jsr L3BD8                     ; Jump to Subroutine at L3BD8             
L06AA: 
          bclr 6,RAM1_05d               ; Clear bit 6 at RAM1_05d                 
L06AC: 
          brclr 7,RAM1_060,L06B2        ; Branch to L06B2 if Bit 7 Clear (Mn = 0) 
L06AF: 
          jsr L2D55                     ; Jump to Subroutine at L2D55             
L06B2: 
          jmp L0BBE                     ; Unconditional Jump to L0BBE             
; 
L06B5: 
          bclr 1,RAM1_067               ; Clear bit 1 at RAM1_067                 
L06B7: 
          bset 0,RAM1_067               ; Set Bit 0 at memory RAM1_067 (Mn <- 1 ) 
L06B9: 
          brclr 7,RAM1_05d,L0712        ; Branch to L0712 if Bit 7 Clear (Mn = 0) 
L06BC: 
          bclr 7,RAM1_05d               ; Clear bit 7 at RAM1_05d                 
L06BE: 
          lda STACK_0ca                 ; Load Accumulator with value of Memory at STACK_0ca, A <- (STACK_0ca)
L06C0: 
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
L06C2: 
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
L06C4: 
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
L06C5: 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
L06C6: 
cpx #$21 
L06C8: 
          bcc L0712                     ; Branch to L0712 if C bit is cleared     
L06CA: 
          jsr L06E5,x ;INFO: index jump ; Jump to Subroutine at L06E5             
L06CD: 
          lda STACK_0ca                 ; Load Accumulator with value of Memory at STACK_0ca, A <- (STACK_0ca)
L06CF: 
          jsr L2617                     ; Jump to Subroutine at L2617             
L06D2: 
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
L06D4: 
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
L06D6: 
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
L06D7: 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
L06D8: 
cpx #$0C 
L06DA: 
          bcc L0712                     ; Branch to L0712 if C bit is cleared     
L06DC: 
          jsr L0706,x ;INFO: index jump ; Jump to Subroutine at L0706             
L06DF: 
          brclr 6,STACK_0ca,L0712       ; Branch to L0712 if Bit 6 Clear (Mn = 0) 
L06E2: 
          jmp L2CD3                     ; Unconditional Jump to L2CD3             
L06E5: 
          jmp L062C                     ; Unconditional Jump to L062C             
L06E8: 
          jmp L2B51                     ; Unconditional Jump to L2B51             
L06EB: 
          jmp L4833                     ; Unconditional Jump to L4833             
L06EE: 
          jmp L46A7                     ; Unconditional Jump to L46A7             
L06F1: 
          jmp L36AB                     ; Unconditional Jump to L36AB             
L06F4: 
          jmp L394C                     ; Unconditional Jump to L394C             
L06F7: 
          jmp L30C1                     ; Unconditional Jump to L30C1             
L06FA: 
          jmp L062C                     ; Unconditional Jump to L062C             
L06FD: 
          jmp L4BFD                     ; Unconditional Jump to L4BFD             
L0700: 
          jmp L4578                     ; Unconditional Jump to L4578             
L0703: 
          jmp L4542                     ; Unconditional Jump to L4542             
L0706: 
          jmp L4C0F                     ; Unconditional Jump to L4C0F             
L0709: 
          jmp L2C36                     ; Unconditional Jump to L2C36             
L070C: 
          jmp L487B                     ; Unconditional Jump to L487B             
L070F: 
          jmp L471A                     ; Unconditional Jump to L471A             
L0712: 
          rts                           ; Return from Subroutine                  
; 
L0713: 
          jsr L142B                     ; Jump to Subroutine at L142B             
L0716: 
          jsr L37F4                     ; Jump to Subroutine at L37F4             
L0719: 
          jsr L1407                     ; Jump to Subroutine at L1407             
L071C: 
          jmp L37B0                     ; Unconditional Jump to L37B0             
; 
L071F: 
          clr RAM1_066                  ; Clear byte at RAM1_066 <- 0x00          
L0721: 
          lda RAM1_065                  ; Load Accumulator with value of Memory at RAM1_065, A <- (RAM1_065)
L0723: 
          sta RAM2_02b0                 ; Store Accumulator in Memory at RAM2_02b0
L0726: 
          bclr 7,RAM1_069               ; Clear bit 7 at RAM1_069                 
L0728: 
          brclr 4,RAM1_061,L0733        ; Branch to L0733 if Bit 4 Clear (Mn = 0) 
L072B: 
          jsr L0B8C                     ; Jump to Subroutine at L0B8C             
L072E: 
          jsr L48CA                     ; Jump to Subroutine at L48CA             
L0731: 
          bclr 4,RAM1_061               ; Clear bit 4 at RAM1_061                 
L0733: 
          lda #$0A                      ; Load Accumulator with value of Memory at #$0A, A <- (#$0A)
L0735: 
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
L0737: 
          bset 2,TCR                    ; Set Bit OLV2 at memory TCR (Mn <- 1 )   
L0739: 
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
L073B: 
          bih L073F                     ; Branch to L073F if IRQ Pin High IRQ=1   
L073D: 
          bclr 6,RAM1_0ba               ; Clear bit 6 at RAM1_0ba                 
L073F: 
          jsr L2631                     ; Jump to Subroutine at L2631             
L0742: 
          brset 1,PortC,L0747           ; Branch to L0747 if Bit WDOG_TEL is set at PortC (Mn=1)
L0745: 
          bset 4,RAM1_05d               ; Set Bit 4 at memory RAM1_05d (Mn <- 1 ) 
L0747: 
          bclr 1,PortC                  ; Clear bit WDOG_TEL at PortC             
L0749: 
          jsr L0785                     ; Jump to Subroutine at L0785             
L074C: 
          lda RAM1_065                  ; Load Accumulator with value of Memory at RAM1_065, A <- (RAM1_065)
L074E: 
          sub RAM2_02b0                 ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM2_02b0)
L0751: 
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
L0753: 
          bcs L0757                     ; Branch to L0757 if C = 1                
L0755: 
          bset 5,RAM1_060               ; Set Bit 5 at memory RAM1_060 (Mn <- 1 ) 
L0757: 
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
L0759: 
          jsr L25B7                     ; Jump to Subroutine at L25B7             
L075C: 
          cmp #$19                      ; Compare Accumulator with Memory Byte, (A) - (#$19)
L075E: 
          bcs L0772                     ; Branch to L0772 if C = 1                
L0760: 
          cmp #$53                      ; Compare Accumulator with Memory Byte, (A) - (#$53)
L0762: 
          bhi L076E                     ; Branch to L076E if Higher C v Z = 0     
L0764: 
          bclr 6,RAM1_061               ; Clear bit 6 at RAM1_061                 
L0766: 
          bclr 5,RAM1_061               ; Clear bit 5 at RAM1_061                 
L0768: 
          bclr 7,RAM1_061               ; Clear bit 7 at RAM1_061                 
L076A: 
          bclr 6,RAM1_05f               ; Clear bit 6 at RAM1_05f                 
L076C: 
          bra L073F                     ; Branch Always (1 = 1)                   
; 
L076E: 
          cmp #$73                      ; Compare Accumulator with Memory Byte, (A) - (#$73)
L0770: 
          bcs L0733                     ; Branch to L0733 if C = 1                
L0772: 
          bil L0733                     ; Branch to L0733 if IRQ Pin Low IRQ=0    
L0774: 
          dec RAM1_050                  ; Decrement Byte at RAM1_050 Byte = Byte - 1
L0776: 
          bne L073F                     ; Branch to L073F if Not Equal (Z = 0);   
L0778: 
          rts                           ; Return from Subroutine                  
; 
L0779: 
          jsr L0B8C                     ; Jump to Subroutine at L0B8C             
L077C: 
          jsr L48CA                     ; Jump to Subroutine at L48CA             
L077F: 
          jsr L209E                     ; Jump to Subroutine at L209E             
L0782: 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
L0785: 
          brset 4,RAM1_05d,L078F        ; Branch to L078F if Bit 4 is set at RAM1_05d (Mn=1)
L0788: 
          brclr 1,Miscell,L078E         ; Branch to L078E if Bit SM Clear (Mn = 0)
L078B: 
          brclr 1,PortD,L07B7           ; Branch to L07B7 if Bit DIAG Clear (Mn = 0)
L078E: 
          rts                           ; Return from Subroutine                  
; 
L078F: 
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
L0791: 
          brset 1,Miscell,L0796         ; Branch to L0796 if Bit SM is set at Miscell (Mn=1)
L0794: 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
L0796: 
          add RAM1_066                  ; Add without Carry, A ← (A) + (RAM1_066)
L0798: 
          sta RAM1_066                  ; Store Accumulator in Memory at RAM1_066 
L079A: 
          bcc L07B7                     ; Branch to L07B7 if C bit is cleared     
L079C: 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
L079E: 
          add RAM1_065                  ; Add without Carry, A ← (A) + (RAM1_065)
L07A0: 
          sta RAM1_065                  ; Store Accumulator in Memory at RAM1_065 
L07A2: 
          bcc L07B7                     ; Branch to L07B7 if C bit is cleared     
L07A4: 
          brset 7,RAM1_064,L07B7        ; Branch to L07B7 if Bit 7 is set at RAM1_064 (Mn=1)
L07A7: 
          inc RAM1_064                  ; Increment Byte RAM1_064, Byte = Byte + 1
L07A9: 
          bpl L07B7                     ; Branch to L07B7 if Plus N = 0           
L07AB: 
          brset 2,RAM1_08b,L07B7        ; Branch to L07B7 if Bit 2 is set at RAM1_08b (Mn=1)
L07AE: 
          brset 1,RAM1_05f,L07B7        ; Branch to L07B7 if Bit 1 is set at RAM1_05f (Mn=1)
L07B1: 
          brclr 0,RAM1_061,L07B7        ; Branch to L07B7 if Bit 0 Clear (Mn = 0) 
L07B4: 
          jmp L08A2                     ; Unconditional Jump to L08A2             
; 
L07B7: 
          bclr 4,RAM1_05d               ; Clear bit 4 at RAM1_05d                 
L07B9: 
          brclr 1,DDRC,L07C0            ; Branch to L07C0 if Bit WDOG_TEL Clear (Mn = 0)
L07BC: 
          bclr 1,DDRC                   ; Clear bit WDOG_TEL at DDRC              
L07BE: 
          bra L07D3                     ; Branch Always (1 = 1)                   
; 
L07C0: 
          lda RAM1_062                  ; Load Accumulator with value of Memory at RAM1_062, A <- (RAM1_062)
L07C2: 
          brclr 1,PortC,L07C9           ; Branch to L07C9 if Bit WDOG_TEL Clear (Mn = 0)
L07C5: 
          add #$20                      ; Add without Carry, A ← (A) + (#$20)   
L07C7: 
          bra L07CB                     ; Branch Always (1 = 1)                   
; 
L07C9: 
          sub #$20                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$20)
L07CB: 
          bcs L07CF                     ; Branch to L07CF if C = 1                
L07CD: 
          sta RAM1_062                  ; Store Accumulator in Memory at RAM1_062 
L07CF: 
          bset 1,DDRC                   ; Set Bit WDOG_TEL at memory DDRC (Mn <- 1 )
L07D1: 
          bset 1,PortC                  ; Set Bit WDOG_TEL at memory PortC (Mn <- 1 )
L07D3: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
L07D4: 
          brset 2,PortD,L07D9           ; Branch to L07D9 if Bit PANEL_ON_OFF is set at PortD (Mn=1)
L07D7: 
          ora #$01                      ; Logical OR Accumulator with Memory at #$01, A <- (A) || (#$01)
L07D9: 
          brset 0,PortD,L07DE           ; Branch to L07DE if Bit S-KONT is set at PortD (Mn=1)
L07DC: 
          ora #$02                      ; Logical OR Accumulator with Memory at #$02, A <- (A) || (#$02)
L07DE: 
          brclr 7,RAM1_05e,L07E3        ; Branch to L07E3 if Bit 7 Clear (Mn = 0) 
L07E1: 
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
L07E3: 
          brclr 1,PortD,L07E8           ; Branch to L07E8 if Bit DIAG Clear (Mn = 0)
L07E6: 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
L07E8: 
          tst RAM1_062                  ; Test Memory Byte for Negative or Zero, (RAM1_062) – 0x00
L07EA: 
          bpl L07EE                     ; Branch to L07EE if Plus N = 0           
L07EC: 
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
L07EE: 
          brclr 6,PortD,L07F3           ; Branch to L07F3 if Bit NAVI_IN Clear (Mn = 0)
L07F1: 
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
L07F3: 
          eor RAM1_05f                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_05f)
L07F5: 
          and #$9F                      ; Logical AND, A ← (A) && (#$9F)        
L07F7: 
          beq L0067                     ; Branch to L0067 if Equal Z=1            
L07F9: 
          sta RAM1_05b                  ; Store Accumulator in Memory at RAM1_05b 
L07FB: 
          eor RAM1_05f                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_05f)
L07FD: 
          sta RAM1_05f                  ; Store Accumulator in Memory at RAM1_05f 
L07FF: 
          brclr 3,RAM1_05f,L0006        ; Branch to L0006 if Bit 3 Clear (Mn = 0) 
          bset 5,RAM1_05f               ; Set Bit 5 at memory RAM1_05f (Mn <- 1 ) 
          bra L0010                     ; Branch Always (1 = 1)                   
; 
          brclr 7,RAM1_05f,L000B        ; Branch to L000B if Bit 7 Clear (Mn = 0) 
          bset 5,RAM1_05f               ; Set Bit 5 at memory RAM1_05f (Mn <- 1 ) 
          brset 1,RAM1_05f,L0010        ; Branch to L0010 if Bit 1 is set at RAM1_05f (Mn=1)
          bclr 5,RAM1_05f               ; Clear bit 5 at RAM1_05f                 
          brclr 0,RAM1_05b,L0020        ; Branch to L0020 if Bit 0 Clear (Mn = 0) 
          brset 0,RAM1_05f,L0095        ; Branch to L0095 if Bit 0 is set at RAM1_05f (Mn=1)
          brset 6,RAM1_05f,L001C        ; Branch to L001C if Bit 6 is set at RAM1_05f (Mn=1)
          brclr 0,RAM1_061,L0020        ; Branch to L0020 if Bit 0 Clear (Mn = 0) 
          bclr 6,RAM1_05f               ; Clear bit 6 at RAM1_05f                 
          bra L07B4                     ; Branch Always (1 = 1)                   
; 
          brclr 7,RAM1_060,L0026        ; Branch to L0026 if Bit 7 Clear (Mn = 0) 
          brset 5,RAM1_05d,L004B        ; Branch to L004B if Bit 5 is set at RAM1_05d (Mn=1)
          bclr 5,RAM1_05d               ; Clear bit 5 at RAM1_05d                 
          brset 1,RAM1_05f,L0035        ; Branch to L0035 if Bit 1 is set at RAM1_05f (Mn=1)
          brclr 1,RAM1_05b,L004B        ; Branch to L004B if Bit 1 Clear (Mn = 0) 
          brclr 0,RAM1_061,L00A9        ; Branch to L00A9 if Bit 0 Clear (Mn = 0) 
          bset 1,RAM1_061               ; Set Bit 1 at memory RAM1_061 (Mn <- 1 ) 
          bra L00A2                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_061,L0040        ; Branch to L0040 if Bit 0 is set at RAM1_061 (Mn=1)
          brclr 1,RAM1_05b,L004B        ; Branch to L004B if Bit 1 Clear (Mn = 0) 
          brset 0,RAM1_05f,L0097        ; Branch to L0097 if Bit 0 is set at RAM1_05f (Mn=1)
          bset 5,RAM1_05f               ; Set Bit 5 at memory RAM1_05f (Mn <- 1 ) 
          bclr 1,RAM1_061               ; Clear bit 1 at RAM1_061                 
          brclr 1,RAM1_05b,L004B        ; Branch to L004B if Bit 1 Clear (Mn = 0) 
          brclr 0,RAM1_05f,L004B        ; Branch to L004B if Bit 0 Clear (Mn = 0) 
          brset 3,STACK_0ce,L0097       ; Branch to L0097 if Bit 3 is set at STACK_0ce (Mn=1)
          brclr 4,RAM1_05b,L0061        ; Branch to L0061 if Bit 4 Clear (Mn = 0) 
          brset 0,RAM1_061,L0054        ; Branch to L0054 if Bit 0 is set at RAM1_061 (Mn=1)
          brclr 1,RAM1_05f,L0061        ; Branch to L0061 if Bit 1 Clear (Mn = 0) 
          brclr 3,RAM1_060,L0061        ; Branch to L0061 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_060               ; Clear bit 3 at RAM1_060                 
          brset 4,RAM1_05f,L005E        ; Branch to L005E if Bit 4 is set at RAM1_05f (Mn=1)
          bset 0,RAM1_060               ; Set Bit 0 at memory RAM1_060 (Mn <- 1 ) 
          brset 1,Miscell,L0064         ; Branch to L0064 if Bit SM is set at Miscell (Mn=1)
          brclr 2,RAM1_05b,L0067        ; Branch to L0067 if Bit 2 Clear (Mn = 0) 
          brclr 0,RAM1_061,L00A9        ; Branch to L00A9 if Bit 0 Clear (Mn = 0) 
          rts                           ; Return from Subroutine                  
; 
          jsr L2082                     ; Jump to Subroutine at L2082             
          jsr L2079                     ; Jump to Subroutine at L2079             
          jsr L48DF                     ; Jump to Subroutine at L48DF             
          lda #$C8                      ; Load Accumulator with value of Memory at #$C8, A <- (#$C8)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          beq L00AC                     ; Branch to L00AC if Equal Z=1            
          brclr 3,RAM1_067,L0081        ; Branch to L0081 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L490B                     ; Jump to Subroutine at L490B             
          jsr L4955                     ; Jump to Subroutine at L4955             
          jsr L40DD                     ; Jump to Subroutine at L40DD             
          brclr 7,RAM1_092,L0075        ; Branch to L0075 if Bit 7 Clear (Mn = 0) 
          brset 4,RAM1_092,L0075        ; Branch to L0075 if Bit 4 is set at RAM1_092 (Mn=1)
          bset 0,RAM1_061               ; Set Bit 0 at memory RAM1_061 (Mn <- 1 ) 
          bset 7,RAM1_060               ; Set Bit 7 at memory RAM1_060 (Mn <- 1 ) 
          bset 6,RAM1_060               ; Set Bit 6 at memory RAM1_060 (Mn <- 1 ) 
          bra L00A9                     ; Branch Always (1 = 1)                   
; 
          bclr 4,RAM1_061               ; Clear bit 4 at RAM1_061                 
          bset 0,RAM1_061               ; Set Bit 0 at memory RAM1_061 (Mn <- 1 ) 
          clr RAM1_093                  ; Clear byte at RAM1_093 <- 0x00          
          brclr 1,RAM1_05f,L00A9        ; Branch to L00A9 if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_061               ; Clear bit 1 at RAM1_061                 
          bra L00A9                     ; Branch Always (1 = 1)                   
; 
L08A2: 
          bclr 0,RAM1_061               ; Clear bit 0 at RAM1_061                 
          brclr 1,RAM1_05f,L00A9        ; Branch to L00A9 if Bit 1 Clear (Mn = 0) 
          bset 5,RAM1_05f               ; Set Bit 5 at memory RAM1_05f (Mn <- 1 ) 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          sta RAM1_060                  ; Store Accumulator in Memory at RAM1_060 
          bra L00A9                     ; Branch Always (1 = 1)                   
; 
L08B2: 
          bclr 7,RAM1_069               ; Clear bit 7 at RAM1_069                 
          brset 4,RAM1_060,L0068        ; Branch to L0068 if Bit 4 is set at RAM1_060 (Mn=1)
          brset 0,RAM1_060,L00BE        ; Branch to L00BE if Bit 0 is set at RAM1_060 (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          sta RAM1_060                  ; Store Accumulator in Memory at RAM1_060 
          brset 3,RAM1_07f,L00C7        ; Branch to L00C7 if Bit 3 is set at RAM1_07f (Mn=1)
          brset 2,RAM1_07f,L00C7        ; Branch to L00C7 if Bit 2 is set at RAM1_07f (Mn=1)
          jsr L0B8C                     ; Jump to Subroutine at L0B8C             
          brset 5,RAM1_05f,L00D0        ; Branch to L00D0 if Bit 5 is set at RAM1_05f (Mn=1)
          jsr L0B8C                     ; Jump to Subroutine at L0B8C             
          jsr L48CA                     ; Jump to Subroutine at L48CA             
          jsr L22BD                     ; Jump to Subroutine at L22BD             
          clr PLMA                      ; Clear byte at PLMA <- 0x00              
          bih L00DA                     ; Branch to L00DA if IRQ Pin High IRQ=1   
          jmp L04E5                     ; Unconditional Jump to L04E5             
; 
          brclr 2,RAM1_09e,L00E0        ; Branch to L00E0 if Bit 2 Clear (Mn = 0) 
          jsr L39A4                     ; Jump to Subroutine at L39A4             
          brset 6,RAM1_05f,L00E6        ; Branch to L00E6 if Bit 6 is set at RAM1_05f (Mn=1)
          jsr L3161                     ; Jump to Subroutine at L3161             
          brset 5,RAM1_05f,L00EC        ; Branch to L00EC if Bit 5 is set at RAM1_05f (Mn=1)
          jsr L209E                     ; Jump to Subroutine at L209E             
          jsr L0785                     ; Jump to Subroutine at L0785             
          brset 6,RAM1_05f,L00F9        ; Branch to L00F9 if Bit 6 is set at RAM1_05f (Mn=1)
          bclr 0,PortB                  ; Clear bit ENA_12V_ANTENE at PortB       
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          jsr L2649                     ; Jump to Subroutine at L2649             
          brset 5,RAM1_05f,L0107        ; Branch to L0107 if Bit 5 is set at RAM1_05f (Mn=1)
          brclr 6,RAM1_05f,L0120        ; Branch to L0120 if Bit 6 Clear (Mn = 0) 
          brclr 5,RAM1_061,L0107        ; Branch to L0107 if Bit 5 Clear (Mn = 0) 
          brset 0,RAM1_0a1,L0132        ; Branch to L0132 if Bit 0 is set at RAM1_0a1 (Mn=1)
          bra L0120                     ; Branch Always (1 = 1)                   
; 
          jsr L2082                     ; Jump to Subroutine at L2082             
          brclr 6,RAM1_05f,L012A        ; Branch to L012A if Bit 6 Clear (Mn = 0) 
          bclr 3,PortA                  ; Clear bit SLAVE_STATUS at PortA         
          bset 3,DDRA                   ; Set Bit SLAVE_STATUS at memory DDRA (Mn <- 1 )
          jsr L1375                     ; Jump to Subroutine at L1375             
          lda #$89                      ; Load Accumulator with value of Memory at #$89, A <- (#$89)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          lda STACK_0c4                 ; Load Accumulator with value of Memory at STACK_0c4, A <- (STACK_0c4)
          sta RAM1_0b7                  ; Store Accumulator in Memory at RAM1_0b7 
          bset 5,RAM1_061               ; Set Bit 5 at memory RAM1_061 (Mn <- 1 ) 
          bra L0132                     ; Branch Always (1 = 1)                   
; 
          brclr 7,RAM1_064,L012A        ; Branch to L012A if Bit 7 Clear (Mn = 0) 
          bclr 6,RAM1_05f               ; Clear bit 6 at RAM1_05f                 
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          jsr L2649                     ; Jump to Subroutine at L2649             
          bclr 5,RAM1_061               ; Clear bit 5 at RAM1_061                 
          jsr L3161                     ; Jump to Subroutine at L3161             
          jsr L13C5                     ; Jump to Subroutine at L13C5             
          brclr 5,RAM1_05f,L0164        ; Branch to L0164 if Bit 5 Clear (Mn = 0) 
          bclr 1,RAM1_081               ; Clear bit 1 at RAM1_081                 
          bset 2,TCR                    ; Set Bit OLV2 at memory TCR (Mn <- 1 )   
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
          bset 3,RAM1_08b               ; Set Bit 3 at memory RAM1_08b (Mn <- 1 ) 
          jsr L2079                     ; Jump to Subroutine at L2079             
          jsr L48DF                     ; Jump to Subroutine at L48DF             
          jsr L0B2F                     ; Jump to Subroutine at L0B2F             
          bset 4,RAM1_061               ; Set Bit 4 at memory RAM1_061 (Mn <- 1 ) 
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_07d                  ; Store Accumulator in Memory at RAM1_07d 
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          brclr 3,RAM1_08e,L0155        ; Branch to L0155 if Bit 3 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          sta STACK_0d5                 ; Store Accumulator in Memory at STACK_0d5
          bset 6,RAM1_094               ; Set Bit 6 at memory RAM1_094 (Mn <- 1 ) 
          bset 5,RAM1_094               ; Set Bit 5 at memory RAM1_094 (Mn <- 1 ) 
          bset 1,RAM1_094               ; Set Bit 1 at memory RAM1_094 (Mn <- 1 ) 
          bclr 4,RAM1_06b               ; Clear bit 4 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          jmp L09C6                     ; Unconditional Jump to L09C6             
; 
          bclr 2,TCR                    ; Clear bit OLV2 at TCR                   
          brset 5,RAM1_061,L0161        ; Branch to L0161 if Bit 5 is set at RAM1_061 (Mn=1)
          jsr L3161                     ; Jump to Subroutine at L3161             
          brclr 3,RAM1_060,L01A0        ; Branch to L01A0 if Bit 3 Clear (Mn = 0) 
          brset 2,RAM1_05f,L0175        ; Branch to L0175 if Bit 2 is set at RAM1_05f (Mn=1)
          jmp L0A6D                     ; Unconditional Jump to L0A6D             
; 
          jsr L20B4                     ; Jump to Subroutine at L20B4             
          lda #$FA                      ; Load Accumulator with value of Memory at #$FA, A <- (#$FA)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L40DD                     ; Jump to Subroutine at L40DD             
          brset 4,RAM1_060,L01C3        ; Branch to L01C3 if Bit 4 is set at RAM1_060 (Mn=1)
          brset 5,RAM1_05f,L01C3        ; Branch to L01C3 if Bit 5 is set at RAM1_05f (Mn=1)
          jsr L22BD                     ; Jump to Subroutine at L22BD             
          brclr 3,RAM1_067,L0197        ; Branch to L0197 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L23CE                     ; Jump to Subroutine at L23CE             
          brclr 6,RAM1_05f,L0180        ; Branch to L0180 if Bit 6 Clear (Mn = 0) 
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L0180                     ; Branch to L0180 if Not Equal (Z = 0);   
          bra L01C3                     ; Branch Always (1 = 1)                   
; 
          jsr L2065                     ; Jump to Subroutine at L2065             
          lda #$5A                      ; Load Accumulator with value of Memory at #$5A, A <- (#$5A)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          lda #$FA                      ; Load Accumulator with value of Memory at #$FA, A <- (#$FA)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L40DD                     ; Jump to Subroutine at L40DD             
          brset 4,RAM1_060,L01C3        ; Branch to L01C3 if Bit 4 is set at RAM1_060 (Mn=1)
          brset 5,RAM1_05f,L01C3        ; Branch to L01C3 if Bit 5 is set at RAM1_05f (Mn=1)
          brset 3,RAM1_060,L01C3        ; Branch to L01C3 if Bit 3 is set at RAM1_060 (Mn=1)
          brclr 4,RAM1_05f,L01A7        ; Branch to L01A7 if Bit 4 Clear (Mn = 0) 
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L01AB                     ; Branch to L01AB if Not Equal (Z = 0);   
          bset 3,RAM1_060               ; Set Bit 3 at memory RAM1_060 (Mn <- 1 ) 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
L09C6: 
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          lda #$1E                      ; Load Accumulator with value of Memory at #$1E, A <- (#$1E)
          sta RAM1_068                  ; Store Accumulator in Memory at RAM1_068 
          bclr 6,RAM1_067               ; Clear bit 6 at RAM1_067                 
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          lda #$5B                      ; Load Accumulator with value of Memory at #$5B, A <- (#$5B)
          sta RAM1_0a6                  ; Store Accumulator in Memory at RAM1_0a6 
L09D6: 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brclr 6,RAM1_05f,L01E8        ; Branch to L01E8 if Bit 6 Clear (Mn = 0) 
          jsr L142B                     ; Jump to Subroutine at L142B             
          jsr L37F4                     ; Jump to Subroutine at L37F4             
          jsr L34F7                     ; Jump to Subroutine at L34F7             
          jsr L3164                     ; Jump to Subroutine at L3164             
          bset 0,PortB                  ; Set Bit ENA_12V_ANTENE at memory PortB (Mn <- 1 )
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L40DD                     ; Jump to Subroutine at L40DD             
          brset 4,RAM1_060,L01C3        ; Branch to L01C3 if Bit 4 is set at RAM1_060 (Mn=1)
          bil L0266                     ; Branch to L0266 if IRQ Pin Low IRQ=0    
          jsr L4C7B                     ; Jump to Subroutine at L4C7B             
          jsr L22BD                     ; Jump to Subroutine at L22BD             
          brclr 2,TCR,L01FF             ; Branch to L01FF if Bit OLV2 Clear (Mn = 0)
          jsr L4955                     ; Jump to Subroutine at L4955             
          brclr 3,RAM1_067,L01D6        ; Branch to L01D6 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L23CE                     ; Jump to Subroutine at L23CE             
          brclr 6,RAM1_05f,L021B        ; Branch to L021B if Bit 6 Clear (Mn = 0) 
          jsr L1407                     ; Jump to Subroutine at L1407             
          jsr L37B0                     ; Jump to Subroutine at L37B0             
          jsr L316A                     ; Jump to Subroutine at L316A             
          brclr 5,RAM1_067,L021B        ; Branch to L021B if Bit 5 Clear (Mn = 0) 
          bclr 5,RAM1_067               ; Clear bit 5 at RAM1_067                 
          jsr L1419                     ; Jump to Subroutine at L1419             
          brclr 2,TCR,L0250             ; Branch to L0250 if Bit OLV2 Clear (Mn = 0)
          brclr 5,RAM1_05f,L01C3        ; Branch to L01C3 if Bit 5 Clear (Mn = 0) 
          jsr L2D55                     ; Jump to Subroutine at L2D55             
          jsr L0BBE                     ; Jump to Subroutine at L0BBE             
          jsr L490B                     ; Jump to Subroutine at L490B             
          brclr 4,RAM1_067,L01D6        ; Branch to L01D6 if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_067               ; Clear bit 4 at RAM1_067                 
          dec RAM1_0a7                  ; Decrement Byte at RAM1_0a7 Byte = Byte - 1
          beq L0248                     ; Branch to L0248 if Equal Z=1            
          brset 7,RAM1_05f,L01D2        ; Branch to L01D2 if Bit 7 is set at RAM1_05f (Mn=1)
          lda RAM1_09a                  ; Load Accumulator with value of Memory at RAM1_09a, A <- (RAM1_09a)
          cmp #$F0                      ; Compare Accumulator with Memory Byte, (A) - (#$F0)
          bcs L01D2                     ; Branch to L01D2 if C = 1                
          brclr 3,RAM1_05f,L01D6        ; Branch to L01D6 if Bit 3 Clear (Mn = 0) 
          brset 1,RAM1_05f,L01D6        ; Branch to L01D6 if Bit 1 is set at RAM1_05f (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_0a6                  ; Store Accumulator in Memory at RAM1_0a6 
          bra L01D6                     ; Branch Always (1 = 1)                   
; 
          dec RAM1_0a6                  ; Decrement Byte at RAM1_0a6 Byte = Byte - 1
          bne L01D6                     ; Branch to L01D6 if Not Equal (Z = 0);   
          bclr 5,RAM1_05f               ; Clear bit 5 at RAM1_05f                 
          bra L01D6                     ; Branch Always (1 = 1)                   
; 
          brset 5,RAM1_05f,L02BB        ; Branch to L02BB if Bit 5 is set at RAM1_05f (Mn=1)
          brclr 0,RAM1_0a1,L0259        ; Branch to L0259 if Bit 0 Clear (Mn = 0) 
          jmp L09C6                     ; Unconditional Jump to L09C6             
; 
          brclr 6,RAM1_067,L0263        ; Branch to L0263 if Bit 6 Clear (Mn = 0) 
          brset 3,RAM1_0b9,L02BB        ; Branch to L02BB if Bit 3 is set at RAM1_0b9 (Mn=1)
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          beq L02BB                     ; Branch to L02BB if Equal Z=1            
          jmp L09D6                     ; Unconditional Jump to L09D6             
; 
          bset 2,TCR                    ; Set Bit OLV2 at memory TCR (Mn <- 1 )   
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
          jmp L04E5                     ; Unconditional Jump to L04E5             
; 
L0A6D: 
          sei                           ; Set Interrupt Mask, I ← 1);           
          bclr 4,Miscell                ; Clear bit INTE at Miscell               
          jsr L2065                     ; Jump to Subroutine at L2065             
          lda #$5A                      ; Load Accumulator with value of Memory at #$5A, A <- (#$5A)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          bset 1,Miscell                ; Set Bit SM at memory Miscell (Mn <- 1 ) 
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          clr PLMB                      ; Clear byte at PLMB <- 0x00              
          clr RAM1_076                  ; Clear byte at RAM1_076 <- 0x00          
          clr RAM1_05e                  ; Clear byte at RAM1_05e <- 0x00          
          clr RAM1_0a8                  ; Clear byte at RAM1_0a8 <- 0x00          
          clr RAM1_0a6                  ; Clear byte at RAM1_0a6 <- 0x00          
L0A87: 
          clr ADSTAT                    ; Clear byte at ADSTAT <- 0x00            
          clr SCCR2                     ; Clear byte at SCCR2 <- 0x00             
          cli                           ; Clear Interrupt Mask (I <- 0)           
          jsr L0785                     ; Jump to Subroutine at L0785             
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          add ACH                       ; Add without Carry, A ← (A) + (ACH)    
          sta OCH2                      ; Store Accumulator in Memory at OCH2     
          clr OCL2                      ; Clear byte at OCL2 <- 0x00              
          wait                          ; Stop CPU Clock and Enable Interrupts    
          brset 0,PortA,L029B           ; Branch to L029B if Bit PANEL_STATUS is set at PortA (Mn=1)
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          sta ADSTAT                    ; Store Accumulator in Memory at ADSTAT   
          jsr L223C                     ; Jump to Subroutine at L223C             
          brset 5,RAM1_05f,L02BB        ; Branch to L02BB if Bit 5 is set at RAM1_05f (Mn=1)
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L02C5                     ; Branch to L02C5 if Not Equal (Z = 0);   
          brset 3,PortA,L02B8           ; Branch to L02B8 if Bit SLAVE_STATUS is set at PortA (Mn=1)
          bclr 3,PortA                  ; Clear bit SLAVE_STATUS at PortA         
          bset 3,DDRA                   ; Set Bit SLAVE_STATUS at memory DDRA (Mn <- 1 )
          clra                          ; Clear byte Accumulator, A <- 0x00       
deca 
          bne L02B1                     ; Branch to L02B1 if Not Equal (Z = 0);   
          bclr 3,DDRA                   ; Clear bit SLAVE_STATUS at DDRA          
          clr RAM1_06a                  ; Clear byte at RAM1_06a <- 0x00          
          brclr 6,RAM1_05f,L02BE        ; Branch to L02BE if Bit 6 Clear (Mn = 0) 
          jmp L0506                     ; Unconditional Jump to L0506             
; 
          bclr 0,DDRB                   ; Clear bit ENA_12V_ANTENE at DDRB        
          brclr 7,RAM1_064,L02C5        ; Branch to L02C5 if Bit 7 Clear (Mn = 0) 
          bclr 6,RAM1_061               ; Clear bit 6 at RAM1_061                 
          brset 6,RAM1_05f,L0287        ; Branch to L0287 if Bit 6 is set at RAM1_05f (Mn=1)
          bil L0266                     ; Branch to L0266 if IRQ Pin Low IRQ=0    
          brclr 2,TCR,L02D9             ; Branch to L02D9 if Bit OLV2 Clear (Mn = 0)
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L0287                     ; Branch to L0287 if Not Equal (Z = 0);   
          bset 5,PortB                  ; Set Bit RESET_SLAVE at memory PortB (Mn <- 1 )
          bclr 3,PortA                  ; Clear bit SLAVE_STATUS at PortA         
          bset 3,DDRA                   ; Set Bit SLAVE_STATUS at memory DDRA (Mn <- 1 )
          bra L0273                     ; Branch Always (1 = 1)                   
; 
          brclr 7,ADSTAT,L02D9          ; Branch to L02D9 if Bit COCO Clear (Mn = 0)
          tst RAM1_0a8                  ; Test Memory Byte for Negative or Zero, (RAM1_0a8) – 0x00
          bne L02EB                     ; Branch to L02EB if Not Equal (Z = 0);   
          brclr 3,RAM1_0a6,L0305        ; Branch to L0305 if Bit 3 Clear (Mn = 0) 
          lda RAM1_0a4                  ; Load Accumulator with value of Memory at RAM1_0a4, A <- (RAM1_0a4)
          ldx RAM1_0a5                  ; Load Index Register with Memory Byte, X <- (RAM1_0a5)
          bsr L0328                     ; Branch to Subroutine at L0328           
          bra L031B                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0a8                  ; Load Accumulator with value of Memory at RAM1_0a8, A <- (RAM1_0a8)
          sub ADDATA                    ; Subtract Memory Byte from Accumulator , A ← (A) – (ADDATA)
          bcs L0305                     ; Branch to L0305 if C = 1                
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
          bcs L0305                     ; Branch to L0305 if C = 1                
          bset 2,TCR                    ; Set Bit OLV2 at memory TCR (Mn <- 1 )   
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          bset 3,DDRB                   ; Set Bit MUTE_WOOFER at memory DDRB (Mn <- 1 )
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          bclr 5,PortB                  ; Clear bit RESET_SLAVE at PortB          
          bra L031F                     ; Branch Always (1 = 1)                   
; 
          lda ADDATA                    ; Load Accumulator with value of Memory at ADDATA, A <- (ADDATA)
          add RAM1_0a5                  ; Add without Carry, A ← (A) + (RAM1_0a5)
          sta RAM1_0a5                  ; Store Accumulator in Memory at RAM1_0a5 
          bcc L030F                     ; Branch to L030F if C bit is cleared     
          inc RAM1_0a4                  ; Increment Byte RAM1_0a4, Byte = Byte + 1
          inc RAM1_0a6                  ; Increment Byte RAM1_0a6, Byte = Byte + 1
          lda RAM1_0a6                  ; Load Accumulator with value of Memory at RAM1_0a6, A <- (RAM1_0a6)
          bit #$3F                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$3F)
          bne L0325                     ; Branch to L0325 if Not Equal (Z = 0);   
          lda RAM1_0a4                  ; Load Accumulator with value of Memory at RAM1_0a4, A <- (RAM1_0a4)
          ldx RAM1_0a5                  ; Load Index Register with Memory Byte, X <- (RAM1_0a5)
          bsr L032A                     ; Branch to Subroutine at L032A           
          sta RAM1_0a8                  ; Store Accumulator in Memory at RAM1_0a8 
          clr RAM1_0a5                  ; Clear byte at RAM1_0a5 <- 0x00          
          clr RAM1_0a4                  ; Clear byte at RAM1_0a4 <- 0x00          
          clr RAM1_0a6                  ; Clear byte at RAM1_0a6 <- 0x00          
          jmp L0A87                     ; Unconditional Jump to L0A87             
; 
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          rts                           ; Return from Subroutine                  
; 
L0B2F: 
          brset 7,RAM1_061,L0355        ; Branch to L0355 if Bit 7 is set at RAM1_061 (Mn=1)
          ldx #$A8                      ; Load Index Register with Memory Byte, X <- (#$A8)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          jsr L1296                     ; Jump to Subroutine at L1296             
          jsr L12B1                     ; Jump to Subroutine at L12B1             
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          ldx #$AB                      ; Load Index Register with Memory Byte, X <- (#$AB)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          add #$FD                      ; Add without Carry, A ← (A) + (#$FD)   
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          bpl L034D                     ; Branch to L034D if Plus N = 0           
          clra                          ; Clear byte Accumulator, A <- 0x00       
          cmp RAM1_085                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_085)
          bcc L0355                     ; Branch to L0355 if C bit is cleared     
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          bset 3,RAM1_05c               ; Set Bit 3 at memory RAM1_05c (Mn <- 1 ) 
          bclr 7,RAM1_082               ; Clear bit 7 at RAM1_082                 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_088                  ; Store Accumulator in Memory at RAM1_088 
          sta RAM1_083                  ; Store Accumulator in Memory at RAM1_083 
          jsr L0FCC                     ; Jump to Subroutine at L0FCC             
          clr RAM1_082                  ; Clear byte at RAM1_082 <- 0x00          
          jsr L0F96                     ; Jump to Subroutine at L0F96             
          jsr L0F89                     ; Jump to Subroutine at L0F89             
          clr RAM1_07e                  ; Clear byte at RAM1_07e <- 0x00          
          clr RAM1_080                  ; Clear byte at RAM1_080 <- 0x00          
          clr RAM1_087                  ; Clear byte at RAM1_087 <- 0x00          
          bset 4,RAM1_07e               ; Set Bit 4 at memory RAM1_07e (Mn <- 1 ) 
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          brclr 3,RAM1_05f,L0378        ; Branch to L0378 if Bit 3 Clear (Mn = 0) 
          brset 0,RAM1_081,L039D        ; Branch to L039D if Bit 0 is set at RAM1_081 (Mn=1)
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          clrx                          ; Clear Index Register, X <- 0x00         
          brset 0,RAM1_061,L0380        ; Branch to L0380 if Bit 0 is set at RAM1_061 (Mn=1)
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          lda X136A,x                   ; Load Accumulator with value of Memory at X136A, A <- (X136A)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 6,RAM1_082               ; Set Bit 6 at memory RAM1_082 (Mn <- 1 ) 
          bclr 2,RAM1_06b               ; Clear bit 2 at RAM1_06b                 
          bclr 1,RAM1_06b               ; Clear bit 1 at RAM1_06b                 
          rts                           ; Return from Subroutine                  
; 
L0B8C: 
          brclr 3,PortB,L0396           ; Branch to L0396 if Bit MUTE_WOOFER Clear (Mn = 0)
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          jsr L2623                     ; Jump to Subroutine at L2623             
          jsr L0F96                     ; Jump to Subroutine at L0F96             
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          rts                           ; Return from Subroutine                  
; 
L0B9E: 
          brclr 7,RAM1_087,L03BD        ; Branch to L03BD if Bit 7 Clear (Mn = 0) 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          eor TCR                       ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (TCR)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          lda OCL1                      ; Load Accumulator with value of Memory at OCL1, A <- (OCL1)
          add #$A0                      ; Add without Carry, A ← (A) + (#$A0)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda OCH1                      ; Load Accumulator with value of Memory at OCH1, A <- (OCH1)
          adc #$01                      ; ADD with CARRY, A ← (A) + (#$01) + (C) 
          cmp ACH                       ; Compare Accumulator with Memory Byte, (A) - (ACH)
          bmi L03BA                     ; Branch to L03BA if Minus N = 1          
          bne L03BD                     ; Branch to L03BD if Not Equal (Z = 0);   
cpx ACL 
          bhi L03BD                     ; Branch to L03BD if Higher C v Z = 0     
          lda ACH                       ; Load Accumulator with value of Memory at ACH, A <- (ACH)
          inca                          ; Increment Accumulator by 1,A++          
          rts                           ; Return from Subroutine                  
; 
L0BBE: 
          tst RAM1_07e                  ; Test Memory Byte for Negative or Zero, (RAM1_07e) – 0x00
          beq L03FD                     ; Branch to L03FD if Equal Z=1            
          brclr 2,RAM1_07e,L03CD        ; Branch to L03CD if Bit 2 Clear (Mn = 0) 
          bclr 2,RAM1_07e               ; Clear bit 2 at RAM1_07e                 
          clr RAM1_08a                  ; Clear byte at RAM1_08a <- 0x00          
          lda #$DD                      ; Load Accumulator with value of Memory at #$DD, A <- (#$DD)
          sta RAM1_087                  ; Store Accumulator in Memory at RAM1_087 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          brset 6,RAM1_07e,L03E8        ; Branch to L03E8 if Bit 6 is set at RAM1_07e (Mn=1)
          lda #$C8                      ; Load Accumulator with value of Memory at #$C8, A <- (#$C8)
          brset 7,RAM1_07e,L03E8        ; Branch to L03E8 if Bit 7 is set at RAM1_07e (Mn=1)
          brclr 1,RAM1_07e,L03F2        ; Branch to L03F2 if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_07e               ; Clear bit 1 at RAM1_07e                 
          lda RAM1_082                  ; Load Accumulator with value of Memory at RAM1_082, A <- (RAM1_082)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L03F2                     ; Branch to L03F2 if Not Equal (Z = 0);   
          bset 4,RAM1_080               ; Set Bit 4 at memory RAM1_080 (Mn <- 1 ) 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          bclr 6,RAM1_07e               ; Clear bit 6 at RAM1_07e                 
          bclr 7,RAM1_07e               ; Clear bit 7 at RAM1_07e                 
          jsr L0F96                     ; Jump to Subroutine at L0F96             
          jmp L0D0D                     ; Unconditional Jump to L0D0D             
; 
          brclr 5,RAM1_07e,L03FD        ; Branch to L03FD if Bit 5 Clear (Mn = 0) 
          bclr 5,RAM1_07e               ; Clear bit 5 at RAM1_07e                 
          brclr 6,RAM1_082,L03FD        ; Branch to L03FD if Bit 6 Clear (Mn = 0) 
          jmp L0CF6                     ; Unconditional Jump to L0CF6             
; 
L0BFD: 
          brclr 6,RAM1_082,L0403        ; Branch to L0403 if Bit 6 Clear (Mn = 0) 
          jmp L0CB9                     ; Unconditional Jump to L0CB9             
; 
          brset 2,RAM1_0be,L0409        ; Branch to L0409 if Bit 2 is set at RAM1_0be (Mn=1)
          brset 3,RAM1_07f,L0442        ; Branch to L0442 if Bit 3 is set at RAM1_07f (Mn=1)
          brset 7,RAM1_087,L0470        ; Branch to L0470 if Bit 7 is set at RAM1_087 (Mn=1)
          brset 0,RAM1_080,L0442        ; Branch to L0442 if Bit 0 is set at RAM1_080 (Mn=1)
          brset 5,RAM1_07f,L0464        ; Branch to L0464 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 7,RAM1_07f,L046A        ; Branch to L046A if Bit 7 is set at RAM1_07f (Mn=1)
          brset 6,RAM1_07f,L045E        ; Branch to L045E if Bit 6 is set at RAM1_07f (Mn=1)
          brset 4,RAM1_082,L0429        ; Branch to L0429 if Bit 4 is set at RAM1_082 (Mn=1)
          brclr 5,RAM1_080,L0429        ; Branch to L0429 if Bit 5 Clear (Mn = 0) 
          lda RAM1_088                  ; Load Accumulator with value of Memory at RAM1_088, A <- (RAM1_088)
          add #$34                      ; Add without Carry, A ← (A) + (#$34)   
          bcc L0429                     ; Branch to L0429 if C bit is cleared     
          bclr 5,RAM1_082               ; Clear bit 5 at RAM1_082                 
          jmp L0CE2                     ; Unconditional Jump to L0CE2             
; 
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          bne L0445                     ; Branch to L0445 if Not Equal (Z = 0);   
          lda RAM2_0266                 ; Load Accumulator with value of Memory at RAM2_0266, A <- (RAM2_0266)
          bpl L0442                     ; Branch to L0442 if Plus N = 0           
          lda RAM2_0265                 ; Load Accumulator with value of Memory at RAM2_0265, A <- (RAM2_0265)
          cmp #$40                      ; Compare Accumulator with Memory Byte, (A) - (#$40)
          beq L043F                     ; Branch to L043F if Equal Z=1            
          cmp #$30                      ; Compare Accumulator with Memory Byte, (A) - (#$30)
          bne L0442                     ; Branch to L0442 if Not Equal (Z = 0);   
          jmp L0CEC                     ; Unconditional Jump to L0CEC             
          jmp L0CD8                     ; Unconditional Jump to L0CD8             
; 
deca 
          bne L045B                     ; Branch to L045B if Not Equal (Z = 0);   
          ldx #$AD                      ; Load Index Register with Memory Byte, X <- (#$AD)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          beq L0452                     ; Branch to L0452 if Equal Z=1            
          brset 1,RAM1_07c,L045E        ; Branch to L045E if Bit 1 is set at RAM1_07c (Mn=1)
          brset 7,RAM1_07c,L0442        ; Branch to L0442 if Bit 7 is set at RAM1_07c (Mn=1)
          brset 1,RAM1_07c,L0442        ; Branch to L0442 if Bit 1 is set at RAM1_07c (Mn=1)
          jmp L0CEC                     ; Unconditional Jump to L0CEC             
; 
deca 
          bne L0464                     ; Branch to L0464 if Not Equal (Z = 0);   
          brset 0,RAM1_0ba,L04D8        ; Branch to L04D8 if Bit 0 is set at RAM1_0ba (Mn=1)
          jmp L0CEC                     ; Unconditional Jump to L0CEC             
; 
          brset 6,RAM1_080,L04D8        ; Branch to L04D8 if Bit 6 is set at RAM1_080 (Mn=1)
          jmp L0CEC                     ; Unconditional Jump to L0CEC             
; 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_087                  ; Store Accumulator in Memory at RAM1_087 
          bra L04EC                     ; Branch Always (1 = 1)                   
; 
          dec RAM1_08a                  ; Decrement Byte at RAM1_08a Byte = Byte - 1
          bpl L04D7                     ; Branch to L04D7 if Plus N = 0           
          lda RAM1_087                  ; Load Accumulator with value of Memory at RAM1_087, A <- (RAM1_087)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          cmp #$1F                      ; Compare Accumulator with Memory Byte, (A) - (#$1F)
          bne L0480                     ; Branch to L0480 if Not Equal (Z = 0);   
          bclr 1,RAM1_087               ; Clear bit 1 at RAM1_087                 
          bclr 6,RAM1_087               ; Clear bit 6 at RAM1_087                 
          inc RAM1_087                  ; Increment Byte RAM1_087, Byte = Byte + 1
          brset 6,RAM1_087,L0488        ; Branch to L0488 if Bit 6 is set at RAM1_087 (Mn=1)
          brclr 0,RAM1_087,L04AB        ; Branch to L04AB if Bit 0 Clear (Mn = 0) 
          jsr L1278                     ; Jump to Subroutine at L1278             
          beq L0492                     ; Branch to L0492 if Equal Z=1            
          brset 6,RAM1_087,L050B        ; Branch to L050B if Bit 6 is set at RAM1_087 (Mn=1)
          bra L0508                     ; Branch Always (1 = 1)                   
; 
          brclr 5,RAM1_07f,L04A1        ; Branch to L04A1 if Bit 5 Clear (Mn = 0) 
          bclr 7,RAM1_07f               ; Clear bit 7 at RAM1_07f                 
          bclr 7,RAM1_082               ; Clear bit 7 at RAM1_082                 
          bclr 6,RAM1_082               ; Clear bit 6 at RAM1_082                 
          clr RAM1_08a                  ; Clear byte at RAM1_08a <- 0x00          
          bclr 0,RAM1_082               ; Clear bit 0 at RAM1_082                 
          bra L0508                     ; Branch Always (1 = 1)                   
; 
          brclr 0,RAM1_087,L04AB        ; Branch to L04AB if Bit 0 Clear (Mn = 0) 
          jsr L0FB1                     ; Jump to Subroutine at L0FB1             
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          bra L04B4                     ; Branch Always (1 = 1)                   
; 
          lda #$FE                      ; Load Accumulator with value of Memory at #$FE, A <- (#$FE)
          sta RAM1_088                  ; Store Accumulator in Memory at RAM1_088 
          jsr L0F96                     ; Jump to Subroutine at L0F96             
          lda #$50                      ; Load Accumulator with value of Memory at #$50, A <- (#$50)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          jmp L0DA3                     ; Unconditional Jump to L0DA3             
; 
L0CB9: 
          dec RAM1_08a                  ; Decrement Byte at RAM1_08a Byte = Byte - 1
          bne L04D7                     ; Branch to L04D7 if Not Equal (Z = 0);   
          brclr 0,RAM1_081,L0514        ; Branch to L0514 if Bit 0 Clear (Mn = 0) 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          jsr L1278                     ; Jump to Subroutine at L1278             
          beq L04F6                     ; Branch to L04F6 if Equal Z=1            
          brclr 7,RAM1_082,L04E5        ; Branch to L04E5 if Bit 7 Clear (Mn = 0) 
          eor RAM1_082                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_082)
          sta RAM1_082                  ; Store Accumulator in Memory at RAM1_082 
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          jsr L0F89                     ; Jump to Subroutine at L0F89             
          rts                           ; Return from Subroutine                  
; 
L0CD8: 
          brclr 5,RAM1_082,L04DE        ; Branch to L04DE if Bit 5 Clear (Mn = 0) 
          brclr 4,RAM1_082,L04E2        ; Branch to L04E2 if Bit 4 Clear (Mn = 0) 
          bset 5,RAM1_082               ; Set Bit 5 at memory RAM1_082 (Mn <- 1 ) 
          bra L04B6                     ; Branch Always (1 = 1)                   
; 
L0CE2: 
          brset 7,RAM1_082,L04B6        ; Branch to L04B6 if Bit 7 is set at RAM1_082 (Mn=1)
          brset 7,RAM1_082,L04EC        ; Branch to L04EC if Bit 7 is set at RAM1_082 (Mn=1)
          jsr L0F96                     ; Jump to Subroutine at L0F96             
          rts                           ; Return from Subroutine                  
; 
L0CEC: 
          jsr L1278                     ; Jump to Subroutine at L1278             
          bne L0508                     ; Branch to L0508 if Not Equal (Z = 0);   
          bclr 5,RAM1_082               ; Clear bit 5 at RAM1_082                 
          brclr 7,RAM1_082,L04B6        ; Branch to L04B6 if Bit 7 Clear (Mn = 0) 
L0CF6: 
          bclr 6,RAM1_082               ; Clear bit 6 at RAM1_082                 
          bclr 4,RAM1_080               ; Clear bit 4 at RAM1_080                 
          brclr 7,RAM1_082,L04D7        ; Branch to L04D7 if Bit 7 Clear (Mn = 0) 
          clr RAM1_08a                  ; Clear byte at RAM1_08a <- 0x00          
          brset 0,RAM1_080,L04D7        ; Branch to L04D7 if Bit 0 is set at RAM1_080 (Mn=1)
          jsr L0FB1                     ; Jump to Subroutine at L0FB1             
          jmp L0BFD                     ; Unconditional Jump to L0BFD             
; 
          brclr 7,RAM1_082,L04D8        ; Branch to L04D8 if Bit 7 Clear (Mn = 0) 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
L0D0D: 
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 6,RAM1_082               ; Set Bit 6 at memory RAM1_082 (Mn <- 1 ) 
          jmp L0DA3                     ; Unconditional Jump to L0DA3             
; 
          brclr 1,RAM1_081,L0565        ; Branch to L0565 if Bit 1 Clear (Mn = 0) 
          brset 7,RAM1_060,L0565        ; Branch to L0565 if Bit 7 is set at RAM1_060 (Mn=1)
          brset 2,RAM1_082,L0592        ; Branch to L0592 if Bit 2 is set at RAM1_082 (Mn=1)
          brclr 3,RAM1_082,L052E        ; Branch to L052E if Bit 3 Clear (Mn = 0) 
          brclr 1,PortB,L0529           ; Branch to L0529 if Bit ENA_12V_WOOFER Clear (Mn = 0)
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          bra L058E                     ; Branch Always (1 = 1)                   
; 
          brclr 7,RAM1_06b,L0592        ; Branch to L0592 if Bit 7 Clear (Mn = 0) 
          bra L058A                     ; Branch Always (1 = 1)                   
; 
          brclr 3,PortB,L0543           ; Branch to L0543 if Bit MUTE_WOOFER Clear (Mn = 0)
          brset 7,RAM1_082,L0537        ; Branch to L0537 if Bit 7 is set at RAM1_082 (Mn=1)
          brset 2,RAM1_0be,L04D7        ; Branch to L04D7 if Bit 2 is set at RAM1_0be (Mn=1)
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          brclr 7,RAM1_06b,L059B        ; Branch to L059B if Bit 7 Clear (Mn = 0) 
          brclr 1,PortB,L059B           ; Branch to L059B if Bit ENA_12V_WOOFER Clear (Mn = 0)
          bra L0597                     ; Branch Always (1 = 1)                   
; 
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          brclr 0,RAM1_061,L0599        ; Branch to L0599 if Bit 0 Clear (Mn = 0) 
          brset 7,RAM1_06b,L0551        ; Branch to L0551 if Bit 7 is set at RAM1_06b (Mn=1)
          bset 7,RAM1_06b               ; Set Bit 7 at memory RAM1_06b (Mn <- 1 ) 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          bra L059B                     ; Branch Always (1 = 1)                   
; 
          brset 1,PortB,L055A           ; Branch to L055A if Bit ENA_12V_WOOFER is set at PortB (Mn=1)
          bset 1,PortB                  ; Set Bit ENA_12V_WOOFER at memory PortB (Mn <- 1 )
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          bra L059B                     ; Branch Always (1 = 1)                   
; 
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
          brclr 1,RAM1_090,L0599        ; Branch to L0599 if Bit 1 Clear (Mn = 0) 
          bset 3,PortB                  ; Set Bit MUTE_WOOFER at memory PortB (Mn <- 1 )
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          bra L059B                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_061,L0572        ; Branch to L0572 if Bit 0 is set at RAM1_061 (Mn=1)
          brset 7,RAM1_05f,L0592        ; Branch to L0592 if Bit 7 is set at RAM1_05f (Mn=1)
          brset 3,RAM1_05f,L0592        ; Branch to L0592 if Bit 3 is set at RAM1_05f (Mn=1)
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          bra L0597                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_05f,L0592        ; Branch to L0592 if Bit 3 is set at RAM1_05f (Mn=1)
          brset 1,PortB,L0592           ; Branch to L0592 if Bit ENA_12V_WOOFER is set at PortB (Mn=1)
          brclr 7,RAM1_060,L0580        ; Branch to L0580 if Bit 7 Clear (Mn = 0) 
          lda RAM2_02c4                 ; Load Accumulator with value of Memory at RAM2_02c4, A <- (RAM2_02c4)
          bmi L0592                     ; Branch to L0592 if Minus N = 1          
          bset 1,PortB                  ; Set Bit ENA_12V_WOOFER at memory PortB (Mn <- 1 )
          bclr 7,RAM1_06b               ; Clear bit 7 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          bra L059B                     ; Branch Always (1 = 1)                   
; 
          bclr 7,RAM1_06b               ; Clear bit 7 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          bra L059B                     ; Branch Always (1 = 1)                   
; 
          brclr 0,PortC,L0597           ; Branch to L0597 if Bit ENA_8V Clear (Mn = 0)
          bset 3,PortB                  ; Set Bit MUTE_WOOFER at memory PortB (Mn <- 1 )
          ldx #$05                      ; Load Index Register with Memory Byte, X <- (#$05)
          bset 0,RAM1_081               ; Set Bit 0 at memory RAM1_081 (Mn <- 1 ) 
          lda X136A,x                   ; Load Accumulator with value of Memory at X136A, A <- (X136A)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 4,TCR                    ; Set Bit FOLV2 at memory TCR (Mn <- 1 )  
          rts                           ; Return from Subroutine                  
; 
L0DA3: 
          ldx RAM1_085                  ; Load Index Register with Memory Byte, X <- (RAM1_085)
          lda X131A,x                   ; Load Accumulator with value of Memory at X131A, A <- (X131A)
          brclr 1,RAM1_081,L05AE        ; Branch to L05AE if Bit 1 Clear (Mn = 0) 
          lda X133A,x                   ; Load Accumulator with value of Memory at X133A, A <- (X133A)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brset 4,RAM1_080,L05C2        ; Branch to L05C2 if Bit 4 is set at RAM1_080 (Mn=1)
          brset 6,RAM1_082,L05BF        ; Branch to L05BF if Bit 6 is set at RAM1_082 (Mn=1)
          brset 7,RAM1_087,L05C2        ; Branch to L05C2 if Bit 7 is set at RAM1_087 (Mn=1)
          brset 7,RAM1_082,L05BF        ; Branch to L05BF if Bit 7 is set at RAM1_082 (Mn=1)
          brclr 5,RAM1_082,L05C2        ; Branch to L05C2 if Bit 5 Clear (Mn = 0) 
          jmp L0E9A                     ; Unconditional Jump to L0E9A             
; 
          jsr L1296                     ; Jump to Subroutine at L1296             
          brset 7,RAM1_087,L05E5        ; Branch to L05E5 if Bit 7 is set at RAM1_087 (Mn=1)
          brset 4,RAM1_07f,L060C        ; Branch to L060C if Bit 4 is set at RAM1_07f (Mn=1)
          ldx #$A9                      ; Load Index Register with Memory Byte, X <- (#$A9)
          jsr L12A5                     ; Jump to Subroutine at L12A5             
          brclr 5,RAM1_07f,L05D6        ; Branch to L05D6 if Bit 5 Clear (Mn = 0) 
          brset 1,RAM1_0a1,L05DF        ; Branch to L05DF if Bit 1 is set at RAM1_0a1 (Mn=1)
          brclr 6,RAM1_07f,L060C        ; Branch to L060C if Bit 6 Clear (Mn = 0) 
          tst RAM1_058                  ; Test Memory Byte for Negative or Zero, (RAM1_058) – 0x00
          beq L05EF                     ; Branch to L05EF if Equal Z=1            
          dec RAM1_058                  ; Decrement Byte at RAM1_058 Byte = Byte - 1
          stx RAM1_086                  ; Store Index Register In Memory at RAM1_086
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          bra L05EF                     ; Branch Always (1 = 1)                   
; 
          brclr 6,RAM1_087,L05EF        ; Branch to L05EF if Bit 6 Clear (Mn = 0) 
          add X1372                     ; Add without Carry, A ← (A) + (X1372)  
          bcc L05EF                     ; Branch to L05EF if C bit is cleared     
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          cmp RAM1_058                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_058)
          bhi L05F5                     ; Branch to L05F5 if Higher C v Z = 0     
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brclr 7,RAM1_087,L060C        ; Branch to L060C if Bit 7 Clear (Mn = 0) 
          brset 6,RAM1_087,L060C        ; Branch to L060C if Bit 6 is set at RAM1_087 (Mn=1)
          lda RAM1_087                  ; Load Accumulator with value of Memory at RAM1_087, A <- (RAM1_087)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          add X135A,x                   ; Add without Carry, A ← (A) + (X135A)  
          bcc L060A                     ; Branch to L060A if C bit is cleared     
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brset 6,RAM1_081,L061B        ; Branch to L061B if Bit 6 is set at RAM1_081 (Mn=1)
          lda RAM1_084                  ; Load Accumulator with value of Memory at RAM1_084, A <- (RAM1_084)
          beq L061B                     ; Branch to L061B if Equal Z=1            
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add RAM1_058                  ; Add without Carry, A ← (A) + (RAM1_058)
          bcs L061D                     ; Branch to L061D if C = 1                
          clra                          ; Clear byte Accumulator, A <- 0x00       
          cmp XB658                     ; Compare Accumulator with Memory Byte, (A) - (XB658)
          brclr 3,RAM1_081,L0624        ; Branch to L0624 if Bit 3 Clear (Mn = 0) 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sub RAM1_085                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_085)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brset 2,RAM1_0be,L065C        ; Branch to L065C if Bit 2 is set at RAM1_0be (Mn=1)
          brset 3,RAM1_082,L069A        ; Branch to L069A if Bit 3 is set at RAM1_082 (Mn=1)
          brset 2,RAM1_082,L0649        ; Branch to L0649 if Bit 2 is set at RAM1_082 (Mn=1)
          brset 2,RAM1_06b,L0635        ; Branch to L0635 if Bit 2 is set at RAM1_06b (Mn=1)
          brclr 1,RAM1_06b,L063B        ; Branch to L063B if Bit 1 Clear (Mn = 0) 
          bclr 2,RAM1_06b               ; Clear bit 2 at RAM1_06b                 
          bclr 1,RAM1_06b               ; Clear bit 1 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          brclr 1,RAM1_081,L065C        ; Branch to L065C if Bit 1 Clear (Mn = 0) 
          brset 1,PortB,L065C           ; Branch to L065C if Bit ENA_12V_WOOFER is set at PortB (Mn=1)
          brset 4,RAM1_082,L065C        ; Branch to L065C if Bit 4 is set at RAM1_082 (Mn=1)
          jsr L0F4A                     ; Jump to Subroutine at L0F4A             
          bra L069A                     ; Branch Always (1 = 1)                   
; 
          ldx #$AE                      ; Load Index Register with Memory Byte, X <- (#$AE)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
deca 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          add X1373                     ; Add without Carry, A ← (A) + (X1373)  
          add RAM1_058                  ; Add without Carry, A ← (A) + (RAM1_058)
          bcs L069A                     ; Branch to L069A if C = 1                
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brset 7,RAM1_081,L0677        ; Branch to L0677 if Bit 7 is set at RAM1_081 (Mn=1)
          brset 5,RAM1_07f,L0677        ; Branch to L0677 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 6,RAM1_07f,L0677        ; Branch to L0677 if Bit 6 is set at RAM1_07f (Mn=1)
          brset 3,RAM1_081,L0677        ; Branch to L0677 if Bit 3 is set at RAM1_081 (Mn=1)
          ldx #$00                      ; Load Index Register with Memory Byte, X <- (#$00)
          brclr 1,RAM1_081,L066F        ; Branch to L066F if Bit 1 Clear (Mn = 0) 
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          jsr L12C3                     ; Jump to Subroutine at L12C3             
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          bra L0678                     ; Branch Always (1 = 1)                   
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          cmp RAM1_083                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_083)
          beq L068E                     ; Branch to L068E if Equal Z=1            
          bcc L0689                     ; Branch to L0689 if C bit is cleared     
          lda RAM1_083                  ; Load Accumulator with value of Memory at RAM1_083, A <- (RAM1_083)
deca 
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta RAM1_083                  ; Store Accumulator in Memory at RAM1_083 
          bra L068B                     ; Branch Always (1 = 1)                   
; 
          sta RAM1_083                  ; Store Accumulator in Memory at RAM1_083 
          jsr L0FBD                     ; Jump to Subroutine at L0FBD             
          asl RAM1_059                  ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          sub RAM1_059                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_059)
          bcc L0697                     ; Branch to L0697 if C bit is cleared     
          clra                          ; Clear byte Accumulator, A <- 0x00       
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bcc L069C                     ; Branch to L069C if C bit is cleared     
L0E9A: 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          brset 6,RAM1_082,L06B2        ; Branch to L06B2 if Bit 6 is set at RAM1_082 (Mn=1)
          brset 7,RAM1_087,L06B2        ; Branch to L06B2 if Bit 7 is set at RAM1_087 (Mn=1)
          lda RAM1_088                  ; Load Accumulator with value of Memory at RAM1_088, A <- (RAM1_088)
          sub RAM1_058                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_058)
          beq L070A                     ; Branch to L070A if Equal Z=1            
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          eor #$7F                      ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (#$7F)
          brclr 4,RAM1_081,L06B6        ; Branch to L06B6 if Bit 4 Clear (Mn = 0) 
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          bra L06F7                     ; Branch Always (1 = 1)                   
; 
          ldx #$20                      ; Load Index Register with Memory Byte, X <- (#$20)
          jsr L12C3                     ; Jump to Subroutine at L12C3             
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          brset 5,RAM1_082,L06C1        ; Branch to L06C1 if Bit 5 is set at RAM1_082 (Mn=1)
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          add #$00                      ; Add without Carry, A ← (A) + (#$00)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X12FA,x                   ; Load Accumulator with value of Memory at X12FA, A <- (X12FA)
          dec RAM1_08a                  ; Decrement Byte at RAM1_08a Byte = Byte - 1
          bmi L06E7                     ; Branch to L06E7 if Minus N = 1          
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bmi L06D8                     ; Branch to L06D8 if Minus N = 1          
          tst RAM1_089                  ; Test Memory Byte for Negative or Zero, (RAM1_089) – 0x00
          bmi L06EE                     ; Branch to L06EE if Minus N = 1          
          cmp RAM1_089                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_089)
          bhi L06E0                     ; Branch to L06E0 if Higher C v Z = 0     
          bra L0712                     ; Branch Always (1 = 1)                   
; 
          tst RAM1_089                  ; Test Memory Byte for Negative or Zero, (RAM1_089) – 0x00
          bpl L06EE                     ; Branch to L06EE if Plus N = 0           
          cmp RAM1_089                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_089)
          bcc L06D6                     ; Branch to L06D6 if C bit is cleared     
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          sub RAM1_089                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_089)
          stx RAM1_089                  ; Store Index Register In Memory at RAM1_089
          bra L06F5                     ; Branch Always (1 = 1)                   
; 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bne L06EE                     ; Branch to L06EE if Not Equal (Z = 0);   
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          sub RAM1_088                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_088)
          ldx X12FB,x                   ; Load Index Register with Memory Byte, X <- (X12FB)
          stx RAM1_08a                  ; Store Index Register In Memory at RAM1_08a
          sta RAM1_089                  ; Store Accumulator in Memory at RAM1_089 
          add RAM1_088                  ; Add without Carry, A ← (A) + (RAM1_088)
          bset 4,RAM1_082               ; Set Bit 4 at memory RAM1_082 (Mn <- 1 ) 
          cmp RAM1_059                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_059)
          bne L06FF                     ; Branch to L06FF if Not Equal (Z = 0);   
          bclr 4,RAM1_082               ; Clear bit 4 at RAM1_082                 
          cmp RAM1_088                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_088)
          beq L070C                     ; Branch to L070C if Equal Z=1            
          sta RAM1_088                  ; Store Accumulator in Memory at RAM1_088 
          jsr L0FCC                     ; Jump to Subroutine at L0FCC             
          bra L0712                     ; Branch Always (1 = 1)                   
; 
          bclr 4,RAM1_082               ; Clear bit 4 at RAM1_082                 
          brset 4,RAM1_07e,L0705        ; Branch to L0705 if Bit 4 is set at RAM1_07e (Mn=1)
          brset 3,RAM1_07e,L0705        ; Branch to L0705 if Bit 3 is set at RAM1_07e (Mn=1)
          lda RAM1_082                  ; Load Accumulator with value of Memory at RAM1_082, A <- (RAM1_082)
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          brclr 0,RAM1_080,L071D        ; Branch to L071D if Bit 0 Clear (Mn = 0) 
          brset 0,RAM1_061,L071F        ; Branch to L071F if Bit 0 is set at RAM1_061 (Mn=1)
          eor RAM1_07f                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_07f)
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
          beq L077C                     ; Branch to L077C if Equal Z=1            
          brclr 5,RAM1_082,L0729        ; Branch to L0729 if Bit 5 Clear (Mn = 0) 
          brclr 7,RAM1_082,L077C        ; Branch to L077C if Bit 7 Clear (Mn = 0) 
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          beq L072D                     ; Branch to L072D if Equal Z=1            
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          eor RAM1_082                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_082)
          sta RAM1_082                  ; Store Accumulator in Memory at RAM1_082 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          bclr 2,RAM1_06b               ; Clear bit 2 at RAM1_06b                 
          bclr 1,RAM1_06b               ; Clear bit 1 at RAM1_06b                 
          brclr 1,RAM1_081,L0753        ; Branch to L0753 if Bit 1 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          ldx #$AF                      ; Load Index Register with Memory Byte, X <- (#$AF)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          brset 3,RAM1_082,L0748        ; Branch to L0748 if Bit 3 is set at RAM1_082 (Mn=1)
          brclr 2,RAM1_082,L074A        ; Branch to L074A if Bit 2 Clear (Mn = 0) 
          bset 2,RAM1_06b               ; Set Bit 2 at memory RAM1_06b (Mn <- 1 ) 
          bset 1,RAM1_06b               ; Set Bit 1 at memory RAM1_06b (Mn <- 1 ) 
L0F4A: 
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 6,RAM1_082               ; Set Bit 6 at memory RAM1_082 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          brclr 3,RAM1_082,L076D        ; Branch to L076D if Bit 3 Clear (Mn = 0) 
          brclr 1,PortB,L0761           ; Branch to L0761 if Bit ENA_12V_WOOFER Clear (Mn = 0)
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          bclr 3,RAM1_082               ; Clear bit 3 at RAM1_082                 
          lda #$50                      ; Load Accumulator with value of Memory at #$50, A <- (#$50)
          bra L0782                     ; Branch Always (1 = 1)                   
; 
          ldx #$AF                      ; Load Index Register with Memory Byte, X <- (#$AF)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bcc L0772                     ; Branch to L0772 if C bit is cleared     
          bset 2,RAM1_06b               ; Set Bit 2 at memory RAM1_06b (Mn <- 1 ) 
          bra L0774                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_082,L0777        ; Branch to L0777 if Bit 2 Clear (Mn = 0) 
          bset 2,RAM1_06b               ; Set Bit 2 at memory RAM1_06b (Mn <- 1 ) 
          bset 1,RAM1_06b               ; Set Bit 1 at memory RAM1_06b (Mn <- 1 ) 
          bset 3,PortB                  ; Set Bit MUTE_WOOFER at memory PortB (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          brset 0,RAM1_061,L077D        ; Branch to L077D if Bit 0 is set at RAM1_061 (Mn=1)
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          rts                           ; Return from Subroutine                  
; 
          brset 1,PortB,L077C           ; Branch to L077C if Bit ENA_12V_WOOFER is set at PortB (Mn=1)
          lda #$28                      ; Load Accumulator with value of Memory at #$28, A <- (#$28)
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 6,RAM1_082               ; Set Bit 6 at memory RAM1_082 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L0F89: 
          lda RAM1_082                  ; Load Accumulator with value of Memory at RAM1_082, A <- (RAM1_082)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X11FB,x                   ; Load Accumulator with value of Memory at X11FB, A <- (X11FB)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L07C3                     ; Branch Always (1 = 1)                   
; 
L0F96: 
          bset 7,RAM1_082               ; Set Bit 7 at memory RAM1_082 (Mn <- 1 ) 
          brset 5,RAM1_081,L077C        ; Branch to L077C if Bit 5 is set at RAM1_081 (Mn=1)
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          cmp RAM1_088                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_088)
          beq L07A5                     ; Branch to L07A5 if Equal Z=1            
          sta RAM1_088                  ; Store Accumulator in Memory at RAM1_088 
          bsr L07D1                     ; Branch to Subroutine at L07D1           
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          bsr L07C3                     ; Branch to Subroutine at L07C3           
          lda #$81                      ; Load Accumulator with value of Memory at #$81, A <- (#$81)
          bra L07B7                     ; Branch Always (1 = 1)                   
; 
L0FB1: 
          bclr 7,RAM1_082               ; Clear bit 7 at RAM1_082                 
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          bra L07C3                     ; Branch Always (1 = 1)                   
; 
L0FBD: 
          lda RAM1_083                  ; Load Accumulator with value of Memory at RAM1_083, A <- (RAM1_083)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
L0FC3: 
          ldx #$88                      ; Load Index Register with Memory Byte, X <- (#$88)
          brclr 0,PortC,L07CB           ; Branch to L07CB if Bit ENA_8V Clear (Mn = 0)
          jsr L11FF                     ; Jump to Subroutine at L11FF             
          rts                           ; Return from Subroutine                  
; 
L0FCC: 
          lda RAM1_088                  ; Load Accumulator with value of Memory at RAM1_088, A <- (RAM1_088)
          brset 7,RAM1_082,L07CB        ; Branch to L07CB if Bit 7 is set at RAM1_082 (Mn=1)
          brclr 5,RAM1_07f,L07DC        ; Branch to L07DC if Bit 5 Clear (Mn = 0) 
          brset 5,RAM1_082,L07DC        ; Branch to L07DC if Bit 5 is set at RAM1_082 (Mn=1)
          add #$E0                      ; Add without Carry, A ← (A) + (#$E0)   
          bcs L07DC                     ; Branch to L07DC if C = 1                
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 1,RAM1_081,L0005        ; Branch to L0005 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_082,L07EC        ; Branch to L07EC if Bit 1 Clear (Mn = 0) 
          brset 0,RAM1_082,L07F9        ; Branch to L07F9 if Bit 0 is set at RAM1_082 (Mn=1)
          brclr 2,RAM1_0b8,L07F9        ; Branch to L07F9 if Bit 2 Clear (Mn = 0) 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          bra L07F3                     ; Branch Always (1 = 1)                   
; 
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          brclr 0,RAM1_082,L07F3        ; Branch to L07F3 if Bit 0 Clear (Mn = 0) 
          lda #$0C                      ; Load Accumulator with value of Memory at #$0C, A <- (#$0C)
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add RAM1_088                  ; Add without Carry, A ← (A) + (RAM1_088)
          bcs L07F9                     ; Branch to L07F9 if C = 1                
          clra                          ; Clear byte Accumulator, A <- 0x00       
          cmp #$30                      ; Compare Accumulator with Memory Byte, (A) - (#$30)
          bcc L07FF                     ; Branch to L07FF if C bit is cleared     
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          cmp #$44                      ; Compare Accumulator with Memory Byte, (A) - (#$44)
          bcc L0005                     ; Branch to L0005 if C bit is cleared     
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          bclr 7,RAM1_05b               ; Clear bit 7 at RAM1_05b                 
          ldx #$A0                      ; Load Index Register with Memory Byte, X <- (#$A0)
          jsr L10EF                     ; Jump to Subroutine at L10EF             
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          ldx #$A1                      ; Load Index Register with Memory Byte, X <- (#$A1)
          jsr L10EF                     ; Jump to Subroutine at L10EF             
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          brset 5,RAM1_082,L0042        ; Branch to L0042 if Bit 5 is set at RAM1_082 (Mn=1)
          brclr 3,RAM1_07e,L0042        ; Branch to L0042 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_07e               ; Clear bit 3 at RAM1_07e                 
          bmi L0023                     ; Branch to L0023 if Minus N = 1          
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          cmp XAB07                     ; Compare Accumulator with Memory Byte, (A) - (XAB07)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          bmi L0034                     ; Branch to L0034 if Minus N = 1          
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          bne L0036                     ; Branch to L0036 if Not Equal (Z = 0);   
          sub #$0D                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$0D)
          add #$07                      ; Add without Carry, A ← (A) + (#$07)   
          jsr L261E                     ; Jump to Subroutine at L261E             
          add RAM1_050                  ; Add without Carry, A ← (A) + (RAM1_050)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          jsr L0FC3                     ; Jump to Subroutine at L0FC3             
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          bne L0052                     ; Branch to L0052 if Not Equal (Z = 0);   
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          add #$08                      ; Add without Carry, A ← (A) + (#$08)   
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X1137,x                   ; Load Accumulator with value of Memory at X1137, A <- (X1137)
          bra L0067                     ; Branch Always (1 = 1)                   
; 
          add #$08                      ; Add without Carry, A ← (A) + (#$08)   
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          bpl L005B                     ; Branch to L005B if Plus N = 0           
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          jsr L261E                     ; Jump to Subroutine at L261E             
X105E: 
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X1137,x                   ; Load Accumulator with value of Memory at X1137, A <- (X1137)
          brclr 7,RAM1_059,L006A        ; Branch to L006A if Bit 7 Clear (Mn = 0) 
          jsr L261E                     ; Jump to Subroutine at L261E             
          jsr L2617                     ; Jump to Subroutine at L2617             
          brset 3,RAM1_057,L007E        ; Branch to L007E if Bit 3 is set at RAM1_057 (Mn=1)
          brset 7,RAM1_05b,L007D        ; Branch to L007D if Bit 7 is set at RAM1_05b (Mn=1)
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          beq L007D                     ; Branch to L007D if Equal Z=1            
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          bcs L0084                     ; Branch to L0084 if C = 1                
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L0084                     ; Branch Always (1 = 1)                   
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          bcc L0084                     ; Branch to L0084 if C bit is cleared     
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          jsr L0FC3                     ; Jump to Subroutine at L0FC3             
          brclr 4,RAM1_07e,L00EE        ; Branch to L00EE if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_07e               ; Clear bit 4 at RAM1_07e                 
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          sta RAM1_055                  ; Store Accumulator in Memory at RAM1_055 
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          sta RAM1_054                  ; Store Accumulator in Memory at RAM1_054 
          lda #$E0                      ; Load Accumulator with value of Memory at #$E0, A <- (#$E0)
          ldx #$53                      ; Load Index Register with Memory Byte, X <- (#$53)
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          clr ,x                        ; Clear byte at  <- 0x00                  
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          ldx #$A3                      ; Load Index Register with Memory Byte, X <- (#$A3)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          brclr 6,RAM1_08e,L00AC        ; Branch to L00AC if Bit 6 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          eor RAM1_056                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_056)
          bit #$20                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$20)
          bne L00C0                     ; Branch to L00C0 if Not Equal (Z = 0);   
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          brclr 6,RAM1_08e,L00B9        ; Branch to L00B9 if Bit 6 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bpl L00BC                     ; Branch to L00BC if Plus N = 0           
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          bsr L00E0                     ; Branch to Subroutine at L00E0           
          ldx #$A2                      ; Load Index Register with Memory Byte, X <- (#$A2)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          eor RAM1_056                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_056)
          bit #$40                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$40)
          beq L00D3                     ; Branch to L00D3 if Equal Z=1            
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          bpl L00D1                     ; Branch to L00D1 if Plus N = 0           
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          bsr L00E0                     ; Branch to Subroutine at L00E0           
          dec RAM1_057                  ; Decrement Byte at RAM1_057 Byte = Byte - 1
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          sub #$20                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$20)
          bmi L009E                     ; Branch to L009E if Minus N = 1          
          ldx #$55                      ; Load Index Register with Memory Byte, X <- (#$55)
          jmp L1205                     ; Unconditional Jump to L1205             
; 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X11DB,x                   ; Load Accumulator with value of Memory at X11DB, A <- (X11DB)
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          add ,x                        ; Add without Carry, A ← (A) + ()       
          cmp #$1F                      ; Compare Accumulator with Memory Byte, (A) - (#$1F)
          bls L00ED                     ; Branch to L00ED if Lower or Same C v Z = 1
          lda #$1F                      ; Load Accumulator with value of Memory at #$1F, A <- (#$1F)
          sta ,x                        ; Store Accumulator in Memory at          
          rts                           ; Return from Subroutine                  
; 
L10EF: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 5,RAM1_082,L00FC        ; Branch to L00FC if Bit 5 is set at RAM1_082 (Mn=1)
          brset 5,RAM1_07f,L0135        ; Branch to L0135 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 6,RAM1_07f,L0135        ; Branch to L0135 if Bit 6 is set at RAM1_07f (Mn=1)
          brset 3,RAM1_081,L0135        ; Branch to L0135 if Bit 3 is set at RAM1_081 (Mn=1)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          add #$06                      ; Add without Carry, A ← (A) + (#$06)   
          bpl L0105                     ; Branch to L0105 if Plus N = 0           
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
cpx #$A0 
          bne L010B                     ; Branch to L010B if Not Equal (Z = 0);   
          add #$0D                      ; Add without Carry, A ← (A) + (#$0D)   
          brclr 1,RAM1_081,L0110        ; Branch to L0110 if Bit 1 Clear (Mn = 0) 
          add #$1A                      ; Add without Carry, A ← (A) + (#$1A)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X11A7,x                   ; Load Accumulator with value of Memory at X11A7, A <- (X11A7)
          bmi L0135                     ; Branch to L0135 if Minus N = 1          
          brclr 1,RAM1_081,L0135        ; Branch to L0135 if Bit 1 Clear (Mn = 0) 
          ldx RAM1_056                  ; Load Index Register with Memory Byte, X <- (RAM1_056)
cpx #$44 
          bcc L0135                     ; Branch to L0135 if C bit is cleared     
          clr RAM1_053                  ; Clear byte at RAM1_053 <- 0x00          
cpx #$36 
          bcs L012D                     ; Branch to L012D if C = 1                
          inc RAM1_053                  ; Increment Byte RAM1_053, Byte = Byte + 1
cpx #$3C 
          bcs L012D                     ; Branch to L012D if C = 1                
          inc RAM1_053                  ; Increment Byte RAM1_053, Byte = Byte + 1
          cmp RAM1_053                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_053)
          bls L0135                     ; Branch to L0135 if Lower or Same C v Z = 1
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          bset 7,RAM1_05b               ; Set Bit 7 at memory RAM1_05b (Mn <- 1 ) 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          rts                           ; Return from Subroutine                  
; 
X1137: 
          brset 0,PortA,L01AA           ; Branch to L01AA if Bit PANEL_STATUS is set at PortA (Mn=1)
; 
          db $72, $62, $51, $41         ; data? r, b, Q, A                        
; 
          brn L0140                     ; Branch Never (1 = 0)                    
          brn L0183                     ; Branch Never (1 = 0)                    
; 
          db $52, $62, $72              ; data? R, b, r,                          
; 
          neg ,x                        ; Negate Byte of  (Two’s Complement),  = 0x00 - ()
          brset 0,PortA,L0149           ; Branch to L0149 if Bit PANEL_STATUS is set at PortA (Mn=1)
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          asr RAM1_057,x                ; Arithmetic Shift Right RAM1_057, b7 -> [b7 >>>> b0] -> C
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
; 
          db $35                        ; data? 5,  ,  ,                          
; 
          bclr 1,PortA                  ; Clear bit PANEL_DATA at PortA           
; 
          db $32                        ; data? 2,  ,  ,                          
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
; 
          db $65, $75                   ; data? e, u,  ,                          
; 
          ror ,x                        ; Rotate Byte at  Right through Carry Bit, C -> [b7 >>>> b0] -> C
; 
          db $86                        ; data?  ,  ,  ,                          
; 
          brset 0,PortA,L0159           ; Branch to L0159 if Bit PANEL_STATUS is set at PortA (Mn=1)
          asl RAM1_068,x                ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
X115B: 
          asrx                          ; Arithmetic Shift Right of Index Register, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
; 
          db $35                        ; data? 5,  ,  ,                          
; 
          bclr 1,PortA                  ; Clear bit PANEL_DATA at PortA           
; 
          db $41                        ; data? A,  ,  ,                          
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
; 
          db $75, $85, $86              ; data? u,  ,  ,                          
; 
          brset 0,PortA,L0169           ; Branch to L0169 if Bit PANEL_STATUS is set at PortA (Mn=1)
          rol RAM1_058,x                ; Rotate Byte at RAM1_058 Left through Carry Bit, C <- [b7 <<<< b0] <- C
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          bcs L0183                     ; Branch to L0183 if C = 1                
          brset 0,X0041,L01D5           ; Branch to L01D5 if Bit 0 is set at X0041 (Mn=1)
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
; 
          db $75, $85, $86              ; data? u,  ,  ,                          
; 
          brset 0,PortA,L0179           ; Branch to L0179 if Bit PANEL_STATUS is set at PortA (Mn=1)
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          bne L0193                     ; Branch to L0193 if Not Equal (Z = 0);   
          brset 0,X0041,L01E5           ; Branch to L01E5 if Bit 0 is set at X0041 (Mn=1)
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
; 
          db $84, $85, $95              ; data?  ,  ,  ,                          
; 
          brset 0,PortA,L0189           ; Branch to L0189 if Bit PANEL_STATUS is set at PortA (Mn=1)
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          bcs L01A3                     ; Branch to L01A3 if C = 1                
          brset 0,X0041,L01F4           ; Branch to L01F4 if Bit 0 is set at X0041 (Mn=1)
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
; 
          db $84, $85, $95              ; data?  ,  ,  ,                          
; 
          brset 0,PortA,L0199           ; Branch to L0199 if Bit PANEL_STATUS is set at PortA (Mn=1)
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          bcs L01B3                     ; Branch to L01B3 if C = 1                
          brset 0,X0041,L0204           ; Branch to L0204 if Bit 0 is set at X0041 (Mn=1)
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
; 
          db $84, $85, $95              ; data?  ,  ,  ,                          
; 
          brset 0,STACK_0fa,L01A4       ; Branch to L01A4 if Bit 0 is set at STACK_0fa (Mn=1)
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,PortB,L01B2           ; Branch to L01B2 if Bit ENA_12V_ANTENE is set at PortB (Mn=1)
          brclr 1,DDRA,L01B8            ; Branch to L01B8 if Bit PANEL_DATA Clear (Mn = 0)
          brset 3,STACK_0fb,L01B2       ; Branch to L01B2 if Bit 3 is set at STACK_0fb (Mn=1)
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,PortB,L01BF           ; Branch to L01BF if Bit ENA_12V_ANTENE is set at PortB (Mn=1)
          brset 1,PortD,L01C4           ; Branch to L01C4 if Bit DIAG is set at PortD (Mn=1)
          add ,x                        ; Add without Carry, A ← (A) + ()       
          add ,x                        ; Add without Carry, A ← (A) + ()       
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,PortB,L01CB           ; Branch to L01CB if Bit ENA_12V_ANTENE is set at PortB (Mn=1)
          brset 1,PortC,L01D0           ; Branch to L01D0 if Bit WDOG_TEL is set at PortC (Mn=1)
          brclr 1,STACK_0fb,L01CB       ; Branch to L01CB if Bit 1 Clear (Mn = 0) 
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,PortB,L01D8           ; Branch to L01D8 if Bit ENA_12V_ANTENE is set at PortB (Mn=1)
          brset 1,PortC,L01DD           ; Branch to L01DD if Bit WDOG_TEL is set at PortC (Mn=1)
          brclr 1,PortA,L01DE           ; Branch to L01DE if Bit PANEL_DATA Clear (Mn = 0)
          brset 1,PortD,L01E4           ; Branch to L01E4 if Bit DIAG is set at PortD (Mn=1)
          brclr 2,DDRC,L01EA            ; Branch to L01EA if Bit WR_SP Clear (Mn = 0)
          brset 4,ADSTAT,L01F0          ; Branch to L01F0 if Bit 0 is set at ADSTAT (Mn=1)
          brclr 5,Miscell,L01F6         ; Branch to L01F6 if Bit INTN Clear (Mn = 0)
          brset 7,SCCR2,L01EC           ; Branch to L01EC if Bit TIE is set at SCCR2 (Mn=1)
          brclr 0,PortC,L01F2           ; Branch to L01F2 if Bit ENA_8V Clear (Mn = 0)
          brset 2,DDRB,L01F8            ; Branch to L01F8 if Bit ENA_12V_CDC is set at DDRB (Mn=1)
          brclr 3,ADDATA,L01FE          ; Branch to L01FE if Bit 3 Clear (Mn = 0) 
          brset 5,PLMB,L0204            ; Branch to L0204 if Bit 5 is set at PLMB (Mn=1)
          brclr 6,SCCR1,L021A           ; Branch to L021A if Bit T8 Clear (Mn = 0)
X11FB: 
          asl X0039                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          dec X002B                     ; Decrement Byte at X002B Byte = Byte - 1 
L11FF: 
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          stx RAM1_052                  ; Store Index Register In Memory at RAM1_052
          ldx #$52                      ; Load Index Register with Memory Byte, X <- (#$52)
L1205: 
          stx RAM1_05a                  ; Store Index Register In Memory at RAM1_05a
          bsr L020F                     ; Branch to Subroutine at L020F           
          bcc L026E                     ; Branch to L026E if C bit is cleared     
          bsr L020F                     ; Branch to Subroutine at L020F           
          bcc L026E                     ; Branch to L026E if C bit is cleared     
          ldx RAM1_05a                  ; Load Index Register with Memory Byte, X <- (RAM1_05a)
          bsr L026F                     ; Branch to Subroutine at L026F           
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          bsr L0220                     ; Branch to Subroutine at L0220           
          bcs L0264                     ; Branch to L0264 if C = 1                
decx 
cpx #$50 
          bcc L0213                     ; Branch to L0213 if C bit is cleared     
          clc                           ; Clear Carry Bit (C <- 0)                
          bra L0264                     ; Branch Always (1 = 1)                   
; 
          sec                           ; Set Carry Bit , C ← 1                 
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bcs L0228                     ; Branch to L0228 if C = 1                
          bsr L023A                     ; Branch to Subroutine at L023A           
          bra L022C                     ; Branch Always (1 = 1)                   
; 
          bclr 6,DDRA                   ; Clear bit SDA_TDA at DDRA               
          bra L022C                     ; Branch Always (1 = 1)                   
; 
          bsr L0233                     ; Branch to Subroutine at L0233           
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bne L0222                     ; Branch to L0222 if Not Equal (Z = 0);   
          bclr 6,DDRA                   ; Clear bit SDA_TDA at DDRA               
          bclr 7,DDRA                   ; Clear bit SCL_TDA at DDRA               
          brset 6,PortA,L0238           ; Branch to L0238 if Bit SDA_TDA is set at PortA (Mn=1)
          bra L0273                     ; Branch Always (1 = 1)                   
; 
          bset 6,DDRA                   ; Set Bit SDA_TDA at memory DDRA (Mn <- 1 )
          bclr 6,PortA                  ; Clear bit SDA_TDA at PortA              
          rts                           ; Return from Subroutine                  
; 
          bsr L026F                     ; Branch to Subroutine at L026F           
          bsr L0220                     ; Branch to Subroutine at L0220           
          bcs L0264                     ; Branch to L0264 if C = 1                
          bsr L0273                     ; Branch to Subroutine at L0273           
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bclr 6,DDRA                   ; Clear bit SDA_TDA at DDRA               
          bclr 7,DDRA                   ; Clear bit SCL_TDA at DDRA               
          brset 6,PortA,L0250           ; Branch to L0250 if Bit SDA_TDA is set at PortA (Mn=1)
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bsr L0273                     ; Branch to Subroutine at L0273           
          bcc L0249                     ; Branch to L0249 if C bit is cleared     
          sta ,x                        ; Store Accumulator in Memory at          
          dec RAM1_059                  ; Decrement Byte at RAM1_059 Byte = Byte - 1
          bmi L0261                     ; Branch to L0261 if Minus N = 1          
          bsr L023A                     ; Branch to Subroutine at L023A           
decx 
          bclr 7,DDRA                   ; Clear bit SCL_TDA at DDRA               
          bra L0245                     ; Branch Always (1 = 1)                   
; 
          bsr L0231                     ; Branch to Subroutine at L0231           
          clc                           ; Clear Carry Bit (C <- 0)                
          bsr L0273                     ; Branch to Subroutine at L0273           
          bsr L023A                     ; Branch to Subroutine at L023A           
          bclr 7,DDRA                   ; Clear bit SCL_TDA at DDRA               
          bsr L026E                     ; Branch to Subroutine at L026E           
          bclr 6,DDRA                   ; Clear bit SDA_TDA at DDRA               
          rts                           ; Return from Subroutine                  
; 
          bsr L0268                     ; Branch to Subroutine at L0268           
          bsr L023A                     ; Branch to Subroutine at L023A           
          bset 7,DDRA                   ; Set Bit SCL_TDA at memory DDRA (Mn <- 1 )
          bclr 7,PortA                  ; Clear bit SCL_TDA at PortA              
          rts                           ; Return from Subroutine                  
; 
L1278: 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          brset 5,RAM1_07f,L028F        ; Branch to L028F if Bit 5 is set at RAM1_07f (Mn=1)
          brset 7,RAM1_07f,L0291        ; Branch to L0291 if Bit 7 is set at RAM1_07f (Mn=1)
          brset 6,RAM1_087,L0291        ; Branch to L0291 if Bit 6 is set at RAM1_087 (Mn=1)
deca 
          brset 6,RAM1_07f,L028F        ; Branch to L028F if Bit 6 is set at RAM1_07f (Mn=1)
          brclr 0,RAM1_07f,L028D        ; Branch to L028D if Bit 0 Clear (Mn = 0) 
          brset 1,RAM1_07c,L028F        ; Branch to L028F if Bit 1 is set at RAM1_07c (Mn=1)
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          clr RAM1_087                  ; Clear byte at RAM1_087 <- 0x00          
          eor RAM1_082                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_082)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          rts                           ; Return from Subroutine                  
; 
L1296: 
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          brclr 1,RAM1_081,L02A4        ; Branch to L02A4 if Bit 1 Clear (Mn = 0) 
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          bcc L02A4                     ; Branch to L02A4 if C bit is cleared     
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          rts                           ; Return from Subroutine                  
; 
L12A5: 
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          add #$F4                      ; Add without Carry, A ← (A) + (#$F4)   
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
L12B1: 
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          clrx                          ; Clear Index Register, X <- 0x00         
          incx                          ; Increment Index register by 1,X++       
          lda X131A,x                   ; Load Accumulator with value of Memory at X131A, A <- (X131A)
          brclr 1,RAM1_081,L02BE        ; Branch to L02BE if Bit 1 Clear (Mn = 0) 
          lda X133A,x                   ; Load Accumulator with value of Memory at X133A, A <- (X133A)
          cmp RAM1_057                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_057)
          bhi L02B4                     ; Branch to L02B4 if Higher C v Z = 0     
          rts                           ; Return from Subroutine                  
; 
L12C3: 
          clr RAM1_057                  ; Clear byte at RAM1_057 <- 0x00          
          add X12D2,x                   ; Add without Carry, A ← (A) + (X12D2)  
          bcs L02CF                     ; Branch to L02CF if C = 1                
          inc RAM1_057                  ; Increment Byte RAM1_057, Byte = Byte + 1
          incx                          ; Increment Index register by 1,X++       
          bra L02C5                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          rts                           ; Return from Subroutine                  
; 
X12D2: 
          sta DDRA                      ; Store Accumulator in Memory at DDRA     
          brset 2,DDRA,L02DB            ; Branch to L02DB if Bit PANEL_CLOCK is set at DDRA (Mn=1)
          brset 2,DDRA,L02DE            ; Branch to L02DE if Bit PANEL_CLOCK is set at DDRA (Mn=1)
          brset 2,STACK_0ff,L02DD       ; Branch to L02DD if Bit 2 is set at STACK_0ff (Mn=1)
          brset 0,PortA,L02E0           ; Branch to L02E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0272           ; Branch to L0272 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 3,DDRC,L02EC            ; Branch to L02EC if Bit RD_SP is set at DDRC (Mn=1)
          brset 3,DDRC,L02EF            ; Branch to L02EF if Bit RD_SP is set at DDRC (Mn=1)
          brset 3,DDRC,L02F2            ; Branch to L02F2 if Bit RD_SP is set at DDRC (Mn=1)
          brset 3,DDRC,L02F5            ; Branch to L02F5 if Bit RD_SP is set at DDRC (Mn=1)
          brset 3,DDRC,L02F1            ; Branch to L02F1 if Bit RD_SP is set at DDRC (Mn=1)
          bra L0334                     ; Branch Always (1 = 1)                   
; 
          bset 3,PLMA                   ; Set Bit 3 at memory PLMA (Mn <- 1 )     
          brset 1,SCCR1,L0319           ; Branch to L0319 if Bit CPHA is set at SCCR1 (Mn=1)
          stx ,x                        ; Store Index Register In Memory at       
X12FA: 
          bra L02FC                     ; Branch Always (1 = 1)                   
; 
          bset 0,PortA                  ; Set Bit PANEL_STATUS at memory PortA (Mn <- 1 )
          brset 4,PortA,L0301           ; Branch to L0301 if Bit SLAVE_CLOCK is set at PortA (Mn=1)
          brset 0,PortA,L0304           ; Branch to L0304 if Bit PANEL_STATUS is set at PortA (Mn=1)
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          brclr 1,STACK_0fc,L0308       ; Branch to L0308 if Bit 1 Clear (Mn = 0) 
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
          brset 0,Miscell,L030C         ; Branch to L030C if Bit WDOG is set at Miscell (Mn=1)
          brset 3,PortA,L0311           ; Branch to L0311 if Bit SLAVE_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0312           ; Branch to L0312 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0313           ; Branch to L0313 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brclr 1,STACK_0fc,L0318       ; Branch to L0318 if Bit 1 Clear (Mn = 0) 
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
          brset 0,RAM1_09c,L02B8        ; Branch to L02B8 if Bit 0 is set at RAM1_09c (Mn=1)
; 
          db $90, $84                   ; data?  ,  ,  ,                          
; 
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          inc RAM1_064,x                ; Increment Byte RAM1_064, Byte = Byte + 1
          incx                          ; Increment Index register by 1,X++       
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
; 
          db $4E                        ; data? N,  ,  ,                          
; 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          inc X0038                     ; Increment Byte X0038, Byte = Byte + 1   
          lsr X0030                     ; Logical Shift Right of X0030, b7 -> [b7 >>>> b0] -> C
          bmc L0355                     ; Branch to L0355 if Interrupt Mask Clear I=0
          bne L0353                     ; Branch to L0353 if Not Equal (Z = 0);   
          bhi L0351                     ; Branch to L0351 if Higher C v Z = 0     
          bset 7,ICH2                   ; Set Bit 7 at memory ICH2 (Mn <- 1 )     
          bset 5,TCH                    ; Set Bit 5 at memory TCH (Mn <- 1 )      
          bset 3,ICH1                   ; Set Bit 3 at memory ICH1 (Mn <- 1 )     
          bset 1,SCSR                   ; Set Bit FE at memory SCSR (Mn <- 1 )    
          bset 0,RAM1_09c               ; Set Bit 0 at memory RAM1_09c (Mn <- 1 ) 
; 
          db $92, $88, $7E              ; data?  ,  , ~,                          
; 
          lsr ,x                        ; Logical Shift Right of , b7 -> [b7 >>>> b0] -> C
          dec RAM1_062,x                ; Decrement Byte at RAM1_062 Byte = Byte - 1
decx 
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
; 
          db $4E                        ; data? N,  ,  ,                          
; 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          inc X0038                     ; Increment Byte X0038, Byte = Byte + 1   
          ror X0034                     ; Rotate Byte at X0034 Right through Carry Bit, C -> [b7 >>>> b0] -> C
; 
          db $32                        ; data? 2,  ,  ,                          
; 
          neg X002E                     ; Negate Byte of X002E (Two’s Complement), X002E = 0x00 - (X002E)
          bmc L037A                     ; Branch to L037A if Interrupt Mask Clear I=0
          bhcc L0378                    ; Branch to L0378 if half carry bit Clear H=0
          bcc L0376                     ; Branch to L0376 if C bit is cleared     
          bra L0374                     ; Branch Always (1 = 1)                   
; 
          bset 6,ACH                    ; Set Bit 6 at memory ACH (Mn <- 1 )      
          bset 4,TCH                    ; Set Bit 4 at memory TCH (Mn <- 1 )      
X135A: 
          bset 7,ICH2                   ; Set Bit 7 at memory ICH2 (Mn <- 1 )     
          bset 5,TCH                    ; Set Bit 5 at memory TCH (Mn <- 1 )      
          bset 3,ICH1                   ; Set Bit 3 at memory ICH1 (Mn <- 1 )     
          bset 1,SCSR                   ; Set Bit FE at memory SCSR (Mn <- 1 )    
          brset 7,Miscell,L036F         ; Branch to L036F if Bit POR is set at Miscell (Mn=1)
          brset 4,DDRC,L036C            ; Branch to L036C if Bit D0-SP is set at DDRC (Mn=1)
          brset 1,PortA,L0375           ; Branch to L0375 if Bit PANEL_DATA is set at PortA (Mn=1)
          bset 2,PortD                  ; Set Bit PANEL_ON_OFF at memory PortD (Mn <- 1 )
          negx                          ; Negate Byte of Index register(Two’s Complement), X = 0x00 - (X)
          bhcc L0375                    ; Branch to L0375 if half carry bit Clear H=0
          inc X0046                     ; Increment Byte X0046, Byte = Byte + 1   
X1372: 
          bset 4,PortA                  ; Set Bit SLAVE_CLOCK at memory PortA (Mn <- 1 )
          bset 0,BAUD                   ; Set Bit SCR0 at memory BAUD (Mn <- 1 )  
; 
          db $61                        ; data? a,  ,  ,                          
; 
          brclr 5,Miscell,L0334         ; Branch to L0334 if Bit INTN Clear (Mn = 0)
          brclr 2,PLMA,L0337            ; Branch to L0337 if Bit 2 Clear (Mn = 0) 
          bclr 3,X0020                  ; Clear bit 3 at X0020                    
          brclr 1,PLMB,L033C            ; Branch to L033C if Bit 1 Clear (Mn = 0) 
          bset 1,TCL                    ; Set Bit 1 at memory TCL (Mn <- 1 )      
          brclr 0,ICL2,L0341            ; Branch to L0341 if Bit 0 Clear (Mn = 0) 
          bset 5,RAM1_0ba               ; Set Bit 5 at memory RAM1_0ba (Mn <- 1 ) 
          clr STACK_0d6                 ; Clear byte at STACK_0d6 <- 0x00         
          clr STACK_0c1                 ; Clear byte at STACK_0c1 <- 0x00         
          jsr L1E7D                     ; Jump to Subroutine at L1E7D             
          bset 0,RAM1_0ba               ; Set Bit 0 at memory RAM1_0ba (Mn <- 1 ) 
          jsr L2640                     ; Jump to Subroutine at L2640             
          bset 4,PortB                  ; Set Bit RESET_RDS at memory PortB (Mn <- 1 )
          ldx #$B0                      ; Load Index Register with Memory Byte, X <- (#$B0)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          and #$62                      ; Logical AND, A ← (A) && (#$62)        
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          brclr 4,RAM1_0b5,L03A5        ; Branch to L03A5 if Bit 4 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          sta RAM1_0b5                  ; Store Accumulator in Memory at RAM1_0b5 
          clr RAM1_0bf                  ; Clear byte at RAM1_0bf <- 0x00          
          jsr L2631                     ; Jump to Subroutine at L2631             
          brclr 0,RAM1_061,L03C2        ; Branch to L03C2 if Bit 0 Clear (Mn = 0) 
          clr RAM1_0bc                  ; Clear byte at RAM1_0bc <- 0x00          
          bset 2,RAM1_0bc               ; Set Bit 2 at memory RAM1_0bc (Mn <- 1 ) 
          brclr 4,RAM1_069,L03C2        ; Branch to L03C2 if Bit 4 Clear (Mn = 0) 
          brset 1,RAM1_05f,L03C2        ; Branch to L03C2 if Bit 1 is set at RAM1_05f (Mn=1)
          bclr 6,RAM1_0b5               ; Clear bit 6 at RAM1_0b5                 
          lda RAM1_0b5                  ; Load Accumulator with value of Memory at RAM1_0b5, A <- (RAM1_0b5)
          ldx #$B0                      ; Load Index Register with Memory Byte, X <- (#$B0)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          bset 4,RAM1_0bc               ; Set Bit 4 at memory RAM1_0bc (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L13C5: 
          brclr 6,RAM1_061,L03D0        ; Branch to L03D0 if Bit 6 Clear (Mn = 0) 
          brset 6,RAM1_0ba,L03D0        ; Branch to L03D0 if Bit 6 is set at RAM1_0ba (Mn=1)
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          brclr 5,RAM1_0ba,L03D2        ; Branch to L03D2 if Bit 5 Clear (Mn = 0) 
          lda #$28                      ; Load Accumulator with value of Memory at #$28, A <- (#$28)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          bset 6,RAM1_0ba               ; Set Bit 6 at memory RAM1_0ba (Mn <- 1 ) 
          bset 5,RAM1_0ba               ; Set Bit 5 at memory RAM1_0ba (Mn <- 1 ) 
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          jsr L1BD9                     ; Jump to Subroutine at L1BD9             
          brclr 3,RAM1_067,L03EA        ; Branch to L03EA if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L1407                     ; Jump to Subroutine at L1407             
          jsr L37B0                     ; Jump to Subroutine at L37B0             
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L37F4                     ; Jump to Subroutine at L37F4             
          jsr L142B                     ; Jump to Subroutine at L142B             
          brclr 6,RAM1_0ba,L03FC        ; Branch to L03FC if Bit 6 Clear (Mn = 0) 
          bclr 6,STACK_0d6              ; Clear bit 6 at STACK_0d6                
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L03DF                     ; Branch to L03DF if Not Equal (Z = 0);   
          jsr L37F4                     ; Jump to Subroutine at L37F4             
          jsr L1E7D                     ; Jump to Subroutine at L1E7D             
          bclr 5,RAM1_0ba               ; Clear bit 5 at RAM1_0ba                 
          bclr 6,RAM1_0ba               ; Clear bit 6 at RAM1_0ba                 
          rts                           ; Return from Subroutine                  
; 
L1407: 
          brset 7,STACK_0d6,L0445       ; Branch to L0445 if Bit 7 is set at STACK_0d6 (Mn=1)
          brset 6,RAM1_0ba,L0410        ; Branch to L0410 if Bit 6 is set at RAM1_0ba (Mn=1)
          brclr 5,RAM1_0ba,L0434        ; Branch to L0434 if Bit 5 Clear (Mn = 0) 
          lda RAM1_0bb                  ; Load Accumulator with value of Memory at RAM1_0bb, A <- (RAM1_0bb)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          jsr L1446                     ; Jump to Subroutine at L1446             
          bra L043B                     ; Branch Always (1 = 1)                   
; 
L1419: 
          brset 7,STACK_0d6,L0445       ; Branch to L0445 if Bit 7 is set at STACK_0d6 (Mn=1)
          brset 6,RAM1_0ba,L0422        ; Branch to L0422 if Bit 6 is set at RAM1_0ba (Mn=1)
          brclr 5,RAM1_0ba,L0434        ; Branch to L0434 if Bit 5 Clear (Mn = 0) 
          lda RAM1_0bb                  ; Load Accumulator with value of Memory at RAM1_0bb, A <- (RAM1_0bb)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          jsr L1551                     ; Jump to Subroutine at L1551             
          bra L043B                     ; Branch Always (1 = 1)                   
; 
L142B: 
          lda RAM1_0bb                  ; Load Accumulator with value of Memory at RAM1_0bb, A <- (RAM1_0bb)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          jsr L15C8                     ; Jump to Subroutine at L15C8             
          bra L043B                     ; Branch Always (1 = 1)                   
; 
          brclr 0,RAM1_061,L043B        ; Branch to L043B if Bit 0 Clear (Mn = 0) 
          bclr 5,RAM1_061               ; Clear bit 5 at RAM1_061                 
          bset 2,RAM1_05d               ; Set Bit 2 at memory RAM1_05d (Mn <- 1 ) 
          lda RAM1_0bb                  ; Load Accumulator with value of Memory at RAM1_0bb, A <- (RAM1_0bb)
          cmp RAM1_058                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_058)
          beq L0445                     ; Branch to L0445 if Equal Z=1            
          bset 6,STACK_0cb              ; Set Bit 6 at memory STACK_0cb (Mn <- 1 )
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L1446: 
          brclr 4,RAM1_0bc,L044E        ; Branch to L044E if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_0bc               ; Clear bit 4 at RAM1_0bc                 
          jmp L1AA5                     ; Unconditional Jump to L1AA5             
; 
          brset 7,STACK_0c1,L0454       ; Branch to L0454 if Bit 7 is set at STACK_0c1 (Mn=1)
          brset 6,STACK_0c1,L045A       ; Branch to L045A if Bit 6 is set at STACK_0c1 (Mn=1)
          brclr 3,RAM1_0bc,L045A        ; Branch to L045A if Bit 3 Clear (Mn = 0) 
          jmp L1953                     ; Unconditional Jump to L1953             
; 
          brclr 2,STACK_0c0,L0460       ; Branch to L0460 if Bit 2 Clear (Mn = 0) 
          jmp L1CAD                     ; Unconditional Jump to L1CAD             
; 
          lda RAM1_0b3                  ; Load Accumulator with value of Memory at RAM1_0b3, A <- (RAM1_0b3)
          bne L046B                     ; Branch to L046B if Not Equal (Z = 0);   
          jsr L14DF                     ; Jump to Subroutine at L14DF             
          jsr L1516                     ; Jump to Subroutine at L1516             
          rts                           ; Return from Subroutine                  
; 
          bmi L04AC                     ; Branch to L04AC if Minus N = 1          
          brset 4,RAM1_0b3,L0489        ; Branch to L0489 if Bit 4 is set at RAM1_0b3 (Mn=1)
          bit #$60                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$60)
          beq L0479                     ; Branch to L0479 if Equal Z=1            
          jsr L189A                     ; Jump to Subroutine at L189A             
          bra L047B                     ; Branch Always (1 = 1)                   
; 
          clr RAM1_0b3                  ; Clear byte at RAM1_0b3 <- 0x00          
L147B: 
          bclr 0,RAM1_0ba               ; Clear bit 0 at RAM1_0ba                 
          brset 7,RAM1_0b9,L0486        ; Branch to L0486 if Bit 7 is set at RAM1_0b9 (Mn=1)
          brclr 6,RAM1_0ba,L0486        ; Branch to L0486 if Bit 6 Clear (Mn = 0) 
          brclr 6,STACK_0c1,L0488       ; Branch to L0488 if Bit 6 Clear (Mn = 0) 
          bset 0,RAM1_0ba               ; Set Bit 0 at memory RAM1_0ba (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          and #$86                      ; Logical AND, A ← (A) && (#$86)        
          cmp #$86                      ; Compare Accumulator with Memory Byte, (A) - (#$86)
          bne L0494                     ; Branch to L0494 if Not Equal (Z = 0);   
          jsr L1C82                     ; Jump to Subroutine at L1C82             
          lda #$B4                      ; Load Accumulator with value of Memory at #$B4, A <- (#$B4)
          brset 5,RAM1_0b6,L04AA        ; Branch to L04AA if Bit 5 is set at RAM1_0b6 (Mn=1)
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          brclr 7,RAM1_0ba,L0479        ; Branch to L0479 if Bit 7 Clear (Mn = 0) 
          brclr 2,RAM1_0b6,L0479        ; Branch to L0479 if Bit 2 Clear (Mn = 0) 
          brclr 1,RAM1_0b6,L04AA        ; Branch to L04AA if Bit 1 Clear (Mn = 0) 
          brset 5,RAM1_0b3,L04AA        ; Branch to L04AA if Bit 5 is set at RAM1_0b3 (Mn=1)
          brclr 0,RAM1_0b6,L0479        ; Branch to L0479 if Bit 0 Clear (Mn = 0) 
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bclr 7,RAM1_0b3               ; Clear bit 7 at RAM1_0b3                 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_0b4                  ; Load Accumulator with value of Memory at RAM1_0b4, A <- (RAM1_0b4)
          bpl L04BD                     ; Branch to L04BD if Plus N = 0           
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          sta RAM1_0b4                  ; Store Accumulator in Memory at RAM1_0b4 
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          ldx X19DD,x                   ; Load Index Register with Memory Byte, X <- (X19DD)
          jsr L1A3D,x ;INFO: index jump ; Jump to Subroutine at L1A3D             
          brset 7,RAM1_0b3,L047B        ; Branch to L047B if Bit 7 is set at RAM1_0b3 (Mn=1)
          lda RAM1_0b3                  ; Load Accumulator with value of Memory at RAM1_0b3, A <- (RAM1_0b3)
          cmp #$70                      ; Compare Accumulator with Memory Byte, (A) - (#$70)
          bcc L0479                     ; Branch to L0479 if C bit is cleared     
          bclr 3,RAM1_0bb               ; Clear bit 3 at RAM1_0bb                 
          brset 4,RAM1_0b3,L0479        ; Branch to L0479 if Bit 4 is set at RAM1_0b3 (Mn=1)
          sta RAM1_0b6                  ; Store Accumulator in Memory at RAM1_0b6 
          bclr 5,RAM1_0bc               ; Clear bit 5 at RAM1_0bc                 
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$07                      ; Compare Accumulator with Memory Byte, (A) - (#$07)
          bne L0479                     ; Branch to L0479 if Not Equal (Z = 0);   
          bset 4,RAM1_0b6               ; Set Bit 4 at memory RAM1_0b6 (Mn <- 1 ) 
          bra L0479                     ; Branch Always (1 = 1)                   
; 
L14DF: 
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          bit #$C0                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$C0)
          beq L04F6                     ; Branch to L04F6 if Equal Z=1            
          and #$86                      ; Logical AND, A ← (A) && (#$86)        
          cmp #$86                      ; Compare Accumulator with Memory Byte, (A) - (#$86)
          bne L0514                     ; Branch to L0514 if Not Equal (Z = 0);   
          bclr 5,RAM1_0bc               ; Clear bit 5 at RAM1_0bc                 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          jsr L1E69                     ; Jump to Subroutine at L1E69             
          beq L04FF                     ; Branch to L04FF if Equal Z=1            
          bclr 2,RAM1_0ba               ; Clear bit 2 at RAM1_0ba                 
          bclr 4,STACK_0c0              ; Clear bit 4 at STACK_0c0                
          lda #$97                      ; Load Accumulator with value of Memory at #$97, A <- (#$97)
          ldx #$C0                      ; Load Index Register with Memory Byte, X <- (#$C0)
          jsr L1C84                     ; Jump to Subroutine at L1C84             
          jsr L1E74                     ; Jump to Subroutine at L1E74             
          brclr 4,RAM1_0bf,L0510        ; Branch to L0510 if Bit 4 Clear (Mn = 0) 
          brset 2,RAM1_0be,L0514        ; Branch to L0514 if Bit 2 is set at RAM1_0be (Mn=1)
          brset 1,RAM1_0be,L0514        ; Branch to L0514 if Bit 1 is set at RAM1_0be (Mn=1)
          brclr 7,RAM1_0bf,L0514        ; Branch to L0514 if Bit 7 Clear (Mn = 0) 
          bclr 7,RAM1_0bf               ; Clear bit 7 at RAM1_0bf                 
          bset 4,RAM1_0bf               ; Set Bit 4 at memory RAM1_0bf (Mn <- 1 ) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
L1516: 
          brset 4,STACK_0c1,L0550       ; Branch to L0550 if Bit 4 is set at STACK_0c1 (Mn=1)
L1519: 
          dec STACK_0c3                 ; Decrement Byte at STACK_0c3 Byte = Byte - 1
          bne L0550                     ; Branch to L0550 if Not Equal (Z = 0);   
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          beq L052B                     ; Branch to L052B if Equal Z=1            
          brclr 3,RAM1_0bc,L052B        ; Branch to L052B if Bit 3 Clear (Mn = 0) 
          inc STACK_0c3                 ; Increment Byte STACK_0c3, Byte = Byte + 1
          jmp L1953                     ; Unconditional Jump to L1953             
; 
          brclr 7,STACK_0c1,L053D       ; Branch to L053D if Bit 7 Clear (Mn = 0) 
          bclr 7,STACK_0c1              ; Clear bit 7 at STACK_0c1                
          bclr 6,STACK_0c1              ; Clear bit 6 at STACK_0c1                
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          ldx X1D18,x                   ; Load Index Register with Memory Byte, X <- (X1D18)
          jmp L1D20,x ;INFO: index jump ; Unconditional Jump to L1D20             
; 
          brclr 6,STACK_0c1,L054E       ; Branch to L054E if Bit 6 Clear (Mn = 0) 
          bclr 6,STACK_0c1              ; Clear bit 6 at STACK_0c1                
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          ldx X1C0E,x                   ; Load Index Register with Memory Byte, X <- (X1C0E)
          jsr L1C16,x ;INFO: index jump ; Jump to Subroutine at L1C16             
          cmp X3FC1                     ; Compare Accumulator with Memory Byte, (A) - (X3FC1)
          rts                           ; Return from Subroutine                  
; 
L1551: 
          brset 7,RAM1_0ba,L059C        ; Branch to L059C if Bit 7 is set at RAM1_0ba (Mn=1)
          jsr L1E4F                     ; Jump to Subroutine at L1E4F             
          beq L059C                     ; Branch to L059C if Equal Z=1            
          lda RAM1_0be                  ; Load Accumulator with value of Memory at RAM1_0be, A <- (RAM1_0be)
          brset 5,RAM1_0b9,L057E        ; Branch to L057E if Bit 5 is set at RAM1_0b9 (Mn=1)
          brset 4,RAM1_0b9,L0574        ; Branch to L0574 if Bit 4 is set at RAM1_0b9 (Mn=1)
          brclr 1,RAM1_0be,L0569        ; Branch to L0569 if Bit 1 Clear (Mn = 0) 
          brclr 3,RAM1_0b9,L056C        ; Branch to L056C if Bit 3 Clear (Mn = 0) 
          bra L0598                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_0ba,L0598        ; Branch to L0598 if Bit 3 is set at RAM1_0ba (Mn=1)
          bit #$F0                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$F0)
          beq L059C                     ; Branch to L059C if Equal Z=1            
          ora #$F0                      ; Logical OR Accumulator with Memory at #$F0, A <- (A) || (#$F0)
          bra L05A0                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_0be,L057A        ; Branch to L057A if Bit 1 Clear (Mn = 0) 
          brset 0,RAM1_0be,L058F        ; Branch to L058F if Bit 0 is set at RAM1_0be (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          bra L0586                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_0be,L0584        ; Branch to L0584 if Bit 2 Clear (Mn = 0) 
          brset 0,RAM1_0be,L058F        ; Branch to L058F if Bit 0 is set at RAM1_0be (Mn=1)
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bset 7,RAM1_0bf               ; Set Bit 7 at memory RAM1_0bf (Mn <- 1 ) 
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          inca                          ; Increment Accumulator by 1,A++          
          bset 4,RAM1_0ba               ; Set Bit 4 at memory RAM1_0ba (Mn <- 1 ) 
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          brclr 6,RAM1_0b9,L0598        ; Branch to L0598 if Bit 6 Clear (Mn = 0) 
          ora #$C0                      ; Logical OR Accumulator with Memory at #$C0, A <- (A) || (#$C0)
          add #$F0                      ; Add without Carry, A ← (A) + (#$F0)   
          bcs L05A0                     ; Branch to L05A0 if C = 1                
          jsr L1E87                     ; Jump to Subroutine at L1E87             
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_0be                  ; Store Accumulator in Memory at RAM1_0be 
          brclr 4,STACK_0c1,L0550       ; Branch to L0550 if Bit 4 Clear (Mn = 0) 
          jmp L1519                     ; Unconditional Jump to L1519             
; 
X15A8: 
          brclr 1,RAM1_06c,L0556        ; Branch to L0556 if Bit 1 Clear (Mn = 0) 
          brset 0,STACK_0cd,L05A3       ; Branch to L05A3 if Bit 0 is set at STACK_0cd (Mn=1)
          brclr 1,PortD,L05B4           ; Branch to L05B4 if Bit DIAG Clear (Mn = 0)
          bih L05B6                     ; Branch to L05B6 if IRQ Pin High IRQ=1   
          brset 3,RAM1_0b7,L060C        ; Branch to L060C if Bit 3 is set at RAM1_0b7 (Mn=1)
          bsr L05BD                     ; Branch to Subroutine at L05BD           
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          jsr L261E                     ; Jump to Subroutine at L261E             
L15BD: 
          jsr L2533                     ; Jump to Subroutine at L2533             
          cmp XA620                     ; Compare Accumulator with Memory Byte, (A) - (XA620)
          sta RAM2_0288,x               ; Store Accumulator in Memory at RAM2_0288
          incx                          ; Increment Index register by 1,X++       
          rts                           ; Return from Subroutine                  
; 
L15C8: 
          brclr 3,STACK_0d6,L05C7       ; Branch to L05C7 if Bit 3 Clear (Mn = 0) 
          bclr 3,STACK_0d6              ; Clear bit 3 at STACK_0d6                
          bset 6,RAM1_0ba               ; Set Bit 6 at memory RAM1_0ba (Mn <- 1 ) 
          ldx RAM2_0271                 ; Load Index Register with Memory Byte, X <- (RAM2_0271)
          stx RAM1_05b                  ; Store Index Register In Memory at RAM1_05b
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
cpx #$0C 
          bcc L05E7                     ; Branch to L05E7 if C bit is cleared     
          ldx X15A8,x                   ; Load Index Register with Memory Byte, X <- (X15A8)
          lda RAM2_0272                 ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          jmp L15E4,x ;INFO: index jump ; Unconditional Jump to L15E4             
L15E4: 
          jmp L170D                     ; Unconditional Jump to L170D             
          jmp L170A                     ; Unconditional Jump to L170A             
; 
          bset 6,RAM1_0bb               ; Set Bit 6 at memory RAM1_0bb (Mn <- 1 ) 
          bset 2,RAM1_0bf               ; Set Bit 2 at memory RAM1_0bf (Mn <- 1 ) 
          cmp RAM2_0273                 ; Compare Accumulator with Memory Byte, (A) - (RAM2_0273)
          bcs L05F5                     ; Branch to L05F5 if C = 1                
          bclr 2,RAM1_0bf               ; Clear bit 2 at RAM1_0bf                 
          brclr 4,STACK_0ce,L05E7       ; Branch to L05E7 if Bit 4 Clear (Mn = 0) 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM2_0274                 ; Load Accumulator with value of Memory at RAM2_0274, A <- (RAM2_0274)
          bsr L05BD                     ; Branch to Subroutine at L05BD           
          bsr L05C1                     ; Branch to Subroutine at L05C1           
          lda RAM2_0273                 ; Load Accumulator with value of Memory at RAM2_0273, A <- (RAM2_0273)
          jsr L15BD                     ; Jump to Subroutine at L15BD             
          bsr L05C1                     ; Branch to Subroutine at L05C1           
          brset 0,RAM1_0bb,L064B        ; Branch to L064B if Bit 0 is set at RAM1_0bb (Mn=1)
          bsr L05C1                     ; Branch to Subroutine at L05C1           
cpx #$08 
          bne L060B                     ; Branch to L060B if Not Equal (Z = 0);   
          bra L064B                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_05b,L064D        ; Branch to L064D if Bit 1 Clear (Mn = 0) 
          lda RAM2_0274                 ; Load Accumulator with value of Memory at RAM2_0274, A <- (RAM2_0274)
          bmi L062E                     ; Branch to L062E if Minus N = 1          
          eor STACK_0c5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0c5)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          bne L0624                     ; Branch to L0624 if Not Equal (Z = 0);   
          brset 7,STACK_0c5,L062E       ; Branch to L062E if Bit 7 is set at STACK_0c5 (Mn=1)
          eor STACK_0c5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0c5)
          sta STACK_0c5                 ; Store Accumulator in Memory at STACK_0c5
          bset 5,STACK_0c5              ; Set Bit 5 at memory STACK_0c5 (Mn <- 1 )
          bset 6,STACK_0c5              ; Set Bit 6 at memory STACK_0c5 (Mn <- 1 )
          bset 7,STACK_0c5              ; Set Bit 7 at memory STACK_0c5 (Mn <- 1 )
          brclr 4,STACK_0ce,L064B       ; Branch to L064B if Bit 4 Clear (Mn = 0) 
          brset 6,RAM1_0bb,L063B        ; Branch to L063B if Bit 6 is set at RAM1_0bb (Mn=1)
          clrx                          ; Clear Index Register, X <- 0x00         
          bsr L05C1                     ; Branch to Subroutine at L05C1           
cpx #$04 
          bne L0635                     ; Branch to L0635 if Not Equal (Z = 0);   
          bset 0,RAM1_0bb               ; Set Bit 0 at memory RAM1_0bb (Mn <- 1 ) 
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          lda RAM2_0273                 ; Load Accumulator with value of Memory at RAM2_0273, A <- (RAM2_0273)
          jsr L15B4                     ; Jump to Subroutine at L15B4             
          lda RAM2_0272                 ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          jsr L15B4                     ; Jump to Subroutine at L15B4             
          bset 6,STACK_0cb              ; Set Bit 6 at memory STACK_0cb (Mn <- 1 )
          jmp L170A                     ; Unconditional Jump to L170A             
; 
          ldx RAM1_05b                  ; Load Index Register with Memory Byte, X <- (RAM1_05b)
cpx #$08 
          beq L0663                     ; Branch to L0663 if Equal Z=1            
cpx #$0B 
          bne L064D                     ; Branch to L064D if Not Equal (Z = 0);   
          brclr 6,STACK_0ce,L0660       ; Branch to L0660 if Bit 6 Clear (Mn = 0) 
          jsr L1EB3                     ; Jump to Subroutine at L1EB3             
          lda RAM2_0275                 ; Load Accumulator with value of Memory at RAM2_0275, A <- (RAM2_0275)
          bclr 5,RAM1_0ba               ; Clear bit 5 at RAM1_0ba                 
          bclr 6,RAM1_0ba               ; Clear bit 6 at RAM1_0ba                 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bpl L066C                     ; Branch to L066C if Plus N = 0           
          bset 6,RAM1_0ba               ; Set Bit 6 at memory RAM1_0ba (Mn <- 1 ) 
          bclr 3,RAM1_0ba               ; Clear bit 3 at RAM1_0ba                 
          bit #$40                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$40)
          beq L0686                     ; Branch to L0686 if Equal Z=1            
          bset 3,RAM1_0ba               ; Set Bit 3 at memory RAM1_0ba (Mn <- 1 ) 
          bit #$20                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$20)
          beq L0686                     ; Branch to L0686 if Equal Z=1            
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          sta RAM1_0b4                  ; Store Accumulator in Memory at RAM1_0b4 
          lda #$CA                      ; Load Accumulator with value of Memory at #$CA, A <- (#$CA)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          jsr L2617                     ; Jump to Subroutine at L2617             
          eor RAM1_0b9                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b9)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          bra L06F4                     ; Branch Always (1 = 1)                   
; 
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          brclr 2,RAM1_05b,L064D        ; Branch to L064D if Bit 2 Clear (Mn = 0) 
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          stx RAM1_056                  ; Store Index Register In Memory at RAM1_056
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          sub RAM1_056                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_056)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM2_0272,x               ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          ldx RAM1_056                  ; Load Index Register with Memory Byte, X <- (RAM1_056)
          sta RAM2_0280,x               ; Store Accumulator in Memory at RAM2_0280
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bpl L0698                     ; Branch to L0698 if Plus N = 0           
          bset 4,RAM1_0bb               ; Set Bit 4 at memory RAM1_0bb (Mn <- 1 ) 
          bset 2,RAM1_094               ; Set Bit 2 at memory RAM1_094 (Mn <- 1 ) 
          bset 5,RAM1_0bb               ; Set Bit 5 at memory RAM1_0bb (Mn <- 1 ) 
          bra L064B                     ; Branch Always (1 = 1)                   
; 
          bclr 1,RAM1_0bb               ; Clear bit 1 at RAM1_0bb                 
          bit #$10                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$10)
          beq L06B9                     ; Branch to L06B9 if Equal Z=1            
          bset 1,RAM1_0bb               ; Set Bit 1 at memory RAM1_0bb (Mn <- 1 ) 
          and #$87                      ; Logical AND, A ← (A) && (#$87)        
          bpl L06C9                     ; Branch to L06C9 if Plus N = 0           
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          brset 7,RAM1_0b9,L06D0        ; Branch to L06D0 if Bit 7 is set at RAM1_0b9 (Mn=1)
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          jsr L1797                     ; Jump to Subroutine at L1797             
          bra L06CE                     ; Branch Always (1 = 1)                   
; 
          brclr 7,RAM1_0b9,L06D0        ; Branch to L06D0 if Bit 7 Clear (Mn = 0) 
          bclr 7,RAM1_0ba               ; Clear bit 7 at RAM1_0ba                 
          bset 7,STACK_0cb              ; Set Bit 7 at memory STACK_0cb (Mn <- 1 )
          jsr L261F                     ; Jump to Subroutine at L261F             
          eor RAM1_0b9                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b9)
          and #$B8                      ; Logical AND, A ← (A) && (#$B8)        
          bra L06F4                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_0bf,L06F2        ; Branch to L06F2 if Bit 0 is set at RAM1_0bf (Mn=1)
          lda RAM2_0271                 ; Load Accumulator with value of Memory at RAM2_0271, A <- (RAM2_0271)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM2_0272,x               ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          ldx X176B,x                   ; Load Index Register with Memory Byte, X <- (X176B)
          bclr 7,RAM1_0ba               ; Clear bit 7 at RAM1_0ba                 
          jsr L1771,x ;INFO: index jump ; Jump to Subroutine at L1771             
          bra L070A                     ; Branch Always (1 = 1)                   
; 
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          beq L070A                     ; Branch to L070A if Equal Z=1            
          eor RAM1_0b9                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b9)
          sta RAM1_0b9                  ; Store Accumulator in Memory at RAM1_0b9 
          brset 2,RAM1_0b8,L070A        ; Branch to L070A if Bit 2 is set at RAM1_0b8 (Mn=1)
          brclr 3,RAM1_0b9,L070A        ; Branch to L070A if Bit 3 Clear (Mn = 0) 
          ldx #$B2                      ; Load Index Register with Memory Byte, X <- (#$B2)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          jsr L1E45                     ; Jump to Subroutine at L1E45             
L170A: 
          bset 6,STACK_0d6              ; Set Bit 6 at memory STACK_0d6 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L170D: 
          brset 0,RAM1_0bf,L06F2        ; Branch to L06F2 if Bit 0 is set at RAM1_0bf (Mn=1)
          lda RAM2_0273                 ; Load Accumulator with value of Memory at RAM2_0273, A <- (RAM2_0273)
          brset 3,RAM1_0b6,L071A        ; Branch to L071A if Bit 3 is set at RAM1_0b6 (Mn=1)
          cmp #$FF                      ; Compare Accumulator with Memory Byte, (A) - (#$FF)
          beq L075A                     ; Branch to L075A if Equal Z=1            
          sta RAM1_0b7                  ; Store Accumulator in Memory at RAM1_0b7 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          bne L072F                     ; Branch to L072F if Not Equal (Z = 0);   
          jsr L1E8C                     ; Jump to Subroutine at L1E8C             
          eor STACK_0c0                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0c0)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          beq L072F                     ; Branch to L072F if Equal Z=1            
          bset 2,STACK_0c0              ; Set Bit 2 at memory STACK_0c0 (Mn <- 1 )
          lda RAM2_0272                 ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          bmi L073E                     ; Branch to L073E if Minus N = 1          
          brclr 6,RAM1_0b9,L0745        ; Branch to L0745 if Bit 6 Clear (Mn = 0) 
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          jsr L1E7F                     ; Jump to Subroutine at L1E7F             
          bra L0743                     ; Branch Always (1 = 1)                   
; 
          brset 6,RAM1_0b9,L0745        ; Branch to L0745 if Bit 6 is set at RAM1_0b9 (Mn=1)
          bset 6,RAM1_0b9               ; Set Bit 6 at memory RAM1_0b9 (Mn <- 1 ) 
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          brclr 5,RAM1_0b6,L075F        ; Branch to L075F if Bit 5 Clear (Mn = 0) 
          lda RAM1_0b7                  ; Load Accumulator with value of Memory at RAM1_0b7, A <- (RAM1_0b7)
          ldx STACK_0c2                 ; Load Index Register with Memory Byte, X <- (STACK_0c2)
          incx                          ; Increment Index register by 1,X++       
          beq L075D                     ; Branch to L075D if Equal Z=1            
          brclr 7,STACK_0c1,L075F       ; Branch to L075F if Bit 7 Clear (Mn = 0) 
          cmp STACK_0c2                 ; Compare Accumulator with Memory Byte, (A) - (STACK_0c2)
          bne L075F                     ; Branch to L075F if Not Equal (Z = 0);   
          bclr 5,RAM1_0b6               ; Clear bit 5 at RAM1_0b6                 
          bra L075F                     ; Branch Always (1 = 1)                   
; 
          bset 3,RAM1_0bb               ; Set Bit 3 at memory RAM1_0bb (Mn <- 1 ) 
          cmp XB7C2                     ; Compare Accumulator with Memory Byte, (A) - (XB7C2)
          lda STACK_0c3                 ; Load Accumulator with value of Memory at STACK_0c3, A <- (STACK_0c3)
          cmp #$40                      ; Compare Accumulator with Memory Byte, (A) - (#$40)
          beq L0769                     ; Branch to L0769 if Equal Z=1            
          bset 5,RAM1_0bb               ; Set Bit 5 at memory RAM1_0bb (Mn <- 1 ) 
          bset 6,STACK_0cb              ; Set Bit 6 at memory STACK_0cb (Mn <- 1 )
          bra L06F2                     ; Branch Always (1 = 1)                   
; 
X176B: 
          bit X2744                     ; Bit Test Accumulator with Memory Byte (A) ∧ (X2744)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          brset 0,X0026,L0781           ; Branch to L0781 if Bit 0 is set at X0026 (Mn=1)
; 
          db $61                        ; data? a,  ,  ,                          
; 
          brset 1,OCL2,L07D7            ; Branch to L07D7 if Bit 1 is set at OCL2 (Mn=1)
          brclr 4,RAM1_0b6,L0784        ; Branch to L0784 if Bit 4 Clear (Mn = 0) 
          brset 7,RAM1_0b6,L07C8        ; Branch to L07C8 if Bit 7 is set at RAM1_0b6 (Mn=1)
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          beq L07CA                     ; Branch to L07CA if Equal Z=1            
          brset 5,RAM1_0bc,L0790        ; Branch to L0790 if Bit 5 is set at RAM1_0bc (Mn=1)
          brset 6,RAM1_0bc,L0790        ; Branch to L0790 if Bit 6 is set at RAM1_0bc (Mn=1)
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          bne L0794                     ; Branch to L0794 if Not Equal (Z = 0);   
          bsr L07CA                     ; Branch to Subroutine at L07CA           
          bset 7,RAM1_0bb               ; Set Bit 7 at memory RAM1_0bb (Mn <- 1 ) 
          brset 7,RAM1_056,L0797        ; Branch to L0797 if Bit 7 is set at RAM1_056 (Mn=1)
L1797: 
          rts                           ; Return from Subroutine                  
; 
L1798: 
          brclr 7,RAM1_056,L07B2        ; Branch to L07B2 if Bit 7 Clear (Mn = 0) 
          bset 4,RAM1_0b8               ; Set Bit 4 at memory RAM1_0b8 (Mn <- 1 ) 
          brset 2,RAM1_0b8,L07AD        ; Branch to L07AD if Bit 2 is set at RAM1_0b8 (Mn=1)
          bclr 0,RAM1_0b8               ; Clear bit 0 at RAM1_0b8                 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          ldx #$BC                      ; Load Index Register with Memory Byte, X <- (#$BC)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          incx                          ; Increment Index register by 1,X++       
          jsr L38A0                     ; Jump to Subroutine at L38A0             
L17AD: 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          rts                           ; Return from Subroutine                  
          jmp L1D8A                     ; Unconditional Jump to L1D8A             
; 
          bclr 3,RAM1_0bf               ; Clear bit 3 at RAM1_0bf                 
          brclr 7,RAM1_056,L0035        ; Branch to L0035 if Bit 7 Clear (Mn = 0) 
L17BA: 
          jsr L1C7C                     ; Jump to Subroutine at L1C7C             
          bset 2,RAM1_07e               ; Set Bit 2 at memory RAM1_07e (Mn <- 1 ) 
L17BF: 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          sta RAM1_0bd                  ; Store Accumulator in Memory at RAM1_0bd 
          bset 2,RAM1_0bb               ; Set Bit 2 at memory RAM1_0bb (Mn <- 1 ) 
          bclr 6,RAM1_0bc               ; Clear bit 6 at RAM1_0bc                 
          rts                           ; Return from Subroutine                  
; 
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          brset 6,RAM1_0bf,L07D2        ; Branch to L07D2 if Bit 6 is set at RAM1_0bf (Mn=1)
          brset 6,RAM1_056,L07DC        ; Branch to L07DC if Bit 6 is set at RAM1_056 (Mn=1)
          bclr 6,RAM1_0bc               ; Clear bit 6 at RAM1_0bc                 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          bclr 6,RAM1_0b8               ; Clear bit 6 at RAM1_0b8                 
          bclr 5,RAM1_0b8               ; Clear bit 5 at RAM1_0b8                 
          bclr 4,RAM1_0b8               ; Clear bit 4 at RAM1_0b8                 
          bra L0033                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          brset 6,RAM1_0bc,L07E5        ; Branch to L07E5 if Bit 6 is set at RAM1_0bc (Mn=1)
          bit #$70                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$70)
          bne L0035                     ; Branch to L0035 if Not Equal (Z = 0);   
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
          sta RAM1_0bd                  ; Store Accumulator in Memory at RAM1_0bd 
          lda RAM2_0272                 ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          sub #$06                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$06)
          beq L07F9                     ; Branch to L07F9 if Equal Z=1            
          bmi L07F7                     ; Branch to L07F7 if Minus N = 1          
deca 
          inc RAM1_0bd                  ; Increment Byte RAM1_0bd, Byte = Byte + 1
          bra L07EC                     ; Branch Always (1 = 1)                   
; 
          add #$07                      ; Add without Carry, A ← (A) + (#$07)   
          jsr L261E                     ; Jump to Subroutine at L261E             
          add RAM1_0bd                  ; Add without Carry, A ← (A) + (RAM1_0bd)
          sta RAM1_0bd                  ; Store Accumulator in Memory at RAM1_0bd 
          brclr 2,RAM1_0b8,L000C        ; Branch to L000C if Bit 2 Clear (Mn = 0) 
          jsr L261F                     ; Jump to Subroutine at L261F             
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$08                      ; Logical AND, A ← (A) && (#$08)        
          bra L0017                     ; Branch Always (1 = 1)                   
; 
          brclr 5,RAM1_069,L0013        ; Branch to L0013 if Bit 5 Clear (Mn = 0) 
          bit #$01                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$01)
          bne L0025                     ; Branch to L0025 if Not Equal (Z = 0);   
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          beq L0029                     ; Branch to L0029 if Equal Z=1            
          brclr 6,RAM1_0bc,L0022        ; Branch to L0022 if Bit 6 Clear (Mn = 0) 
          bclr 6,RAM1_0b8               ; Clear bit 6 at RAM1_0b8                 
          bclr 5,RAM1_0b8               ; Clear bit 5 at RAM1_0b8                 
          bclr 4,RAM1_0b8               ; Clear bit 4 at RAM1_0b8                 
          brset 5,RAM1_0bc,L07C3        ; Branch to L07C3 if Bit 5 is set at RAM1_0bc (Mn=1)
          brset 6,RAM1_0bc,L07D2        ; Branch to L07D2 if Bit 6 is set at RAM1_0bc (Mn=1)
          rts                           ; Return from Subroutine                  
; 
          bset 5,RAM1_0bb               ; Set Bit 5 at memory RAM1_0bb (Mn <- 1 ) 
          lda RAM1_0bd                  ; Load Accumulator with value of Memory at RAM1_0bd, A <- (RAM1_0bd)
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          bset 6,RAM1_0bc               ; Set Bit 6 at memory RAM1_0bc (Mn <- 1 ) 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          bset 7,STACK_0cb              ; Set Bit 7 at memory STACK_0cb (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          brclr 6,STACK_0d2,L003C       ; Branch to L003C if Bit 6 Clear (Mn = 0) 
          jmp L1798                     ; Unconditional Jump to L1798             
; 
          brclr 7,RAM1_056,L0069        ; Branch to L0069 if Bit 7 Clear (Mn = 0) 
          bclr 2,STACK_0c0              ; Clear bit 2 at STACK_0c0                
          jsr L1E42                     ; Jump to Subroutine at L1E42             
          bsr L07CA                     ; Branch to Subroutine at L07CA           
          brset 5,RAM1_0b6,L0063        ; Branch to L0063 if Bit 5 is set at RAM1_0b6 (Mn=1)
          brclr 6,RAM1_0bf,L005C        ; Branch to L005C if Bit 6 Clear (Mn = 0) 
          brset 1,RAM1_0ba,L0053        ; Branch to L0053 if Bit 1 is set at RAM1_0ba (Mn=1)
          bset 1,RAM1_0ba               ; Set Bit 1 at memory RAM1_0ba (Mn <- 1 ) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          lda #$E3                      ; Load Accumulator with value of Memory at #$E3, A <- (#$E3)
          brset 4,STACK_0c1,L005E       ; Branch to L005E if Bit 4 is set at STACK_0c1 (Mn=1)
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          bra L0060                     ; Branch Always (1 = 1)                   
; 
L185C: 
          lda #$60                      ; Load Accumulator with value of Memory at #$60, A <- (#$60)
          ldx #$28                      ; Load Index Register with Memory Byte, X <- (#$28)
          jmp L1C84                     ; Unconditional Jump to L1C84             
; 
          brclr 2,STACK_0c1,L005C       ; Branch to L005C if Bit 2 Clear (Mn = 0) 
          bset 5,STACK_0c1              ; Set Bit 5 at memory STACK_0c1 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          brclr 5,RAM1_0b6,L0071        ; Branch to L0071 if Bit 5 Clear (Mn = 0) 
          jsr L1D8A                     ; Jump to Subroutine at L1D8A             
          bra L008B                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L0084                     ; Branch to L0084 if Equal Z=1            
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          bne L008B                     ; Branch to L008B if Not Equal (Z = 0);   
          brclr 6,RAM1_0b5,L008B        ; Branch to L008B if Bit 6 Clear (Mn = 0) 
          clr STACK_0c2                 ; Clear byte at STACK_0c2 <- 0x00         
          bset 0,RAM1_0b6               ; Set Bit 0 at memory RAM1_0b6 (Mn <- 1 ) 
          lsr STACK_0c2                 ; Logical Shift Right of STACK_0c2, b7 -> [b7 >>>> b0] -> C
          bne L008B                     ; Branch to L008B if Not Equal (Z = 0);   
          jsr L1D4B                     ; Jump to Subroutine at L1D4B             
          bset 7,RAM1_0ba               ; Set Bit 7 at memory RAM1_0ba (Mn <- 1 ) 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          ora #$D0                      ; Logical OR Accumulator with Memory at #$D0, A <- (A) || (#$D0)
          bit #$20                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$20)
          beq L0097                     ; Branch to L0097 if Equal Z=1            
          and #$A7                      ; Logical AND, A ← (A) && (#$A7)        
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          rts                           ; Return from Subroutine                  
; 
L189A: 
          lda RAM1_0b3                  ; Load Accumulator with value of Memory at RAM1_0b3, A <- (RAM1_0b3)
          bit #$0F                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$0F)
          beq L0118                     ; Branch to L0118 if Equal Z=1            
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sec                           ; Set Carry Bit , C ← 1                 
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
decx 
          bpl L00A5                     ; Branch to L00A5 if Plus N = 0           
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          ldx #$B5                      ; Load Index Register with Memory Byte, X <- (#$B5)
          brclr 3,RAM1_0b3,L00B2        ; Branch to L00B2 if Bit 3 Clear (Mn = 0) 
          ldx #$BC                      ; Load Index Register with Memory Byte, X <- (#$BC)
          brclr 6,RAM1_0b3,L00BE        ; Branch to L00BE if Bit 6 Clear (Mn = 0) 
          brset 5,RAM1_0b3,L00BC        ; Branch to L00BC if Bit 5 is set at RAM1_0b3 (Mn=1)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          and ,x                        ; Logical AND, A ← (A) && ()            
          bra L00BF                     ; Branch Always (1 = 1)                   
; 
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
          cmp STACK_0fa                 ; Compare Accumulator with Memory Byte, (A) - (STACK_0fa)
          brset 3,RAM1_0b3,L00CB        ; Branch to L00CB if Bit 3 is set at RAM1_0b3 (Mn=1)
          brclr 1,RAM1_056,L00CB        ; Branch to L00CB if Bit 1 Clear (Mn = 0) 
          bit #$02                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$02)
          beq L00CB                     ; Branch to L00CB if Equal Z=1            
          ora #$0C                      ; Logical OR Accumulator with Memory at #$0C, A <- (A) || (#$0C)
X18CB: 
          brclr 3,RAM1_08e,L00DD        ; Branch to L00DD if Bit 3 Clear (Mn = 0) 
          brclr 4,RAM1_056,L00D7        ; Branch to L00D7 if Bit 4 Clear (Mn = 0) 
          bit #$10                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$10)
          beq L00D7                     ; Branch to L00D7 if Equal Z=1            
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          bne L00DD                     ; Branch to L00DD if Not Equal (Z = 0);   
          and #$AF                      ; Logical AND, A ← (A) && (#$AF)        
          sta ,x                        ; Store Accumulator in Memory at          
          ldx #$F3                      ; Load Index Register with Memory Byte, X <- (#$F3)
          brset 3,RAM1_0b3,L012F        ; Branch to L012F if Bit 3 is set at RAM1_0b3 (Mn=1)
          and #$62                      ; Logical AND, A ← (A) && (#$62)        
          ldx #$B0                      ; Load Index Register with Memory Byte, X <- (#$B0)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          brset 5,RAM1_056,L00F5        ; Branch to L00F5 if Bit 5 is set at RAM1_056 (Mn=1)
          brclr 6,RAM1_056,L0149        ; Branch to L0149 if Bit 6 Clear (Mn = 0) 
          brset 2,RAM1_0b8,L0107        ; Branch to L0107 if Bit 2 is set at RAM1_0b8 (Mn=1)
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$17                      ; Logical AND, A ← (A) && (#$17)        
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          bne L0107                     ; Branch to L0107 if Not Equal (Z = 0);   
          brclr 5,RAM1_0b6,L0103        ; Branch to L0103 if Bit 5 Clear (Mn = 0) 
          brclr 7,RAM1_0ba,L0107        ; Branch to L0107 if Bit 7 Clear (Mn = 0) 
          bsr L008B                     ; Branch to Subroutine at L008B           
          bra L0153                     ; Branch Always (1 = 1)                   
; 
          brclr 6,RAM1_056,L0149        ; Branch to L0149 if Bit 6 Clear (Mn = 0) 
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L014E                     ; Branch to L014E if Equal Z=1            
          brset 6,RAM1_059,L011A        ; Branch to L011A if Bit 6 is set at RAM1_059 (Mn=1)
          ldx #$F1                      ; Load Index Register with Memory Byte, X <- (#$F1)
          brset 6,RAM1_0b9,L014E        ; Branch to L014E if Bit 6 is set at RAM1_0b9 (Mn=1)
          bra L0149                     ; Branch Always (1 = 1)                   
; 
          bset 4,STACK_0c0              ; Set Bit 4 at memory STACK_0c0 (Mn <- 1 )
          bclr 3,STACK_0c0              ; Clear bit 3 at STACK_0c0                
          brclr 2,RAM1_0b8,L0132        ; Branch to L0132 if Bit 2 Clear (Mn = 0) 
          bset 3,STACK_0c0              ; Set Bit 3 at memory STACK_0c0 (Mn <- 1 )
          ldx #$B2                      ; Load Index Register with Memory Byte, X <- (#$B2)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          bclr 5,RAM1_0bb               ; Clear bit 5 at RAM1_0bb                 
          jmp L17AD                     ; Unconditional Jump to L17AD             
          jmp L1AA5                     ; Unconditional Jump to L1AA5             
; 
          brset 6,STACK_0c1,L0149       ; Branch to L0149 if Bit 6 is set at STACK_0c1 (Mn=1)
          jsr L1E69                     ; Jump to Subroutine at L1E69             
          bne L0149                     ; Branch to L0149 if Not Equal (Z = 0);   
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          sta STACK_0c3                 ; Store Accumulator in Memory at STACK_0c3
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          cmp #$95                      ; Compare Accumulator with Memory Byte, (A) - (#$95)
          beq L0149                     ; Branch to L0149 if Equal Z=1            
          lda #$86                      ; Load Accumulator with value of Memory at #$86, A <- (#$86)
          jsr L1C82                     ; Jump to Subroutine at L1C82             
          lda RAM1_0b3                  ; Load Accumulator with value of Memory at RAM1_0b3, A <- (RAM1_0b3)
          and #$10                      ; Logical AND, A ← (A) && (#$10)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          stx RAM1_0b3                  ; Store Index Register In Memory at RAM1_0b3
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L1953: 
          lda #$C8                      ; Load Accumulator with value of Memory at #$C8, A <- (#$C8)
          brset 6,RAM1_05f,L017F        ; Branch to L017F if Bit 6 is set at RAM1_05f (Mn=1)
          jsr L1E5A                     ; Jump to Subroutine at L1E5A             
          brset 7,RAM1_061,L018E        ; Branch to L018E if Bit 7 is set at RAM1_061 (Mn=1)
          brclr 1,RAM1_0ba,L0163        ; Branch to L0163 if Bit 1 Clear (Mn = 0) 
          and #$BF                      ; Logical AND, A ← (A) && (#$BF)        
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
          and #$4E                      ; Logical AND, A ← (A) && (#$4E)        
          brclr 7,RAM1_0b5,L0171        ; Branch to L0171 if Bit 7 Clear (Mn = 0) 
          brset 3,RAM1_0b5,L0171        ; Branch to L0171 if Bit 3 is set at RAM1_0b5 (Mn=1)
          and #$4A                      ; Logical AND, A ← (A) && (#$4A)        
          brclr 6,STACK_0ce,L0176       ; Branch to L0176 if Bit 6 Clear (Mn = 0) 
          ora #$30                      ; Logical OR Accumulator with Memory at #$30, A <- (A) || (#$30)
          brset 4,STACK_0ce,L017C       ; Branch to L017C if Bit 4 is set at STACK_0ce (Mn=1)
          brclr 3,STACK_0ce,L017E       ; Branch to L017E if Bit 3 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          inca                          ; Increment Accumulator by 1,A++          
          bit #$04                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$04)
          beq L0190                     ; Branch to L0190 if Equal Z=1            
          brset 3,RAM1_05d,L0189        ; Branch to L0189 if Bit 3 is set at RAM1_05d (Mn=1)
          brclr 3,RAM1_0bf,L018B        ; Branch to L018B if Bit 3 Clear (Mn = 0) 
          and #$F3                      ; Logical AND, A ← (A) && (#$F3)        
          brclr 7,RAM1_0bf,L0190        ; Branch to L0190 if Bit 7 Clear (Mn = 0) 
          and #$FB                      ; Logical AND, A ← (A) && (#$FB)        
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          brclr 3,RAM1_08e,L019B        ; Branch to L019B if Bit 3 Clear (Mn = 0) 
          ora #$02                      ; Logical OR Accumulator with Memory at #$02, A <- (A) || (#$02)
          and #$BB                      ; Logical AND, A ← (A) && (#$BB)        
          ldx #$09                      ; Load Index Register with Memory Byte, X <- (#$09)
          brclr 0,RAM1_061,L01AD        ; Branch to L01AD if Bit 0 Clear (Mn = 0) 
          brclr 1,RAM1_082,L01A8        ; Branch to L01A8 if Bit 1 Clear (Mn = 0) 
          brset 0,RAM1_082,L01A8        ; Branch to L01A8 if Bit 0 is set at RAM1_082 (Mn=1)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          bra L01AD                     ; Branch Always (1 = 1)                   
; 
          brclr 4,RAM1_069,L01AD        ; Branch to L01AD if Bit 4 Clear (Mn = 0) 
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          brclr 6,RAM1_05f,L01B6        ; Branch to L01B6 if Bit 6 Clear (Mn = 0) 
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          bclr 1,RAM1_0bc               ; Clear bit 1 at RAM1_0bc                 
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          brclr 4,RAM1_0bf,L01C4        ; Branch to L01C4 if Bit 4 Clear (Mn = 0) 
          brset 7,RAM1_0b5,L01C4        ; Branch to L01C4 if Bit 7 is set at RAM1_0b5 (Mn=1)
          bset 1,RAM1_0bc               ; Set Bit 1 at memory RAM1_0bc (Mn <- 1 ) 
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          sta RAM2_027d                 ; Store Accumulator in Memory at RAM2_027d
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          brclr 2,RAM1_0b8,L01D1        ; Branch to L01D1 if Bit 2 Clear (Mn = 0) 
          brset 6,RAM1_05f,L01D1        ; Branch to L01D1 if Bit 6 is set at RAM1_05f (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          bset 2,RAM1_0b5               ; Set Bit 2 at memory RAM1_0b5 (Mn <- 1 ) 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          bclr 3,RAM1_0bc               ; Clear bit 3 at RAM1_0bc                 
          lda #$0A                      ; Load Accumulator with value of Memory at #$0A, A <- (#$0A)
          jmp L1A75                     ; Unconditional Jump to L1A75             
; 
X19DD: 
          db $7E, $7B                   ; data? ~, {,  ,                          
; 
          brset 0,RAM1_05e,L01BE        ; Branch to L01BE if Bit 0 is set at RAM1_05e (Mn=1)
          cmp XD0F5                     ; Compare Accumulator with Memory Byte, (A) - (XD0F5)
          bclr 3,RAM1_05d               ; Clear bit 3 at RAM1_05d                 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$74                      ; Logical AND, A ← (A) && (#$74)        
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          beq L022B                     ; Branch to L022B if Equal Z=1            
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          cmp #$10                      ; Compare Accumulator with Memory Byte, (A) - (#$10)
          bne L01F9                     ; Branch to L01F9 if Not Equal (Z = 0);   
          bset 3,RAM1_0bf               ; Set Bit 3 at memory RAM1_0bf (Mn <- 1 ) 
          bra L0227                     ; Branch Always (1 = 1)                   
; 
          ldx #$83                      ; Load Index Register with Memory Byte, X <- (#$83)
          cmp #$50                      ; Compare Accumulator with Memory Byte, (A) - (#$50)
          beq L0227                     ; Branch to L0227 if Equal Z=1            
          clrx                          ; Clear Index Register, X <- 0x00         
          brclr 2,RAM1_0b8,L0208        ; Branch to L0208 if Bit 2 Clear (Mn = 0) 
          brclr 3,RAM1_0b8,L020D        ; Branch to L020D if Bit 3 Clear (Mn = 0) 
          bra L020B                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_0b8,L020D        ; Branch to L020D if Bit 1 Clear (Mn = 0) 
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          cmp #$20                      ; Compare Accumulator with Memory Byte, (A) - (#$20)
          beq L0221                     ; Branch to L0221 if Equal Z=1            
          brset 2,RAM1_0b8,L0220        ; Branch to L0220 if Bit 2 is set at RAM1_0b8 (Mn=1)
          incx                          ; Increment Index register by 1,X++       
          cmp #$30                      ; Compare Accumulator with Memory Byte, (A) - (#$30)
          beq L0221                     ; Branch to L0221 if Equal Z=1            
          incx                          ; Increment Index register by 1,X++       
          cmp #$40                      ; Compare Accumulator with Memory Byte, (A) - (#$40)
          beq L0221                     ; Branch to L0221 if Equal Z=1            
          rts                           ; Return from Subroutine                  
; 
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          sec                           ; Set Carry Bit , C ← 1                 
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          sec                           ; Set Carry Bit , C ← 1                 
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          lda #$18                      ; Load Accumulator with value of Memory at #$18, A <- (#$18)
          bra L0275                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_088                  ; Load Accumulator with value of Memory at RAM1_088, A <- (RAM1_088)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda RAM1_083                  ; Load Accumulator with value of Memory at RAM1_083, A <- (RAM1_083)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          ldx #$70                      ; Load Index Register with Memory Byte, X <- (#$70)
          jsr L388B                     ; Jump to Subroutine at L388B             
          jmp L17BA                     ; Unconditional Jump to L17BA             
; 
L1A3D: 
          brclr 3,RAM1_0b3,L01E5        ; Branch to L01E5 if Bit 3 Clear (Mn = 0) 
          clr RAM1_0b6                  ; Clear byte at RAM1_0b6 <- 0x00          
          brclr 6,RAM1_0b3,L0254        ; Branch to L0254 if Bit 6 Clear (Mn = 0) 
          brclr 5,RAM1_0b3,L024E        ; Branch to L024E if Bit 5 Clear (Mn = 0) 
          ldx #$09                      ; Load Index Register with Memory Byte, X <- (#$09)
          clr RAM1_0b3                  ; Clear byte at RAM1_0b3 <- 0x00          
          bra L0272                     ; Branch Always (1 = 1)                   
; 
          ldx #$EA                      ; Load Index Register with Memory Byte, X <- (#$EA)
          stx RAM1_0b3                  ; Store Index Register In Memory at RAM1_0b3
          bra L026D                     ; Branch Always (1 = 1)                   
; 
L1A54: 
          bclr 5,RAM1_0bc               ; Clear bit 5 at RAM1_0bc                 
          bclr 6,RAM1_0bc               ; Clear bit 6 at RAM1_0bc                 
          bset 3,RAM1_094               ; Set Bit 3 at memory RAM1_094 (Mn <- 1 ) 
          jsr L1DF2                     ; Jump to Subroutine at L1DF2             
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          brset 3,RAM1_0b5,L0266        ; Branch to L0266 if Bit 3 is set at RAM1_0b5 (Mn=1)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          and RAM1_056                  ; Logical AND, A ← (A) && (RAM1_056)    
          cmp XBA56                     ; Compare Accumulator with Memory Byte, (A) - (XBA56)
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
L1A6D: 
          jsr L1E29                     ; Jump to Subroutine at L1E29             
          ldx #$89                      ; Load Index Register with Memory Byte, X <- (#$89)
          jsr L1E06                     ; Jump to Subroutine at L1E06             
L1A75: 
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          stx RAM1_051                  ; Store Index Register In Memory at RAM1_051
          brclr 7,STACK_0d6,L028C       ; Branch to L028C if Bit 7 Clear (Mn = 0) 
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L22BD                     ; Jump to Subroutine at L22BD             
          brclr 3,RAM1_067,L0279        ; Branch to L0279 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L1EE2                     ; Jump to Subroutine at L1EE2             
          bra L0279                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          ldx RAM1_051                  ; Load Index Register with Memory Byte, X <- (RAM1_051)
          sta RAM2_027a                 ; Store Accumulator in Memory at RAM2_027a
          stx RAM2_027b                 ; Store Index Register In Memory at RAM2_027b
          bset 7,STACK_0d6              ; Set Bit 7 at memory STACK_0d6 (Mn <- 1 )
          clr STACK_0d9                 ; Clear byte at STACK_0d9 <- 0x00         
          rts                           ; Return from Subroutine                  
; 
          brclr 3,RAM1_0b3,L02A5        ; Branch to L02A5 if Bit 3 Clear (Mn = 0) 
          brset 7,RAM1_0ba,L029A        ; Branch to L029A if Bit 7 is set at RAM1_0ba (Mn=1)
          ldx #$0A                      ; Load Index Register with Memory Byte, X <- (#$0A)
          bra L0227                     ; Branch Always (1 = 1)                   
; 
L1AA5: 
          brset 3,RAM1_0bf,L029A        ; Branch to L029A if Bit 3 is set at RAM1_0bf (Mn=1)
          bset 0,RAM1_0bc               ; Set Bit 0 at memory RAM1_0bc (Mn <- 1 ) 
          brset 6,STACK_0d3,L02AF       ; Branch to L02AF if Bit 6 is set at STACK_0d3 (Mn=1)
          bclr 0,RAM1_0bc               ; Clear bit 0 at RAM1_0bc                 
          lda RAM1_0bc                  ; Load Accumulator with value of Memory at RAM1_0bc, A <- (RAM1_0bc)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          bra L0275                     ; Branch Always (1 = 1)                   
          jmp L1B81                     ; Unconditional Jump to L1B81             
; 
          bclr 3,RAM1_0bf               ; Clear bit 3 at RAM1_0bf                 
          bclr 5,RAM1_0bb               ; Clear bit 5 at RAM1_0bb                 
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          brclr 3,RAM1_0b3,L02DA        ; Branch to L02DA if Bit 3 Clear (Mn = 0) 
          ldx #$B1                      ; Load Index Register with Memory Byte, X <- (#$B1)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          brclr 5,RAM1_0b6,L02D3        ; Branch to L02D3 if Bit 5 Clear (Mn = 0) 
          bit #$70                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$70)
          bne L02D5                     ; Branch to L02D5 if Not Equal (Z = 0);   
          jmp L1DA5                     ; Unconditional Jump to L1DA5             
; 
          ora #$70                      ; Logical OR Accumulator with Memory at #$70, A <- (A) || (#$70)
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          brset 2,RAM1_0b8,L02DA        ; Branch to L02DA if Bit 2 is set at RAM1_0b8 (Mn=1)
L1ADA: 
          bclr 7,RAM1_0bf               ; Clear bit 7 at RAM1_0bf                 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          cmp #$70                      ; Compare Accumulator with Memory Byte, (A) - (#$70)
          bne L02E7                     ; Branch to L02E7 if Not Equal (Z = 0);   
L1AE4: 
          jsr L1DCA                     ; Jump to Subroutine at L1DCA             
          jsr L1DF2                     ; Jump to Subroutine at L1DF2             
          bset 0,RAM1_056               ; Set Bit 0 at memory RAM1_056 (Mn <- 1 ) 
          and RAM1_056                  ; Logical AND, A ← (A) && (RAM1_056)    
          bset 3,RAM1_0b5               ; Set Bit 3 at memory RAM1_0b5 (Mn <- 1 ) 
          bne L02F6                     ; Branch to L02F6 if Not Equal (Z = 0);   
          bclr 3,RAM1_0b5               ; Clear bit 3 at RAM1_0b5                 
          bclr 4,RAM1_0b5               ; Clear bit 4 at RAM1_0b5                 
L1AF6: 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          bclr 1,RAM1_0ba               ; Clear bit 1 at RAM1_0ba                 
          bset 1,RAM1_0bf               ; Set Bit 1 at memory RAM1_0bf (Mn <- 1 ) 
          bset 0,RAM1_0bf               ; Set Bit 0 at memory RAM1_0bf (Mn <- 1 ) 
L1AFE: 
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          ldx #$0C                      ; Load Index Register with Memory Byte, X <- (#$0C)
          brclr 6,RAM1_05f,L0307        ; Branch to L0307 if Bit 6 Clear (Mn = 0) 
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          jsr L1E7D                     ; Jump to Subroutine at L1E7D             
          jmp L1C84                     ; Unconditional Jump to L1C84             
; 
          brset 2,RAM1_0b8,L0315        ; Branch to L0315 if Bit 2 is set at RAM1_0b8 (Mn=1)
          bset 1,RAM1_0b8               ; Set Bit 1 at memory RAM1_0b8 (Mn <- 1 ) 
          bclr 0,RAM1_0b8               ; Clear bit 0 at RAM1_0b8                 
          cmp X16B8                     ; Compare Accumulator with Memory Byte, (A) - (X16B8)
          bra L02F6                     ; Branch Always (1 = 1)                   
; 
          brset 5,RAM1_0b3,L0395        ; Branch to L0395 if Bit 5 is set at RAM1_0b3 (Mn=1)
          brclr 3,RAM1_0bf,L0323        ; Branch to L0323 if Bit 3 Clear (Mn = 0) 
          bset 0,RAM1_0b3               ; Set Bit 0 at memory RAM1_0b3 (Mn <- 1 ) 
          bset 1,RAM1_0b3               ; Set Bit 1 at memory RAM1_0b3 (Mn <- 1 ) 
          brset 6,RAM1_0b3,L0332        ; Branch to L0332 if Bit 6 is set at RAM1_0b3 (Mn=1)
          brclr 4,RAM1_0b3,L036F        ; Branch to L036F if Bit 4 Clear (Mn = 0) 
          brclr 1,RAM1_0ba,L036C        ; Branch to L036C if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_0ba               ; Clear bit 1 at RAM1_0ba                 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          bra L036C                     ; Branch Always (1 = 1)                   
; 
          brclr 6,RAM1_0b3,L033D        ; Branch to L033D if Bit 6 Clear (Mn = 0) 
          brclr 4,RAM1_0b3,L033D        ; Branch to L033D if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_0b3               ; Clear bit 4 at RAM1_0b3                 
          bclr 6,RAM1_0bf               ; Clear bit 6 at RAM1_0bf                 
          cmp X1CBF                     ; Compare Accumulator with Memory Byte, (A) - (X1CBF)
          bclr 6,RAM1_0b3               ; Clear bit 6 at RAM1_0b3                 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bne L0354                     ; Branch to L0354 if Not Equal (Z = 0);   
          ldx #$B1                      ; Load Index Register with Memory Byte, X <- (#$B1)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          bclr 7,RAM1_0bf               ; Clear bit 7 at RAM1_0bf                 
          bra L0369                     ; Branch Always (1 = 1)                   
; 
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          bne L0369                     ; Branch to L0369 if Not Equal (Z = 0);   
          brset 4,RAM1_0b3,L0369        ; Branch to L0369 if Bit 4 is set at RAM1_0b3 (Mn=1)
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          eor RAM1_0b3                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b3)
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          beq L0369                     ; Branch to L0369 if Equal Z=1            
          jsr L1AFE                     ; Jump to Subroutine at L1AFE             
          jmp L1A6D                     ; Unconditional Jump to L1A6D             
; 
          brclr 4,RAM1_0b3,L036F        ; Branch to L036F if Bit 4 Clear (Mn = 0) 
          bclr 6,RAM1_0bf               ; Clear bit 6 at RAM1_0bf                 
          rts                           ; Return from Subroutine                  
; 
          brset 7,RAM1_0bf,L02FE        ; Branch to L02FE if Bit 7 is set at RAM1_0bf (Mn=1)
          brset 3,RAM1_0bf,L02FE        ; Branch to L02FE if Bit 3 is set at RAM1_0bf (Mn=1)
          bset 7,RAM1_0bf               ; Set Bit 7 at memory RAM1_0bf (Mn <- 1 ) 
          jsr L1AE4                     ; Jump to Subroutine at L1AE4             
L1B7A: 
          lda #$48                      ; Load Accumulator with value of Memory at #$48, A <- (#$48)
          bra L0300                     ; Branch Always (1 = 1)                   
          jmp L1AFE                     ; Unconditional Jump to L1AFE             
; 
L1B81: 
          brclr 3,RAM1_0b3,L0389        ; Branch to L0389 if Bit 3 Clear (Mn = 0) 
          bset 7,RAM1_0bf               ; Set Bit 7 at memory RAM1_0bf (Mn <- 1 ) 
          jmp L1AF6                     ; Unconditional Jump to L1AF6             
; 
          brclr 6,RAM1_0b9,L036E        ; Branch to L036E if Bit 6 Clear (Mn = 0) 
          jsr L1E81                     ; Jump to Subroutine at L1E81             
          lda #$48                      ; Load Accumulator with value of Memory at #$48, A <- (#$48)
          clrx                          ; Clear Index Register, X <- 0x00         
          jmp L1A75                     ; Unconditional Jump to L1A75             
; 
          bclr 6,RAM1_0bf               ; Clear bit 6 at RAM1_0bf                 
          brset 4,RAM1_0b3,L03A5        ; Branch to L03A5 if Bit 4 is set at RAM1_0b3 (Mn=1)
          brset 5,RAM1_0b6,L037E        ; Branch to L037E if Bit 5 is set at RAM1_0b6 (Mn=1)
          bsr L03C9                     ; Branch to Subroutine at L03C9           
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta STACK_0c2                 ; Store Accumulator in Memory at STACK_0c2
          bra L0375                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0bd                  ; Load Accumulator with value of Memory at RAM1_0bd, A <- (RAM1_0bd)
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          bne L03B1                     ; Branch to L03B1 if Not Equal (Z = 0);   
          lda RAM1_0bd                  ; Load Accumulator with value of Memory at RAM1_0bd, A <- (RAM1_0bd)
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          clr STACK_0c3                 ; Clear byte at STACK_0c3 <- 0x00         
          jsr L1E74                     ; Jump to Subroutine at L1E74             
          lda STACK_0c1                 ; Load Accumulator with value of Memory at STACK_0c1, A <- (STACK_0c1)
          cmp #$95                      ; Compare Accumulator with Memory Byte, (A) - (#$95)
          bne L03C3                     ; Branch to L03C3 if Not Equal (Z = 0);   
          clr STACK_0c1                 ; Clear byte at STACK_0c1 <- 0x00         
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          jmp L1E29                     ; Unconditional Jump to L1E29             
; 
          jsr L17AD                     ; Jump to Subroutine at L17AD             
          jmp L1ADA                     ; Unconditional Jump to L1ADA             
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          sta RAM1_0bd                  ; Store Accumulator in Memory at RAM1_0bd 
          ldx STACK_0c1                 ; Load Index Register with Memory Byte, X <- (STACK_0c1)
          jmp L1E38                     ; Unconditional Jump to L1E38             
; 
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
L1BD4: 
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$19                      ; Load Accumulator with value of Memory at #$19, A <- (#$19)
L1BD9: 
          bclr 6,RAM1_0b8               ; Clear bit 6 at RAM1_0b8                 
          bclr 5,RAM1_0b8               ; Clear bit 5 at RAM1_0b8                 
          bclr 4,RAM1_0b8               ; Clear bit 4 at RAM1_0b8                 
          bset 5,RAM1_0bc               ; Set Bit 5 at memory RAM1_0bc (Mn <- 1 ) 
          bset 3,RAM1_0b5               ; Set Bit 3 at memory RAM1_0b5 (Mn <- 1 ) 
          bclr 3,RAM1_0bb               ; Clear bit 3 at RAM1_0bb                 
L1BE5: 
          brclr 0,RAM1_0b6,L03EE        ; Branch to L03EE if Bit 0 Clear (Mn = 0) 
          brset 1,RAM1_0b6,L03EE        ; Branch to L03EE if Bit 1 is set at RAM1_0b6 (Mn=1)
          brset 2,RAM1_0b6,L03F0        ; Branch to L03F0 if Bit 2 is set at RAM1_0b6 (Mn=1)
          bclr 2,RAM1_0ba               ; Clear bit 2 at RAM1_0ba                 
          brclr 2,STACK_0c0,L03F6       ; Branch to L03F6 if Bit 2 Clear (Mn = 0) 
          bclr 2,STACK_0c0              ; Clear bit 2 at STACK_0c0                
          cmp X3FBB                     ; Compare Accumulator with Memory Byte, (A) - (X3FBB)
          clr STACK_0c5                 ; Clear byte at STACK_0c5 <- 0x00         
          jsr L1E7D                     ; Jump to Subroutine at L1E7D             
          bset 7,RAM1_0ba               ; Set Bit 7 at memory RAM1_0ba (Mn <- 1 ) 
          bset 7,STACK_0cb              ; Set Bit 7 at memory STACK_0cb (Mn <- 1 )
          bclr 6,RAM1_0bc               ; Clear bit 6 at RAM1_0bc                 
          brset 3,STACK_0c0,L0408       ; Branch to L0408 if Bit 3 is set at STACK_0c0 (Mn=1)
          bclr 4,STACK_0c0              ; Clear bit 4 at STACK_0c0                
          bclr 3,STACK_0c0              ; Clear bit 3 at STACK_0c0                
          bset 7,RAM1_0b5               ; Set Bit 7 at memory RAM1_0b5 (Mn <- 1 ) 
          bra L0392                     ; Branch Always (1 = 1)                   
; 
X1C0E: 
          eor #$11                      ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (#$11)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
; 
          db $75                        ; data? u,  ,  ,                          
; 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          brset 0,ACL,L03E4             ; Branch to L03E4 if Bit 0 is set at ACL (Mn=1)
          bclr 6,RAM1_084               ; Clear bit 6 at RAM1_084                 
          ldx #$C7                      ; Load Index Register with Memory Byte, X <- (#$C7)
          brset 3,RAM1_08e,L0421        ; Branch to L0421 if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 5,RAM1_069,L0423        ; Branch to L0423 if Bit 5 Clear (Mn = 0) 
          ldx #$E7                      ; Load Index Register with Memory Byte, X <- (#$E7)
          bset 7,RAM1_0bf               ; Set Bit 7 at memory RAM1_0bf (Mn <- 1 ) 
          bra L03D2                     ; Branch Always (1 = 1)                   
; 
          ldx RAM1_0b7                  ; Load Index Register with Memory Byte, X <- (RAM1_0b7)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$11                      ; Load Accumulator with value of Memory at #$11, A <- (#$11)
          bra L03E5                     ; Branch Always (1 = 1)                   
; 
          brset 3,STACK_0c1,L044D       ; Branch to L044D if Bit 3 is set at STACK_0c1 (Mn=1)
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          bset 0,RAM1_05b               ; Set Bit 0 at memory RAM1_05b (Mn <- 1 ) 
          cmp X115B                     ; Compare Accumulator with Memory Byte, (A) - (X115B)
          lda #$C1                      ; Load Accumulator with value of Memory at #$C1, A <- (#$C1)
          bsr L0484                     ; Branch to Subroutine at L0484           
          ldx #$86                      ; Load Index Register with Memory Byte, X <- (#$86)
          brclr 3,RAM1_0b6,L0446        ; Branch to L0446 if Bit 3 Clear (Mn = 0) 
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          lda #$18                      ; Load Accumulator with value of Memory at #$18, A <- (#$18)
          brclr 0,RAM1_05b,L03F0        ; Branch to L03F0 if Bit 0 Clear (Mn = 0) 
          bra L03D9                     ; Branch Always (1 = 1)                   
; 
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          bsr L0484                     ; Branch to Subroutine at L0484           
          jsr L1DCA                     ; Jump to Subroutine at L1DCA             
          jmp L1CF7                     ; Unconditional Jump to L1CF7             
          rts                           ; Return from Subroutine                  
; 
          brset 5,STACK_0c1,L0476       ; Branch to L0476 if Bit 5 is set at STACK_0c1 (Mn=1)
          bset 7,RAM1_0bf               ; Set Bit 7 at memory RAM1_0bf (Mn <- 1 ) 
          jsr L1D84                     ; Jump to Subroutine at L1D84             
          ldx #$A0                      ; Load Index Register with Memory Byte, X <- (#$A0)
          brset 2,STACK_0c2,L046E       ; Branch to L046E if Bit 2 is set at STACK_0c2 (Mn=1)
          lda #$6C                      ; Load Accumulator with value of Memory at #$6C, A <- (#$6C)
          brset 1,STACK_0c2,L0470       ; Branch to L0470 if Bit 1 is set at STACK_0c2 (Mn=1)
          ldx #$20                      ; Load Index Register with Memory Byte, X <- (#$20)
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
          jmp L1BD4                     ; Unconditional Jump to L1BD4             
          jmp L1D11                     ; Unconditional Jump to L1D11             
; 
          brset 5,RAM1_0b6,L0473        ; Branch to L0473 if Bit 5 is set at RAM1_0b6 (Mn=1)
          jsr L1E74                     ; Jump to Subroutine at L1E74             
L1C7C: 
          lda #$92                      ; Load Accumulator with value of Memory at #$92, A <- (#$92)
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          bra L0484                     ; Branch Always (1 = 1)                   
; 
L1C82: 
          ldx #$C8                      ; Load Index Register with Memory Byte, X <- (#$C8)
L1C84: 
          sta STACK_0c1                 ; Store Accumulator in Memory at STACK_0c1
          stx STACK_0c3                 ; Store Index Register In Memory at STACK_0c3
          jmp L147B                     ; Unconditional Jump to L147B             
; 
          brset 3,STACK_0c1,L044D       ; Branch to L044D if Bit 3 is set at STACK_0c1 (Mn=1)
          brset 5,STACK_0c1,L0476       ; Branch to L0476 if Bit 5 is set at STACK_0c1 (Mn=1)
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          ldx #$64                      ; Load Index Register with Memory Byte, X <- (#$64)
          brset 5,RAM1_0b6,L049C        ; Branch to L049C if Bit 5 is set at RAM1_0b6 (Mn=1)
          lda #$D3                      ; Load Accumulator with value of Memory at #$D3, A <- (#$D3)
L1C9A: 
          ldx #$FF                      ; Load Index Register with Memory Byte, X <- (#$FF)
          bsr L0484                     ; Branch to Subroutine at L0484           
          bclr 5,RAM1_0b5               ; Clear bit 5 at RAM1_0b5                 
          brset 3,STACK_0ce,L04AD       ; Branch to L04AD if Bit 3 is set at STACK_0ce (Mn=1)
          ldx #$AC                      ; Load Index Register with Memory Byte, X <- (#$AC)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bcc L04AD                     ; Branch to L04AD if C bit is cleared     
          bset 5,RAM1_0b5               ; Set Bit 5 at memory RAM1_0b5 (Mn <- 1 ) 
L1CAD: 
          jsr L1E8C                     ; Jump to Subroutine at L1E8C             
          eor STACK_0c0                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0c0)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          eor STACK_0c0                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0c0)
          sta STACK_0c0                 ; Store Accumulator in Memory at STACK_0c0
          lda RAM1_05b                  ; Load Accumulator with value of Memory at RAM1_05b, A <- (RAM1_05b)
          clrx                          ; Clear Index Register, X <- 0x00         
          jmp L1BD4                     ; Unconditional Jump to L1BD4             
; 
          lda #$60                      ; Load Accumulator with value of Memory at #$60, A <- (#$60)
          brclr 5,STACK_0c1,L04F3       ; Branch to L04F3 if Bit 5 Clear (Mn = 0) 
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          brset 7,RAM1_0b9,L04CD        ; Branch to L04CD if Bit 7 is set at RAM1_0b9 (Mn=1)
          brset 7,RAM1_0ba,L0484        ; Branch to L0484 if Bit 7 is set at RAM1_0ba (Mn=1)
          bset 5,RAM1_0bb               ; Set Bit 5 at memory RAM1_0bb (Mn <- 1 ) 
          brclr 1,RAM1_0ba,L04D7        ; Branch to L04D7 if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_0ba               ; Clear bit 1 at RAM1_0ba                 
          brclr 6,RAM1_0b5,L04D7        ; Branch to L04D7 if Bit 6 Clear (Mn = 0) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          brclr 3,RAM1_05d,L04E0        ; Branch to L04E0 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_05d               ; Clear bit 3 at RAM1_05d                 
          lda #$82                      ; Load Accumulator with value of Memory at #$82, A <- (#$82)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          lda #$C0                      ; Load Accumulator with value of Memory at #$C0, A <- (#$C0)
          brset 3,RAM1_0bb,L0482        ; Branch to L0482 if Bit 3 is set at RAM1_0bb (Mn=1)
          jsr L1E29                     ; Jump to Subroutine at L1E29             
          brset 4,RAM1_0bf,L04EF        ; Branch to L04EF if Bit 4 is set at RAM1_0bf (Mn=1)
          ldx #$2D                      ; Load Index Register with Memory Byte, X <- (#$2D)
          bra L0513                     ; Branch Always (1 = 1)                   
; 
          lda #$C7                      ; Load Accumulator with value of Memory at #$C7, A <- (#$C7)
          bra L0482                     ; Branch Always (1 = 1)                   
; 
          ldx #$1E                      ; Load Index Register with Memory Byte, X <- (#$1E)
          bsr L0484                     ; Branch to Subroutine at L0484           
L1CF7: 
          jsr L1E06                     ; Jump to Subroutine at L1E06             
          ldx RAM1_0b7                  ; Load Index Register with Memory Byte, X <- (RAM1_0b7)
          stx RAM2_027d                 ; Store Index Register In Memory at RAM2_027d
          beq L0509                     ; Branch to L0509 if Equal Z=1            
          brclr 7,RAM1_061,L0509        ; Branch to L0509 if Bit 7 Clear (Mn = 0) 
          ldx #$29                      ; Load Index Register with Memory Byte, X <- (#$29)
          lda #$1A                      ; Load Accumulator with value of Memory at #$1A, A <- (#$1A)
          cmp XAE09                     ; Compare Accumulator with Memory Byte, (A) - (XAE09)
          jmp L1BE5                     ; Unconditional Jump to L1BE5             
; 
          jsr L17BF                     ; Jump to Subroutine at L17BF             
L1D11: 
          ldx #$23                      ; Load Index Register with Memory Byte, X <- (#$23)
          lda #$95                      ; Load Accumulator with value of Memory at #$95, A <- (#$95)
          jmp L1C84                     ; Unconditional Jump to L1C84             
; 
X1D18: 
          dec RAM1_06f,x                ; Decrement Byte at RAM1_06f Byte = Byte - 1
          ror RAM1_09c                  ; Rotate Byte at RAM1_09c Right through Carry Bit, C -> [b7 >>>> b0] -> C
; 
          db $5E                        ; data? ^,  ,  ,                          
; 
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          brset 0,OCH1,L04C7            ; Branch to L04C7 if Bit 0 is set at OCH1 (Mn=1)
; 
          db $86                        ; data?  ,  ,  ,                          
; 
          brset 2,STACK_0ce,L0575       ; Branch to L0575 if Bit 2 is set at STACK_0ce (Mn=1)
          brset 7,RAM1_0b9,L0575        ; Branch to L0575 if Bit 7 is set at RAM1_0b9 (Mn=1)
          jsr L1E4F                     ; Jump to Subroutine at L1E4F             
          beq L0535                     ; Branch to L0535 if Equal Z=1            
          lda #$85                      ; Load Accumulator with value of Memory at #$85, A <- (#$85)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          sta STACK_0c2                 ; Store Accumulator in Memory at STACK_0c2
          rts                           ; Return from Subroutine                  
; 
          lda #$87                      ; Load Accumulator with value of Memory at #$87, A <- (#$87)
          clr RAM1_0be                  ; Clear byte at RAM1_0be <- 0x00          
          brset 2,STACK_0ce,L0575       ; Branch to L0575 if Bit 2 is set at STACK_0ce (Mn=1)
          brset 7,RAM1_0b9,L0575        ; Branch to L0575 if Bit 7 is set at RAM1_0b9 (Mn=1)
          brset 5,RAM1_080,L0520        ; Branch to L0520 if Bit 5 is set at RAM1_080 (Mn=1)
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          and #$2B                      ; Logical AND, A ← (A) && (#$2B)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L0520                     ; Branch to L0520 if Not Equal (Z = 0);   
L1D4B: 
          brset 2,RAM1_0b8,L0535        ; Branch to L0535 if Bit 2 is set at RAM1_0b8 (Mn=1)
          brset 4,STACK_0c0,L0520       ; Branch to L0520 if Bit 4 is set at STACK_0c0 (Mn=1)
          bset 2,RAM1_0ba               ; Set Bit 2 at memory RAM1_0ba (Mn <- 1 ) 
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          rts                           ; Return from Subroutine                  
; 
          clr STACK_0c1                 ; Clear byte at STACK_0c1 <- 0x00         
          bclr 4,RAM1_0b6               ; Clear bit 4 at RAM1_0b6                 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          lda #$87                      ; Load Accumulator with value of Memory at #$87, A <- (#$87)
          brclr 0,RAM1_0ba,L0563        ; Branch to L0563 if Bit 0 Clear (Mn = 0) 
          lda #$D7                      ; Load Accumulator with value of Memory at #$D7, A <- (#$D7)
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          bra L0515                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_0be,L056D        ; Branch to L056D if Bit 2 Clear (Mn = 0) 
          brset 4,RAM1_0ba,L0578        ; Branch to L0578 if Bit 4 is set at RAM1_0ba (Mn=1)
          brset 5,RAM1_0b6,L057B        ; Branch to L057B if Bit 5 is set at RAM1_0b6 (Mn=1)
          brset 4,RAM1_0bf,L0535        ; Branch to L0535 if Bit 4 is set at RAM1_0bf (Mn=1)
          lda #$86                      ; Load Accumulator with value of Memory at #$86, A <- (#$86)
          jmp L1C82                     ; Unconditional Jump to L1C82             
; 
          bclr 5,RAM1_0b6               ; Clear bit 5 at RAM1_0b6                 
          rts                           ; Return from Subroutine                  
          jmp L1B7A                     ; Unconditional Jump to L1B7A             
; 
          brclr 5,STACK_0c1,L0584       ; Branch to L0584 if Bit 5 Clear (Mn = 0) 
          jmp L185C                     ; Unconditional Jump to L185C             
; 
L1D84: 
          lda #$D3                      ; Load Accumulator with value of Memory at #$D3, A <- (#$D3)
          ldx #$FF                      ; Load Index Register with Memory Byte, X <- (#$FF)
          bra L0565                     ; Branch Always (1 = 1)                   
; 
L1D8A: 
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          rts                           ; Return from Subroutine                  
; 
          brclr 6,RAM1_0bf,L059B        ; Branch to L059B if Bit 6 Clear (Mn = 0) 
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          brclr 2,RAM1_0b8,L0598        ; Branch to L0598 if Bit 2 Clear (Mn = 0) 
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          jmp L1C39                     ; Unconditional Jump to L1C39             
; 
          brset 5,STACK_0c1,L05A5       ; Branch to L05A5 if Bit 5 is set at STACK_0c1 (Mn=1)
          lda #$A1                      ; Load Accumulator with value of Memory at #$A1, A <- (#$A1)
          ldx #$30                      ; Load Index Register with Memory Byte, X <- (#$30)
          jmp L1C84                     ; Unconditional Jump to L1C84             
; 
L1DA5: 
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          bne L05B6                     ; Branch to L05B6 if Not Equal (Z = 0);   
          brset 3,RAM1_0bf,L05B6        ; Branch to L05B6 if Bit 3 is set at RAM1_0bf (Mn=1)
          brset 7,RAM1_0b6,L05B6        ; Branch to L05B6 if Bit 7 is set at RAM1_0b6 (Mn=1)
          jsr L1A54                     ; Jump to Subroutine at L1A54             
          jsr L1E29                     ; Jump to Subroutine at L1E29             
          jmp L1C7C                     ; Unconditional Jump to L1C7C             
; 
          brset 6,RAM1_0bf,L05C5        ; Branch to L05C5 if Bit 6 is set at RAM1_0bf (Mn=1)
          brclr 5,STACK_0c1,L05C5       ; Branch to L05C5 if Bit 5 Clear (Mn = 0) 
          jmp L185C                     ; Unconditional Jump to L185C             
; 
          lda #$C3                      ; Load Accumulator with value of Memory at #$C3, A <- (#$C3)
          jmp L1C9A                     ; Unconditional Jump to L1C9A             
; 
L1DCA: 
          bsr L05D5                     ; Branch to Subroutine at L05D5           
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          sta RAM1_0b8                  ; Store Accumulator in Memory at RAM1_0b8 
          rts                           ; Return from Subroutine                  
; 
L1DD5: 
          bsr L05E4                     ; Branch to Subroutine at L05E4           
          add #$B3                      ; Add without Carry, A ← (A) + (#$B3)   
          jsr L38CB                     ; Jump to Subroutine at L38CB             
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          cmp #$70                      ; Compare Accumulator with Memory Byte, (A) - (#$70)
          bne L05E3                     ; Branch to L05E3 if Not Equal (Z = 0);   
          clra                          ; Clear byte Accumulator, A <- 0x00       
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          brclr 2,RAM1_0b8,L05F1        ; Branch to L05F1 if Bit 2 Clear (Mn = 0) 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          brclr 3,RAM1_0b8,L05F1        ; Branch to L05F1 if Bit 3 Clear (Mn = 0) 
          inca                          ; Increment Accumulator by 1,A++          
          rts                           ; Return from Subroutine                  
; 
L1DF2: 
          bsr L05E4                     ; Branch to Subroutine at L05E4           
          add #$BA                      ; Add without Carry, A ← (A) + (#$BA)   
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          jsr L38CB                     ; Jump to Subroutine at L38CB             
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          jsr L2617                     ; Jump to Subroutine at L2617             
          jsr L2664                     ; Jump to Subroutine at L2664             
          rts                           ; Return from Subroutine                  
; 
L1E06: 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          jsr L2616                     ; Jump to Subroutine at L2616             
          bne L0610                     ; Branch to L0610 if Not Equal (Z = 0);   
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
deca 
          brclr 2,RAM1_0b8,L0619        ; Branch to L0619 if Bit 2 Clear (Mn = 0) 
          brclr 3,RAM1_0b8,L0623        ; Branch to L0623 if Bit 3 Clear (Mn = 0) 
          bra L0621                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_0b8,L061E        ; Branch to L061E if Bit 1 Clear (Mn = 0) 
          add #$0E                      ; Add without Carry, A ← (A) + (#$0E)   
          brclr 0,RAM1_0b8,L0623        ; Branch to L0623 if Bit 0 Clear (Mn = 0) 
          add #$07                      ; Add without Carry, A ← (A) + (#$07)   
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$19                      ; Load Accumulator with value of Memory at #$19, A <- (#$19)
          rts                           ; Return from Subroutine                  
; 
L1E29: 
          clr RAM1_0bd                  ; Clear byte at RAM1_0bd <- 0x00          
          bclr 2,RAM1_0bb               ; Clear bit 2 at RAM1_0bb                 
          ldx #$B1                      ; Load Index Register with Memory Byte, X <- (#$B1)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          beq L0642                     ; Branch to L0642 if Equal Z=1            
L1E38: 
          ldx #$B1                      ; Load Index Register with Memory Byte, X <- (#$B1)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          brset 2,RAM1_0b8,L0640        ; Branch to L0640 if Bit 2 is set at RAM1_0b8 (Mn=1)
          bsr L0648                     ; Branch to Subroutine at L0648           
L1E42: 
          jsr L1DD5                     ; Jump to Subroutine at L1DD5             
L1E45: 
          brset 7,RAM1_0bb,L0628        ; Branch to L0628 if Bit 7 is set at RAM1_0bb (Mn=1)
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          jmp L38A0                     ; Unconditional Jump to L38A0             
; 
L1E4F: 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          brset 2,RAM1_0b8,L0666        ; Branch to L0666 if Bit 2 is set at RAM1_0b8 (Mn=1)
          brset 2,RAM1_0be,L0668        ; Branch to L0668 if Bit 2 is set at RAM1_0be (Mn=1)
          brset 5,RAM1_0b9,L0668        ; Branch to L0668 if Bit 5 is set at RAM1_0b9 (Mn=1)
L1E5A: 
          lda RAM1_0b5                  ; Load Accumulator with value of Memory at RAM1_0b5, A <- (RAM1_0b5)
          and #$4E                      ; Logical AND, A ← (A) && (#$4E)        
          brset 3,RAM1_08e,L0664        ; Branch to L0664 if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 6,RAM1_05f,L0666        ; Branch to L0666 if Bit 6 Clear (Mn = 0) 
          and #$BF                      ; Logical AND, A ← (A) && (#$BF)        
          bit #$40                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$40)
          rts                           ; Return from Subroutine                  
; 
L1E69: 
          bsr L064F                     ; Branch to Subroutine at L064F           
          bne L066F                     ; Branch to L066F if Not Equal (Z = 0);   
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_0b9                  ; Load Accumulator with value of Memory at RAM1_0b9, A <- (RAM1_0b9)
          and #$38                      ; Logical AND, A ← (A) && (#$38)        
          rts                           ; Return from Subroutine                  
; 
L1E74: 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          beq L067C                     ; Branch to L067C if Equal Z=1            
          clr RAM1_0b6                  ; Clear byte at RAM1_0b6 <- 0x00          
          bset 6,STACK_0cb              ; Set Bit 6 at memory STACK_0cb (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L1E7D: 
          clr RAM1_0b9                  ; Clear byte at RAM1_0b9 <- 0x00          
L1E7F: 
          bclr 6,RAM1_0b9               ; Clear bit 6 at RAM1_0b9                 
L1E81: 
          bset 5,STACK_0cb              ; Set Bit 5 at memory STACK_0cb (Mn <- 1 )
          bclr 5,RAM1_0b9               ; Clear bit 5 at RAM1_0b9                 
          bclr 4,RAM1_0b9               ; Clear bit 4 at RAM1_0b9                 
L1E87: 
          clr RAM1_0be                  ; Clear byte at RAM1_0be <- 0x00          
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          rts                           ; Return from Subroutine                  
; 
L1E8C: 
          clr RAM1_05b                  ; Clear byte at RAM1_05b <- 0x00          
          brset 3,RAM1_0b6,L0693        ; Branch to L0693 if Bit 3 is set at RAM1_0b6 (Mn=1)
          bset 5,RAM1_05b               ; Set Bit 5 at memory RAM1_05b (Mn <- 1 ) 
          brclr 5,RAM1_0b5,L0698        ; Branch to L0698 if Bit 5 Clear (Mn = 0) 
          bset 2,RAM1_05b               ; Set Bit 2 at memory RAM1_05b (Mn <- 1 ) 
          brclr 2,RAM1_0b8,L069F        ; Branch to L069F if Bit 2 Clear (Mn = 0) 
          bset 7,RAM1_05b               ; Set Bit 7 at memory RAM1_05b (Mn <- 1 ) 
          bra L06B0                     ; Branch Always (1 = 1)                   
; 
          bset 6,RAM1_05b               ; Set Bit 6 at memory RAM1_05b (Mn <- 1 ) 
          lda RAM1_0b7                  ; Load Accumulator with value of Memory at RAM1_0b7, A <- (RAM1_0b7)
          cmp #$41                      ; Compare Accumulator with Memory Byte, (A) - (#$41)
          bhi L06AE                     ; Branch to L06AE if Higher C v Z = 0     
          cmp #$12                      ; Compare Accumulator with Memory Byte, (A) - (#$12)
          bcs L06B0                     ; Branch to L06B0 if C = 1                
          bset 0,RAM1_05b               ; Set Bit 0 at memory RAM1_05b (Mn <- 1 ) 
          cmp X125B                     ; Compare Accumulator with Memory Byte, (A) - (X125B)
          lda RAM1_05b                  ; Load Accumulator with value of Memory at RAM1_05b, A <- (RAM1_05b)
          rts                           ; Return from Subroutine                  
; 
L1EB3: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM2_0274                 ; Load Accumulator with value of Memory at RAM2_0274, A <- (RAM2_0274)
          bsr L06D0                     ; Branch to Subroutine at L06D0           
          lda RAM2_0273                 ; Load Accumulator with value of Memory at RAM2_0273, A <- (RAM2_0273)
          bsr L06D0                     ; Branch to Subroutine at L06D0           
          lda RAM2_0272                 ; Load Accumulator with value of Memory at RAM2_0272, A <- (RAM2_0272)
          bsr L06D0                     ; Branch to Subroutine at L06D0           
          lda #$2E                      ; Load Accumulator with value of Memory at #$2E, A <- (#$2E)
          sta STACK_0de                 ; Store Accumulator in Memory at STACK_0de
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          sta STACK_0e0                 ; Store Accumulator in Memory at STACK_0e0
          lda #$52                      ; Load Accumulator with value of Memory at #$52, A <- (#$52)
          sta STACK_0e1                 ; Store Accumulator in Memory at STACK_0e1
          rts                           ; Return from Subroutine                  
; 
          sta RAM1_05b                  ; Store Accumulator in Memory at RAM1_05b 
          bsr L06D9                     ; Branch to Subroutine at L06D9           
          lda RAM1_05b                  ; Load Accumulator with value of Memory at RAM1_05b, A <- (RAM1_05b)
          jsr L261E                     ; Jump to Subroutine at L261E             
          jsr L2617                     ; Jump to Subroutine at L2617             
          add #$30                      ; Add without Carry, A ← (A) + (#$30)   
          sta STACK_0da,x               ; Store Accumulator in Memory at STACK_0da
          incx                          ; Increment Index register by 1,X++       
          rts                           ; Return from Subroutine                  
; 
L1EE2: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 2,RAM1_05f,L06EE        ; Branch to L06EE if Bit 2 Clear (Mn = 0) 
          lda RAM2_02a5                 ; Load Accumulator with value of Memory at RAM2_02a5, A <- (RAM2_02a5)
          ldx PLMB                      ; Load Index Register with Memory Byte, X <- (PLMB)
          jsr L246E                     ; Jump to Subroutine at L246E             
          sta PLMB                      ; Store Accumulator in Memory at PLMB     
          jmp L37B0                     ; Unconditional Jump to L37B0             
L1EF3: 
          rts                           ; Return from Subroutine                  
; 
L1EF4: 
          ldx #$CD                      ; Load Index Register with Memory Byte, X <- (#$CD)
          jsr L265E                     ; Jump to Subroutine at L265E             
          bne L0709                     ; Branch to L0709 if Not Equal (Z = 0);   
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_0254                 ; Store Accumulator in Memory at RAM2_0254
          sta RAM2_0255                 ; Store Accumulator in Memory at RAM2_0255
          sta RAM2_0256                 ; Store Accumulator in Memory at RAM2_0256
          bset 4,RAM1_09e               ; Set Bit 4 at memory RAM1_09e (Mn <- 1 ) 
          bra L0719                     ; Branch Always (1 = 1)                   
; 
          ldx #$CC                      ; Load Index Register with Memory Byte, X <- (#$CC)
          jsr L265E                     ; Jump to Subroutine at L265E             
          bpl L0712                     ; Branch to L0712 if Plus N = 0           
          bclr 1,STACK_0cb              ; Clear bit 1 at STACK_0cb                
          bne L071B                     ; Branch to L071B if Not Equal (Z = 0);   
          dec ,x                        ; Decrement Byte at  Byte = Byte - 1      
          bclr 5,STACK_0c5              ; Clear bit 5 at STACK_0c5                
          bclr 1,STACK_0cb              ; Clear bit 1 at STACK_0cb                
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L1F1C: 
          brset 6,STACK_0c6,L0731       ; Branch to L0731 if Bit 6 is set at STACK_0c6 (Mn=1)
          brset 5,STACK_0c6,L0733       ; Branch to L0733 if Bit 5 is set at STACK_0c6 (Mn=1)
          brclr 7,STACK_0c6,L071B       ; Branch to L071B if Bit 7 Clear (Mn = 0) 
          brset 2,STACK_0cb,L0731       ; Branch to L0731 if Bit 2 is set at STACK_0cb (Mn=1)
          lda STACK_0cc                 ; Load Accumulator with value of Memory at STACK_0cc, A <- (STACK_0cc)
          cmp #$FF                      ; Compare Accumulator with Memory Byte, (A) - (#$FF)
          beq L0731                     ; Branch to L0731 if Equal Z=1            
          bclr 7,STACK_0c6              ; Clear bit 7 at STACK_0c6                
          rts                           ; Return from Subroutine                  
; 
          bset 7,RAM1_050               ; Set Bit 7 at memory RAM1_050 (Mn <- 1 ) 
          lda RAM1_09e                  ; Load Accumulator with value of Memory at RAM1_09e, A <- (RAM1_09e)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          bne L07AC                     ; Branch to L07AC if Not Equal (Z = 0);   
          lda STACK_0c6                 ; Load Accumulator with value of Memory at STACK_0c6, A <- (STACK_0c6)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          cmp #$BA                      ; Compare Accumulator with Memory Byte, (A) - (#$BA)
          bne L0749                     ; Branch to L0749 if Not Equal (Z = 0);   
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          brclr 5,STACK_0c6,L0753       ; Branch to L0753 if Bit 5 Clear (Mn = 0) 
          bset 4,RAM1_09e               ; Set Bit 4 at memory RAM1_09e (Mn <- 1 ) 
          bset 5,RAM1_09e               ; Set Bit 5 at memory RAM1_09e (Mn <- 1 ) 
          bclr 5,STACK_0c6              ; Clear bit 5 at STACK_0c6                
          rts                           ; Return from Subroutine                  
; 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bmi L0758                     ; Branch to L0758 if Minus N = 1          
          bne L075D                     ; Branch to L075D if Not Equal (Z = 0);   
          brset 1,STACK_0cb,L07AC       ; Branch to L07AC if Bit 1 is set at STACK_0cb (Mn=1)
          beq L075F                     ; Branch to L075F if Equal Z=1            
          sta STACK_0cc                 ; Store Accumulator in Memory at STACK_0cc
          clr STACK_0c6                 ; Clear byte at STACK_0c6 <- 0x00         
          lda STACK_0c7                 ; Load Accumulator with value of Memory at STACK_0c7, A <- (STACK_0c7)
          bpl L07AD                     ; Branch to L07AD if Plus N = 0           
          brclr 6,STACK_0c7,L07C4       ; Branch to L07C4 if Bit 6 Clear (Mn = 0) 
          and #$0E                      ; Logical AND, A ← (A) && (#$0E)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X1FEB,x                   ; Load Accumulator with value of Memory at X1FEB, A <- (X1FEB)
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          lda X1FEC,x                   ; Load Accumulator with value of Memory at X1FEC, A <- (X1FEC)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          lda X1FFB,x                   ; Load Accumulator with value of Memory at X1FFB, A <- (X1FFB)
          sta RAM2_0256                 ; Store Accumulator in Memory at RAM2_0256
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          beq L0793                     ; Branch to L0793 if Equal Z=1            
deca 
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          ldx X1FEA                     ; Load Index Register with Memory Byte, X <- (X1FEA)
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          lda X1FE9                     ; Load Accumulator with value of Memory at X1FE9, A <- (X1FE9)
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          beq L0790                     ; Branch to L0790 if Equal Z=1            
          bset 0,RAM1_059               ; Set Bit 0 at memory RAM1_059 (Mn <- 1 ) 
          jsr L2679                     ; Jump to Subroutine at L2679             
          brclr 5,STACK_0c7,L0799       ; Branch to L0799 if Bit 5 Clear (Mn = 0) 
          bset 6,RAM1_09e               ; Set Bit 6 at memory RAM1_09e (Mn <- 1 ) 
          cmp X1E9E                     ; Compare Accumulator with Memory Byte, (A) - (X1E9E)
          brclr 7,RAM1_050,L07AC        ; Branch to L07AC if Bit 7 Clear (Mn = 0) 
          bclr 2,STACK_0cb              ; Clear bit 2 at STACK_0cb                
          lda STACK_0ce                 ; Load Accumulator with value of Memory at STACK_0ce, A <- (STACK_0ce)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bne L07AC                     ; Branch to L07AC if Not Equal (Z = 0);   
          eor STACK_0ce                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0ce)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          rts                           ; Return from Subroutine                  
; 
          ldx #$61                      ; Load Index Register with Memory Byte, X <- (#$61)
          stx RAM2_0256                 ; Store Index Register In Memory at RAM2_0256
          sta RAM2_0257                 ; Store Accumulator in Memory at RAM2_0257
          cmp #$70                      ; Compare Accumulator with Memory Byte, (A) - (#$70)
          bcs L0799                     ; Branch to L0799 if C = 1                
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X2003,x                   ; Load Accumulator with value of Memory at X2003, A <- (X2003)
          sta RAM2_0257                 ; Store Accumulator in Memory at RAM2_0257
          bra L0796                     ; Branch Always (1 = 1)                   
; 
          ldx STACK_0c8                 ; Load Index Register with Memory Byte, X <- (STACK_0c8)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          bne L07D3                     ; Branch to L07D3 if Not Equal (Z = 0);   
          bclr 7,RAM1_050               ; Clear bit 7 at RAM1_050                 
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          bpl L07D3                     ; Branch to L07D3 if Plus N = 0           
          negx                          ; Negate Byte of Index register(Two’s Complement), X = 0x00 - (X)
          inca                          ; Increment Accumulator by 1,A++          
          jsr L261E                     ; Jump to Subroutine at L261E             
          sta RAM2_0257                 ; Store Accumulator in Memory at RAM2_0257
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          add RAM2_0257                 ; Add without Carry, A ← (A) + (RAM2_0257)
          sta RAM2_0257                 ; Store Accumulator in Memory at RAM2_0257
          lda #$71                      ; Load Accumulator with value of Memory at #$71, A <- (#$71)
          sta RAM2_0256                 ; Store Accumulator in Memory at RAM2_0256
          bra L0793                     ; Branch Always (1 = 1)                   
; 
X1FE9: 
          brset 1,RAM1_057,L07EC        ; Branch to L07EC if Bit 1 is set at RAM1_057 (Mn=1)
X1FEC: 
          eor RAM2_0280                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM2_0280)
          brset 1,RAM1_057,L07F4        ; Branch to L07F4 if Bit 1 is set at RAM1_057 (Mn=1)
; 
          db $9E                        ; data?  ,  ,  ,                          
; 
          brset 1,RAM1_060,L07F6        ; Branch to L07F6 if Bit 1 is set at RAM1_060 (Mn=1)
          brset 0,PortA,L0065           ; Branch to L0065 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 1,RAM1_088,L002E        ; Branch to L002E if Bit 1 is set at RAM1_088 (Mn=1)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
; 
          db $92                        ; data?  ,  ,  ,                          
; 
          sbc #$B0                      ; Subtract Memory Byte #$B0 and Carry Bit from Accumulator, A ←  (A) – (#$B0) – (C)
          cmp X0048,x                   ; Compare Accumulator with Memory Byte, (A) - (X0048)
X2003: 
          bclr 2,SCCR1                  ; Clear bit CPOL at SCCR1                 
          brset 0,PortA,L0008           ; Branch to L0008 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000B           ; Branch to L000B if Bit PANEL_STATUS is set at PortA (Mn=1)
L200B: 
          brset 6,RAM1_069,L0011        ; Branch to L0011 if Bit 6 is set at RAM1_069 (Mn=1)
          brset 0,RAM1_080,L0030        ; Branch to L0030 if Bit 0 is set at RAM1_080 (Mn=1)
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cmp #$19                      ; Compare Accumulator with Memory Byte, (A) - (#$19)
          bcs L001C                     ; Branch to L001C if C = 1                
          bclr 3,RAM1_05d               ; Clear bit 3 at RAM1_05d                 
          cmp #$D5                      ; Compare Accumulator with Memory Byte, (A) - (#$D5)
          bcs L0025                     ; Branch to L0025 if C = 1                
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          bset 6,RAM1_069               ; Set Bit 6 at memory RAM1_069 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          cmp #$D2                      ; Compare Accumulator with Memory Byte, (A) - (#$D2)
          bhi L0030                     ; Branch to L0030 if Higher C v Z = 0     
          brclr 6,RAM1_069,L0030        ; Branch to L0030 if Bit 6 Clear (Mn = 0) 
          bclr 6,RAM1_069               ; Clear bit 6 at RAM1_069                 
          bclr 0,RAM1_080               ; Clear bit 0 at RAM1_080                 
          rts                           ; Return from Subroutine                  
; 
L2031: 
          jsr L2136                     ; Jump to Subroutine at L2136             
          brclr 7,Miscell,L005A         ; Branch to L005A if Bit POR Clear (Mn = 0)
          jsr L210B                     ; Jump to Subroutine at L210B             
          ldx #$14                      ; Load Index Register with Memory Byte, X <- (#$14)
          jsr L20D2                     ; Jump to Subroutine at L20D2             
          bclr 2,DDRC                   ; Clear bit WR_SP at DDRC                 
          bclr 3,DDRC                   ; Clear bit RD_SP at DDRC                 
          jsr L2643                     ; Jump to Subroutine at L2643             
          bset 5,RAM1_069               ; Set Bit 5 at memory RAM1_069 (Mn <- 1 ) 
          lda PortC                     ; Load Accumulator with value of Memory at PortC, A <- (PortC)
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
          bne L0050                     ; Branch to L0050 if Not Equal (Z = 0);   
          bclr 5,RAM1_069               ; Clear bit 5 at RAM1_069                 
          bset 2,DDRC                   ; Set Bit WR_SP at memory DDRC (Mn <- 1 ) 
          bset 3,DDRC                   ; Set Bit RD_SP at memory DDRC (Mn <- 1 ) 
          bclr 7,Miscell                ; Clear bit POR at Miscell                
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_08c                  ; Store Accumulator in Memory at RAM1_08c 
L205A: 
          lda ACH                       ; Load Accumulator with value of Memory at ACH, A <- (ACH)
          add #$14                      ; Add without Carry, A ← (A) + (#$14)   
          sta OCH2                      ; Store Accumulator in Memory at OCH2     
          lda TSR                       ; Load Accumulator with value of Memory at TSR, A <- (TSR)
          clr OCL2                      ; Clear byte at OCL2 <- 0x00              
          rts                           ; Return from Subroutine                  
; 
L2065: 
          bsr L009E                     ; Branch to Subroutine at L009E           
          bsr L00B4                     ; Branch to Subroutine at L00B4           
L2069: 
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          brclr 6,RAM1_05f,L0072        ; Branch to L0072 if Bit 6 Clear (Mn = 0) 
          lda #$31                      ; Load Accumulator with value of Memory at #$31, A <- (#$31)
          bset 0,PortB                  ; Set Bit ENA_12V_ANTENE at memory PortB (Mn <- 1 )
          sta DDRB                      ; Store Accumulator in Memory at DDRB     
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta DDRC                      ; Store Accumulator in Memory at DDRC     
          rts                           ; Return from Subroutine                  
; 
L2079: 
          brset 2,PortB,L0090           ; Branch to L0090 if Bit ENA_12V_CDC is set at PortB (Mn=1)
          bset 2,PortB                  ; Set Bit ENA_12V_CDC at memory PortB (Mn <- 1 )
          ldx #$08                      ; Load Index Register with Memory Byte, X <- (#$08)
          bra L008E                     ; Branch Always (1 = 1)                   
; 
L2082: 
          brset 0,PortC,L0090           ; Branch to L0090 if Bit ENA_8V is set at PortC (Mn=1)
          bset 0,PortC                  ; Set Bit ENA_8V at memory PortC (Mn <- 1 )
          brset 6,RAM1_05f,L0090        ; Branch to L0090 if Bit 6 is set at RAM1_05f (Mn=1)
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          bsr L00D2                     ; Branch to Subroutine at L00D2           
          lda #$2C                      ; Load Accumulator with value of Memory at #$2C, A <- (#$2C)
          sta SCCR2                     ; Store Accumulator in Memory at SCCR2    
          lda X215B                     ; Load Accumulator with value of Memory at X215B, A <- (X215B)
          sta BAUD                      ; Store Accumulator in Memory at BAUD     
          lda SCSR                      ; Load Accumulator with value of Memory at SCSR, A <- (SCSR)
          lda SCDR                      ; Load Accumulator with value of Memory at SCDR, A <- (SCDR)
          rts                           ; Return from Subroutine                  
; 
L209E: 
          bclr 4,RAM1_061               ; Clear bit 4 at RAM1_061                 
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          brset 2,TCR,L00A8             ; Branch to L00A8 if Bit OLV2 is set at TCR (Mn=1)
          brclr 2,PortB,L00B2           ; Branch to L00B2 if Bit ENA_12V_CDC Clear (Mn = 0)
          ldx #$32                      ; Load Index Register with Memory Byte, X <- (#$32)
          bsr L00D2                     ; Branch to Subroutine at L00D2           
          bclr 2,PortB                  ; Clear bit ENA_12V_CDC at PortB          
          ldx #$05                      ; Load Index Register with Memory Byte, X <- (#$05)
          bsr L00D2                     ; Branch to Subroutine at L00D2           
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
L20B4: 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          jsr L2633                     ; Jump to Subroutine at L2633             
          clr SCCR2                     ; Clear byte at SCCR2 <- 0x00             
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          sta DDRA                      ; Store Accumulator in Memory at DDRA     
          clr PortA                     ; Clear byte at PortA <- 0x00             
          bclr 6,PortB                  ; Clear bit PANEL_RESET at PortB          
          bclr 5,RAM1_061               ; Clear bit 5 at RAM1_061                 
          brclr 0,PortC,L00B2           ; Branch to L00B2 if Bit ENA_8V Clear (Mn = 0)
          bclr 0,PortC                  ; Clear bit ENA_8V at PortC               
          brclr 4,Miscell,L010A         ; Branch to L010A if Bit INTE Clear (Mn = 0)
          ldx #$32                      ; Load Index Register with Memory Byte, X <- (#$32)
          bsr L00D2                     ; Branch to Subroutine at L00D2           
          rts                           ; Return from Subroutine                  
; 
L20D2: 
          sei                           ; Set Interrupt Mask, I ← 1);           
          bclr 7,RAM1_08f               ; Clear bit 7 at RAM1_08f                 
          brclr 1,PortC,L00DB           ; Branch to L00DB if Bit WDOG_TEL Clear (Mn = 0)
          bclr 1,PortC                  ; Clear bit WDOG_TEL at PortC             
          cmp X1202                     ; Compare Accumulator with Memory Byte, (A) - (X1202)
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          bne L00F4                     ; Branch to L00F4 if Not Equal (Z = 0);   
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 2,RAM1_05f,L00F0        ; Branch to L00F0 if Bit 2 Clear (Mn = 0) 
          lda RAM2_02a5                 ; Load Accumulator with value of Memory at RAM2_02a5, A <- (RAM2_02a5)
          ldx PLMB                      ; Load Index Register with Memory Byte, X <- (PLMB)
          jsr L246E                     ; Jump to Subroutine at L246E             
          sta PLMB                      ; Store Accumulator in Memory at PLMB     
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          jsr L2631                     ; Jump to Subroutine at L2631             
decx 
          bpl L00D5                     ; Branch to L00D5 if Plus N = 0           
          bset 2,STACK_0d6              ; Set Bit 2 at memory STACK_0d6 (Mn <- 1 )
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
          bset 7,RAM1_096               ; Set Bit 7 at memory RAM1_096 (Mn <- 1 ) 
          brclr 0,PortC,L0109           ; Branch to L0109 if Bit ENA_8V Clear (Mn = 0)
          brclr 7,RAM1_08f,L0109        ; Branch to L0109 if Bit 7 Clear (Mn = 0) 
          jmp L04ED                     ; Unconditional Jump to L04ED             
; 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
L210B: 
          ldx #$90                      ; Load Index Register with Memory Byte, X <- (#$90)
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          clr X004F,x                   ; Clear byte at X004F <- 0x00             
          sta BOT1_024f,x               ; Store Accumulator in Memory at BOT1_024f
decx 
          bne L010F                     ; Branch to L010F if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L2118: 
          brclr 5,DDRB,L0136            ; Branch to L0136 if Bit RESET_SLAVE Clear (Mn = 0)
          lda X2152                     ; Load Accumulator with value of Memory at X2152, A <- (X2152)
          sta DDRA                      ; Store Accumulator in Memory at DDRA     
          lda X2153                     ; Load Accumulator with value of Memory at X2153, A <- (X2153)
          sta DDRB                      ; Store Accumulator in Memory at DDRB     
          lda X2154                     ; Load Accumulator with value of Memory at X2154, A <- (X2154)
          sta DDRC                      ; Store Accumulator in Memory at DDRC     
          bset 7,TCR                    ; Set Bit ICIE at memory TCR (Mn <- 1 )   
          bset 6,TCR                    ; Set Bit OCIE at memory TCR (Mn <- 1 )   
          bset 5,TCR                    ; Set Bit TOIE at memory TCR (Mn <- 1 )   
          lda X215A                     ; Load Accumulator with value of Memory at X215A, A <- (X215A)
          sta Miscell                   ; Store Accumulator in Memory at Miscell  
          rts                           ; Return from Subroutine                  
; 
L2136: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X214E,x                   ; Load Accumulator with value of Memory at X214E, A <- (X214E)
          sta ,x                        ; Store Accumulator in Memory at          
          incx                          ; Increment Index register by 1,X++       
cpx #$13 
          bmi L0137                     ; Branch to L0137 if Minus N = 1          
          rts                           ; Return from Subroutine                  
; 
L2141: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X2161,x                   ; Load Accumulator with value of Memory at X2161, A <- (X2161)
          sta ,x                        ; Store Accumulator in Memory at          
          incx                          ; Increment Index register by 1,X++       
cpx #$13 
          bmi L0142                     ; Branch to L0142 if Minus N = 1          
          jmp L205A                     ; Unconditional Jump to L205A             
; 
X214E: 
          stx ,x                        ; Store Index Register In Memory at       
          sub STACK_0fc                 ; Subtract Memory Byte from Accumulator , A ← (A) – (STACK_0fc)
          brset 0,DDRA,L0153            ; Branch to L0153 if Bit PANEL_STATUS is set at DDRA (Mn=1)
X2154: 
          brclr 7,X0040,L0157           ; Branch to L0157 if Bit 7 Clear (Mn = 0) 
          bra L0159                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_0bc,L011C        ; Branch to L011C if Bit 0 is set at RAM1_0bc (Mn=1)
          brset 0,X002C,L015F           ; Branch to L015F if Bit 0 is set at X002C (Mn=1)
          brset 0,STACK_0fa,L015A       ; Branch to L015A if Bit 0 is set at STACK_0fa (Mn=1)
          eor STACK_0fe                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0fe)
          brset 0,EEPROM_ECLK_control,L0198 ; Branch to L0198 if Bit E1PGM is set at EEPROM_ECLK_control (Mn=1)
          brset 1,X0040,L016A           ; Branch to L016A if Bit 1 is set at X0040 (Mn=1)
          bra L016C                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_0bc,L012F        ; Branch to L012F if Bit 0 is set at RAM1_0bc (Mn=1)
          brset 0,X002C,L0172           ; Branch to L0172 if Bit 0 is set at X002C (Mn=1)
          brset 0,STACK_0fa,L0182       ; Branch to L0182 if Bit 0 is set at STACK_0fa (Mn=1)
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          asr DDRB                      ; Arithmetic Shift Right DDRB, b7 -> [b7 >>>> b0] -> C
          ldx X3402                     ; Load Index Register with Memory Byte, X <- (X3402)
          ldx X3101                     ; Load Index Register with Memory Byte, X <- (X3101)
          ldx X2ECC                     ; Load Index Register with Memory Byte, X <- (X2ECC)
          brn L013E                     ; Branch Never (1 = 0)                    
L2183: 
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          ldx #$81                      ; Load Index Register with Memory Byte, X <- (#$81)
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          bcc L01AE                     ; Branch to L01AE if C bit is cleared     
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          bne L0194                     ; Branch to L0194 if Not Equal (Z = 0);   
          bset 4,STACK_0ce              ; Set Bit 4 at memory STACK_0ce (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L019D                     ; Branch to L019D if Not Equal (Z = 0);   
          bset 5,STACK_0ce              ; Set Bit 5 at memory STACK_0ce (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          ldx #$08                      ; Load Index Register with Memory Byte, X <- (#$08)
          cmp XAE01                     ; Compare Accumulator with Memory Byte, (A) - (XAE01)
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          stx STACK_0d0                 ; Store Index Register In Memory at STACK_0d0
          bset 6,STACK_0ce              ; Set Bit 6 at memory STACK_0ce (Mn <- 1 )
          bset 7,RAM1_094               ; Set Bit 7 at memory RAM1_094 (Mn <- 1 ) 
          bclr 6,RAM1_0b5               ; Clear bit 6 at RAM1_0b5                 
          rts                           ; Return from Subroutine                  
; 
          lda #$48                      ; Load Accumulator with value of Memory at #$48, A <- (#$48)
          sta RAM1_09f                  ; Store Accumulator in Memory at RAM1_09f 
          ldx #$71                      ; Load Index Register with Memory Byte, X <- (#$71)
          lda #$41                      ; Load Accumulator with value of Memory at #$41, A <- (#$41)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          bra L01A4                     ; Branch Always (1 = 1)                   
; 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X21D5,x                   ; Load Accumulator with value of Memory at X21D5, A <- (X21D5)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X21D4,x                   ; Load Accumulator with value of Memory at X21D4, A <- (X21D4)
          beq L01D3                     ; Branch to L01D3 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L01BC                     ; Branch to L01BC if Not Equal (Z = 0);   
          ldx X21D3,x                   ; Load Index Register with Memory Byte, X <- (X21D3)
          jsr L2183,x ;INFO: index jump ; Jump to Subroutine at L2183             
          bclr 6,RAM1_05d               ; Clear bit 6 at RAM1_05d                 
X21D3: 
          rts                           ; Return from Subroutine                  
; 
X21D4: 
          sub PortA,x                   ; Subtract Memory Byte from Accumulator , A ← (A) – (PortA)
          add OCL2,x                    ; Add without Carry, A ← (A) + (OCL2)   
          eor X002C,x                   ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (X002C)
          brclr 3,X002C,L01DD           ; Branch to L01DD if Bit 3 Clear (Mn = 0) 
L21DD: 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          eor TCR                       ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (TCR)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          bset 3,RAM1_076               ; Set Bit 3 at memory RAM1_076 (Mn <- 1 ) 
          lda ICH1                      ; Load Accumulator with value of Memory at ICH1, A <- (ICH1)
          sta RAM1_06d                  ; Store Accumulator in Memory at RAM1_06d 
          lda ICL1                      ; Load Accumulator with value of Memory at ICL1, A <- (ICL1)
          sta RAM1_06e                  ; Store Accumulator in Memory at RAM1_06e 
          brclr 4,RAM1_05e,L01F5        ; Branch to L01F5 if Bit 4 Clear (Mn = 0) 
          brset 1,TCR,L0224             ; Branch to L0224 if Bit IEDG1 is set at TCR (Mn=1)
          bra L0211                     ; Branch Always (1 = 1)                   
; 
          sub RAM1_070                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_070)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_06d                  ; Load Accumulator with value of Memory at RAM1_06d, A <- (RAM1_06d)
          sbc RAM1_06f                  ; Subtract Memory Byte RAM1_06f and Carry Bit from Accumulator, A ←  (A) – (RAM1_06f) – (C)
          bit #$E0                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$E0)
          bne L0211                     ; Branch to L0211 if Not Equal (Z = 0);   
          brset 1,Miscell,L020E         ; Branch to L020E if Bit SM is set at Miscell (Mn=1)
          brclr 1,TCR,L020E             ; Branch to L020E if Bit IEDG1 Clear (Mn = 0)
          sta RAM1_071                  ; Store Accumulator in Memory at RAM1_071 
          stx RAM1_072                  ; Store Index Register In Memory at RAM1_072
          bclr 0,RAM1_076               ; Clear bit 0 at RAM1_076                 
          bra L021C                     ; Branch Always (1 = 1)                   
; 
          jsr L227E                     ; Jump to Subroutine at L227E             
          lda RAM1_06e                  ; Load Accumulator with value of Memory at RAM1_06e, A <- (RAM1_06e)
          sta RAM1_070                  ; Store Accumulator in Memory at RAM1_070 
          lda RAM1_06d                  ; Load Accumulator with value of Memory at RAM1_06d, A <- (RAM1_06d)
          sta RAM1_06f                  ; Store Accumulator in Memory at RAM1_06f 
          brset 4,RAM1_05e,L0222        ; Branch to L0222 if Bit 4 is set at RAM1_05e (Mn=1)
          brset 5,PortD,L0225           ; Branch to L0225 if Bit BEL is set at PortD (Mn=1)
          brclr 1,TCR,L0228             ; Branch to L0228 if Bit IEDG1 Clear (Mn = 0)
          bclr 4,RAM1_05e               ; Clear bit 4 at RAM1_05e                 
          rts                           ; Return from Subroutine                  
; 
          brclr 1,TCR,L0224             ; Branch to L0224 if Bit IEDG1 Clear (Mn = 0)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          eor TCR                       ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (TCR)
          sta TCR                       ; Store Accumulator in Memory at TCR      
          lda #$10                      ; Load Accumulator with value of Memory at #$10, A <- (#$10)
          add RAM1_06e                  ; Add without Carry, A ← (A) + (RAM1_06e)
          sta RAM1_06e                  ; Store Accumulator in Memory at RAM1_06e 
          bcc L0238                     ; Branch to L0238 if C bit is cleared     
X2236: 
          inc RAM1_06d                  ; Increment Byte RAM1_06d, Byte = Byte + 1
          lda ICL1                      ; Load Accumulator with value of Memory at ICL1, A <- (ICL1)
          bra L01ED                     ; Branch Always (1 = 1)                   
; 
L223C: 
          brclr 3,RAM1_076,L0242        ; Branch to L0242 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_076               ; Clear bit 3 at RAM1_076                 
          rts                           ; Return from Subroutine                  
; 
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
          bclr 1,TCR                    ; Clear bit IEDG1 at TCR                  
          lda ICL1                      ; Load Accumulator with value of Memory at ICL1, A <- (ICL1)
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          add RAM1_076                  ; Add without Carry, A ← (A) + (RAM1_076)
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          and #$DF                      ; Logical AND, A ← (A) && (#$DF)        
          sta RAM1_076                  ; Store Accumulator in Memory at RAM1_076 
          brclr 5,PortD,L0272           ; Branch to L0272 if Bit BEL Clear (Mn = 0)
          brset 7,PortB,L0266           ; Branch to L0266 if Bit CONTROL is set at PortB (Mn=1)
          lda RAM1_05e                  ; Load Accumulator with value of Memory at RAM1_05e, A <- (RAM1_05e)
          sub #$20                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$20)
          bcs L0260                     ; Branch to L0260 if C = 1                
          sta RAM1_05e                  ; Store Accumulator in Memory at RAM1_05e 
          bmi L0294                     ; Branch to L0294 if Minus N = 1          
          bclr 6,RAM1_05e               ; Clear bit 6 at RAM1_05e                 
          bra L026F                     ; Branch Always (1 = 1)                   
; 
          brset 2,RAM1_076,L0287        ; Branch to L0287 if Bit 2 is set at RAM1_076 (Mn=1)
          bset 2,RAM1_076               ; Set Bit 2 at memory RAM1_076 (Mn <- 1 ) 
          bset 1,RAM1_076               ; Set Bit 1 at memory RAM1_076 (Mn <- 1 ) 
          bra L0287                     ; Branch Always (1 = 1)                   
; 
          brclr 0,RAM1_061,L0294        ; Branch to L0294 if Bit 0 Clear (Mn = 0) 
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          clrx                          ; Clear Index Register, X <- 0x00         
          stx RAM1_071                  ; Store Index Register In Memory at RAM1_071
          sta RAM1_072                  ; Store Accumulator in Memory at RAM1_072 
          bset 0,RAM1_076               ; Set Bit 0 at memory RAM1_076 (Mn <- 1 ) 
          brclr 0,RAM1_061,L0283        ; Branch to L0283 if Bit 0 Clear (Mn = 0) 
L227E: 
          brclr 7,PortB,L0283           ; Branch to L0283 if Bit CONTROL Clear (Mn = 0)
          bclr 2,RAM1_076               ; Clear bit 2 at RAM1_076                 
          sta RAM1_073                  ; Store Accumulator in Memory at RAM1_073 
          stx RAM1_074                  ; Store Index Register In Memory at RAM1_074
          bset 4,RAM1_076               ; Set Bit 4 at memory RAM1_076 (Mn <- 1 ) 
          brset 7,PortB,L0294           ; Branch to L0294 if Bit CONTROL is set at PortB (Mn=1)
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          add RAM1_05e                  ; Add without Carry, A ← (A) + (RAM1_05e)
          bcs L0294                     ; Branch to L0294 if C = 1                
          sta RAM1_05e                  ; Store Accumulator in Memory at RAM1_05e 
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          add RAM1_076                  ; Add without Carry, A ← (A) + (RAM1_076)
          sta RAM1_076                  ; Store Accumulator in Memory at RAM1_076 
          and #$60                      ; Logical AND, A ← (A) && (#$60)        
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          bne L02BC                     ; Branch to L02BC if Not Equal (Z = 0);   
          brset 7,RAM1_076,L02A8        ; Branch to L02A8 if Bit 7 is set at RAM1_076 (Mn=1)
          brset 0,RAM1_061,L02AD        ; Branch to L02AD if Bit 0 is set at RAM1_061 (Mn=1)
          bclr 6,RAM1_076               ; Clear bit 6 at RAM1_076                 
          bclr 7,PortB                  ; Clear bit CONTROL at PortB              
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda #$24                      ; Load Accumulator with value of Memory at #$24, A <- (#$24)
          sta ADSTAT                    ; Store Accumulator in Memory at ADSTAT   
          brclr 7,ADSTAT,L02B1          ; Branch to L02B1 if Bit COCO Clear (Mn = 0)
          lda ADDATA                    ; Load Accumulator with value of Memory at ADDATA, A <- (ADDATA)
          sta RAM1_075                  ; Store Accumulator in Memory at RAM1_075 
          bset 7,PortB                  ; Set Bit CONTROL at memory PortB (Mn <- 1 )
          bset 4,RAM1_05e               ; Set Bit 4 at memory RAM1_05e (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L22BD: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 0,RAM1_061,L02C4        ; Branch to L02C4 if Bit 0 is set at RAM1_061 (Mn=1)
          brclr 2,RAM1_05f,L02CA        ; Branch to L02CA if Bit 2 Clear (Mn = 0) 
          brset 4,RAM1_076,L02CF        ; Branch to L02CF if Bit 4 is set at RAM1_076 (Mn=1)
          brset 2,RAM1_05f,L032B        ; Branch to L032B if Bit 2 is set at RAM1_05f (Mn=1)
          sta RAM2_02a4                 ; Store Accumulator in Memory at RAM2_02a4
          bra L0329                     ; Branch Always (1 = 1)                   
; 
          bclr 4,RAM1_076               ; Clear bit 4 at RAM1_076                 
          sei                           ; Set Interrupt Mask, I ← 1);           
          lda RAM1_073                  ; Load Accumulator with value of Memory at RAM1_073, A <- (RAM1_073)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda RAM1_074                  ; Load Accumulator with value of Memory at RAM1_074, A <- (RAM1_074)
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          lda RAM1_071                  ; Load Accumulator with value of Memory at RAM1_071, A <- (RAM1_071)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          lda RAM1_072                  ; Load Accumulator with value of Memory at RAM1_072, A <- (RAM1_072)
          sta RAM1_053                  ; Store Accumulator in Memory at RAM1_053 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brset 7,RAM1_076,L035E        ; Branch to L035E if Bit 7 is set at RAM1_076 (Mn=1)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 2,RAM1_05f,L0329        ; Branch to L0329 if Bit 2 Clear (Mn = 0) 
          clrx                          ; Clear Index Register, X <- 0x00         
          jsr L248F                     ; Jump to Subroutine at L248F             
          jsr L248D                     ; Jump to Subroutine at L248D             
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
          lda RAM1_050,x                ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          add RAM2_02a0,x               ; Add without Carry, A ← (A) + (RAM2_02a0)
          sta RAM2_02a0,x               ; Store Accumulator in Memory at RAM2_02a0
          sta RAM1_056,x                ; Store Accumulator in Memory at RAM1_056 
          lda X004F,x                   ; Load Accumulator with value of Memory at X004F, A <- (X004F)
          adc RAM2_029f,x               ; ADD with CARRY, A ← (A) + (RAM2_029f) + (C) 
          sta RAM2_029f,x               ; Store Accumulator in Memory at RAM2_029f
          sta RAM1_055,x                ; Store Accumulator in Memory at RAM1_055 
decx 
decx 
          bpl L02F3                     ; Branch to L02F3 if Plus N = 0           
          jsr L25E4                     ; Jump to Subroutine at L25E4             
          clrx                          ; Clear Index Register, X <- 0x00         
          jsr L24B3                     ; Jump to Subroutine at L24B3             
          bcs L0321                     ; Branch to L0321 if C = 1                
          ldx #$09                      ; Load Index Register with Memory Byte, X <- (#$09)
          jsr L241E                     ; Jump to Subroutine at L241E             
          lda #$1A                      ; Load Accumulator with value of Memory at #$1A, A <- (#$1A)
          jsr L243F                     ; Jump to Subroutine at L243F             
          sta RAM2_02a5                 ; Store Accumulator in Memory at RAM2_02a5
          lda RAM2_02a5                 ; Load Accumulator with value of Memory at RAM2_02a5, A <- (RAM2_02a5)
          ldx PLMB                      ; Load Index Register with Memory Byte, X <- (PLMB)
          jsr L246E                     ; Jump to Subroutine at L246E             
          sta PLMB                      ; Store Accumulator in Memory at PLMB     
          rts                           ; Return from Subroutine                  
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_02aa                 ; Store Accumulator in Memory at RAM2_02aa
          ldx #$0D                      ; Load Index Register with Memory Byte, X <- (#$0D)
          jsr L248F                     ; Jump to Subroutine at L248F             
          lda RAM1_075                  ; Load Accumulator with value of Memory at RAM1_075, A <- (RAM1_075)
          add RAM2_02ae                 ; Add without Carry, A ← (A) + (RAM2_02ae)
          sta RAM2_02ae                 ; Store Accumulator in Memory at RAM2_02ae
          clra                          ; Clear byte Accumulator, A <- 0x00       
          adc RAM2_02ad                 ; ADD with CARRY, A ← (A) + (RAM2_02ad) + (C) 
          sta RAM2_02ad                 ; Store Accumulator in Memory at RAM2_02ad
          lda RAM2_02ae                 ; Load Accumulator with value of Memory at RAM2_02ae, A <- (RAM2_02ae)
          ldx RAM2_02ad                 ; Load Index Register with Memory Byte, X <- (RAM2_02ad)
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          ldx #$0B                      ; Load Index Register with Memory Byte, X <- (#$0B)
          jsr L24B4                     ; Jump to Subroutine at L24B4             
          bcs L03A2                     ; Branch to L03A2 if C = 1                
          ldx #$19                      ; Load Index Register with Memory Byte, X <- (#$19)
          jsr L241E                     ; Jump to Subroutine at L241E             
          bra L0392                     ; Branch Always (1 = 1)                   
; 
          brset 2,RAM1_076,L032C        ; Branch to L032C if Bit 2 is set at RAM1_076 (Mn=1)
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          jsr L248F                     ; Jump to Subroutine at L248F             
          jsr L248D                     ; Jump to Subroutine at L248D             
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
          lda RAM1_050,x                ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          add RAM2_02a6,x               ; Add without Carry, A ← (A) + (RAM2_02a6)
          sta RAM2_02a6,x               ; Store Accumulator in Memory at RAM2_02a6
          sta RAM1_056,x                ; Store Accumulator in Memory at RAM1_056 
          lda X004F,x                   ; Load Accumulator with value of Memory at X004F, A <- (X004F)
          adc RAM2_02a5,x               ; ADD with CARRY, A ← (A) + (RAM2_02a5) + (C) 
          sta RAM2_02a5,x               ; Store Accumulator in Memory at RAM2_02a5
          sta RAM1_055,x                ; Store Accumulator in Memory at RAM1_055 
decx 
decx 
          bpl L036B                     ; Branch to L036B if Plus N = 0           
          jsr L25E4                     ; Jump to Subroutine at L25E4             
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          jsr L24B3                     ; Jump to Subroutine at L24B3             
          bcs L03A2                     ; Branch to L03A2 if C = 1                
          ldx #$0F                      ; Load Index Register with Memory Byte, X <- (#$0F)
          jsr L241E                     ; Jump to Subroutine at L241E             
          lda #$24                      ; Load Accumulator with value of Memory at #$24, A <- (#$24)
          jsr L243F                     ; Jump to Subroutine at L243F             
          sta RAM2_02ab                 ; Store Accumulator in Memory at RAM2_02ab
          lda #$2A                      ; Load Accumulator with value of Memory at #$2A, A <- (#$2A)
          jsr L243F                     ; Jump to Subroutine at L243F             
          sta RAM2_02ac                 ; Store Accumulator in Memory at RAM2_02ac
          brclr 0,RAM1_061,L03CD        ; Branch to L03CD if Bit 0 Clear (Mn = 0) 
          lda RAM2_02ab                 ; Load Accumulator with value of Memory at RAM2_02ab, A <- (RAM2_02ab)
          ldx PLMA                      ; Load Index Register with Memory Byte, X <- (PLMA)
          jsr L246E                     ; Jump to Subroutine at L246E             
          sta PLMA                      ; Store Accumulator in Memory at PLMA     
          lda RAM2_02ac                 ; Load Accumulator with value of Memory at RAM2_02ac, A <- (RAM2_02ac)
          ldx RAM1_06c                  ; Load Index Register with Memory Byte, X <- (RAM1_06c)
          jsr L246E                     ; Jump to Subroutine at L246E             
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          brset 1,RAM1_076,L03C7        ; Branch to L03C7 if Bit 1 is set at RAM1_076 (Mn=1)
          lda RAM2_02ac                 ; Load Accumulator with value of Memory at RAM2_02ac, A <- (RAM2_02ac)
          sub RAM1_06c                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_06c)
          bcc L03C3                     ; Branch to L03C3 if C bit is cleared     
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          and #$FC                      ; Logical AND, A ← (A) && (#$FC)        
          beq L03CD                     ; Branch to L03CD if Equal Z=1            
          bclr 1,RAM1_076               ; Clear bit 1 at RAM1_076                 
          stx RAM1_06c                  ; Store Index Register In Memory at RAM1_06c
          bset 1,RAM1_05d               ; Set Bit 1 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L23CE: 
          brclr 2,RAM1_05f,L03DB        ; Branch to L03DB if Bit 2 Clear (Mn = 0) 
          lda RAM2_02a5                 ; Load Accumulator with value of Memory at RAM2_02a5, A <- (RAM2_02a5)
          ldx PLMB                      ; Load Index Register with Memory Byte, X <- (PLMB)
          jsr L2402                     ; Jump to Subroutine at L2402             
          sta PLMB                      ; Store Accumulator in Memory at PLMB     
          brclr 0,RAM1_061,L03CD        ; Branch to L03CD if Bit 0 Clear (Mn = 0) 
          lda RAM2_02ab                 ; Load Accumulator with value of Memory at RAM2_02ab, A <- (RAM2_02ab)
          ldx PLMA                      ; Load Index Register with Memory Byte, X <- (PLMA)
          jsr L2402                     ; Jump to Subroutine at L2402             
          sta PLMA                      ; Store Accumulator in Memory at PLMA     
          lda RAM2_02ac                 ; Load Accumulator with value of Memory at RAM2_02ac, A <- (RAM2_02ac)
          ldx RAM1_06c                  ; Load Index Register with Memory Byte, X <- (RAM1_06c)
          jsr L2402                     ; Jump to Subroutine at L2402             
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM2_02ac                 ; Load Accumulator with value of Memory at RAM2_02ac, A <- (RAM2_02ac)
          sub RAM1_06c                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_06c)
          bcc L03F9                     ; Branch to L03F9 if C bit is cleared     
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          and #$FC                      ; Logical AND, A ← (A) && (#$FC)        
          beq L03CD                     ; Branch to L03CD if Equal Z=1            
          stx RAM1_06c                  ; Store Index Register In Memory at RAM1_06c
          bset 1,RAM1_05d               ; Set Bit 1 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L2402: 
          stx RAM1_056                  ; Store Index Register In Memory at RAM1_056
          sub RAM1_056                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_056)
          beq L041B                     ; Branch to L041B if Equal Z=1            
          bcs L0413                     ; Branch to L0413 if C = 1                
          clrx                          ; Clear Index Register, X <- 0x00         
          cmp #$10                      ; Compare Accumulator with Memory Byte, (A) - (#$10)
          bcs L041A                     ; Branch to L041A if C = 1                
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          bra L041A                     ; Branch Always (1 = 1)                   
; 
          clrx                          ; Clear Index Register, X <- 0x00         
          cmp #$F0                      ; Compare Accumulator with Memory Byte, (A) - (#$F0)
          bhi L041A                     ; Branch to L041A if Higher C v Z = 0     
          ldx #$FE                      ; Load Index Register with Memory Byte, X <- (#$FE)
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          rts                           ; Return from Subroutine                  
; 
L241E: 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          lda OPTR,x                    ; Load Accumulator with value of Memory at OPTR, A <- (OPTR)
          cmp RAM1_052                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_052)
          bcc L0434                     ; Branch to L0434 if C bit is cleared     
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
decx 
          dec RAM1_050                  ; Decrement Byte at RAM1_050 Byte = Byte - 1
          bpl L0424                     ; Branch to L0424 if Plus N = 0           
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sub RAM1_056                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_056)
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sub RAM1_056                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_056)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          rts                           ; Return from Subroutine                  
; 
L243F: 
          add RAM1_050                  ; Add without Carry, A ← (A) + (RAM1_050)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          clr RAM1_05a                  ; Clear byte at RAM1_05a <- 0x00          
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L0455                     ; Branch to L0455 if Equal Z=1            
          lda SEC_CODE1,x               ; Load Accumulator with value of Memory at SEC_CODE1, A <- (SEC_CODE1)
          sta RAM1_05a                  ; Store Accumulator in Memory at RAM1_05a 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          tst RAM1_050                  ; Test Memory Byte for Negative or Zero, (RAM1_050) – 0x00
          bmi L0458                     ; Branch to L0458 if Minus N = 1          
          lda OPTR,x                    ; Load Accumulator with value of Memory at OPTR, A <- (OPTR)
          sub RAM1_05a                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_05a)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          stx RAM1_058                  ; Store Index Register In Memory at RAM1_058
          clr RAM1_057                  ; Clear byte at RAM1_057 <- 0x00          
          lda RAM1_051                  ; Load Accumulator with value of Memory at RAM1_051, A <- (RAM1_051)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          jsr L25E4                     ; Jump to Subroutine at L25E4             
          add RAM1_05a                  ; Add without Carry, A ← (A) + (RAM1_05a)
          rts                           ; Return from Subroutine                  
; 
L246E: 
          stx RAM1_056                  ; Store Index Register In Memory at RAM1_056
          sub RAM1_056                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_056)
          beq L0489                     ; Branch to L0489 if Equal Z=1            
          bcs L0480                     ; Branch to L0480 if C = 1                
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          cmp #$10                      ; Compare Accumulator with Memory Byte, (A) - (#$10)
          bcs L0488                     ; Branch to L0488 if C = 1                
          ldx #$08                      ; Load Index Register with Memory Byte, X <- (#$08)
          bra L0488                     ; Branch Always (1 = 1)                   
; 
          ldx #$FF                      ; Load Index Register with Memory Byte, X <- (#$FF)
          cmp #$F0                      ; Compare Accumulator with Memory Byte, (A) - (#$F0)
          bhi L0488                     ; Branch to L0488 if Higher C v Z = 0     
          ldx #$F8                      ; Load Index Register with Memory Byte, X <- (#$F8)
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
L248D: 
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
L248F: 
          lda RAM2_02a0,x               ; Load Accumulator with value of Memory at RAM2_02a0, A <- (RAM2_02a0)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda RAM2_02a1,x               ; Load Accumulator with value of Memory at RAM2_02a1, A <- (RAM2_02a1)
          lsr RAM1_056                  ; Logical Shift Right of RAM1_056, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr RAM1_056                  ; Logical Shift Right of RAM1_056, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr RAM1_056                  ; Logical Shift Right of RAM1_056, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda RAM2_02a1,x               ; Load Accumulator with value of Memory at RAM2_02a1, A <- (RAM2_02a1)
          sub RAM1_057                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_057)
          sta RAM2_02a1,x               ; Store Accumulator in Memory at RAM2_02a1
          lda RAM2_02a0,x               ; Load Accumulator with value of Memory at RAM2_02a0, A <- (RAM2_02a0)
          sbc RAM1_056                  ; Subtract Memory Byte RAM1_056 and Carry Bit from Accumulator, A ←  (A) – (RAM1_056) – (C)
          sta RAM2_02a0,x               ; Store Accumulator in Memory at RAM2_02a0
          rts                           ; Return from Subroutine                  
; 
L24B3: 
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
L24B4: 
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          brset 1,RAM1_076,L04C3        ; Branch to L04C3 if Bit 1 is set at RAM1_076 (Mn=1)
          sub RAM2_02a4,x               ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM2_02a4)
          bcc L04BF                     ; Branch to L04BF if C bit is cleared     
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bcs L04CA                     ; Branch to L04CA if C = 1                
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM2_02a4,x               ; Store Accumulator in Memory at RAM2_02a4
          cmp #$00                      ; Compare Accumulator with Memory Byte, (A) - (#$00)
          rts                           ; Return from Subroutine                  
; 
L24CB: 
          ldx STACK_0cc                 ; Load Index Register with Memory Byte, X <- (STACK_0cc)
cpx #$FF 
          bne L04D3                     ; Branch to L04D3 if Not Equal (Z = 0);   
          bclr 5,STACK_0c5              ; Clear bit 5 at STACK_0c5                
          ldx #$80                      ; Load Index Register with Memory Byte, X <- (#$80)
          brset 0,STACK_0cb,L04DC       ; Branch to L04DC if Bit 0 is set at STACK_0cb (Mn=1)
          brclr 6,STACK_0c6,L04EE       ; Branch to L04EE if Bit 6 Clear (Mn = 0) 
          rts                           ; Return from Subroutine                  
; 
L24DC: 
          ldx #$5F                      ; Load Index Register with Memory Byte, X <- (#$5F)
          cmp XAE20                     ; Compare Accumulator with Memory Byte, (A) - (XAE20)
          bclr 5,STACK_0c5              ; Clear bit 5 at STACK_0c5                
          bra L04EE                     ; Branch Always (1 = 1)                   
; 
L24E5: 
          ldx #$4C                      ; Load Index Register with Memory Byte, X <- (#$4C)
          cmp XAE50                     ; Compare Accumulator with Memory Byte, (A) - (XAE50)
          clr STACK_0cc                 ; Clear byte at STACK_0cc <- 0x00         
          bset 3,STACK_0cc              ; Set Bit 3 at memory STACK_0cc (Mn <- 1 )
          bclr 0,STACK_0cb              ; Clear bit 0 at STACK_0cb                
          stx STACK_0c6                 ; Store Index Register In Memory at STACK_0c6
          sta STACK_0c7                 ; Store Accumulator in Memory at STACK_0c7
          rts                           ; Return from Subroutine                  
; 
L24F5: 
          eor RAM2_0250,x               ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM2_0250)
          beq L0502                     ; Branch to L0502 if Equal Z=1            
          eor RAM2_0250,x               ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM2_0250)
          sta RAM2_0250,x               ; Store Accumulator in Memory at RAM2_0250
          bset 5,STACK_0c6              ; Set Bit 5 at memory STACK_0c6 (Mn <- 1 )
          incx                          ; Increment Index register by 1,X++       
          rts                           ; Return from Subroutine                  
; 
L2504: 
          clrx                          ; Clear Index Register, X <- 0x00         
L2505: 
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          bsr L04F5                     ; Branch to Subroutine at L04F5           
cpx #$06 
          bne L0505                     ; Branch to L0505 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L250E: 
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          bsr L04F5                     ; Branch to Subroutine at L04F5           
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          brclr 5,RAM1_069,L051A        ; Branch to L051A if Bit 5 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 2,RAM1_0b8,L0522        ; Branch to L0522 if Bit 2 is set at RAM1_0b8 (Mn=1)
          brclr 6,RAM1_0b5,L0522        ; Branch to L0522 if Bit 6 Clear (Mn = 0) 
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
          bsr L0507                     ; Branch to Subroutine at L0507           
          clrx                          ; Clear Index Register, X <- 0x00         
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          bra L04F5                     ; Branch Always (1 = 1)                   
; 
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          bsr L0533                     ; Branch to Subroutine at L0533           
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          jsr L261E                     ; Jump to Subroutine at L261E             
L2533: 
          jsr L2617                     ; Jump to Subroutine at L2617             
          cmp #$0A                      ; Compare Accumulator with Memory Byte, (A) - (#$0A)
          bcs L053C                     ; Branch to L053C if C = 1                
          add #$07                      ; Add without Carry, A ← (A) + (#$07)   
          add #$30                      ; Add without Carry, A ← (A) + (#$30)   
          rts                           ; Return from Subroutine                  
; 
L253F: 
          lda #$68                      ; Load Accumulator with value of Memory at #$68, A <- (#$68)
          cmp XA670                     ; Compare Accumulator with Memory Byte, (A) - (XA670)
          cmp XA660                     ; Compare Accumulator with Memory Byte, (A) - (XA660)
          cmp XA678                     ; Compare Accumulator with Memory Byte, (A) - (XA678)
          cmp XA680                     ; Compare Accumulator with Memory Byte, (A) - (XA680)
L254D: 
deca 
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          ldx RAM1_056                  ; Load Index Register with Memory Byte, X <- (RAM1_056)
          lda X26A5,x                   ; Load Accumulator with value of Memory at X26A5, A <- (X26A5)
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          sta RAM2_0257,x               ; Store Accumulator in Memory at RAM2_0257
          dec RAM1_057                  ; Decrement Byte at RAM1_057 Byte = Byte - 1
          bpl L0554                     ; Branch to L0554 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L2565: 
          brset 1,STACK_0cb,L0573       ; Branch to L0573 if Bit 1 is set at STACK_0cb (Mn=1)
          inc STACK_0cc                 ; Increment Byte STACK_0cc, Byte = Byte + 1
          tst STACK_0cc                 ; Test Memory Byte for Negative or Zero, (STACK_0cc) – 0x00
          beq L0571                     ; Branch to L0571 if Equal Z=1            
          dec STACK_0cc                 ; Decrement Byte at STACK_0cc Byte = Byte - 1
          rts                           ; Return from Subroutine                  
; 
          dec STACK_0cc                 ; Decrement Byte at STACK_0cc Byte = Byte - 1
L2573: 
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
          bne L0580                     ; Branch to L0580 if Not Equal (Z = 0);   
          lda #$39                      ; Load Accumulator with value of Memory at #$39, A <- (#$39)
          brclr 6,STACK_0d2,L059A       ; Branch to L059A if Bit 6 Clear (Mn = 0) 
          lda #$36                      ; Load Accumulator with value of Memory at #$36, A <- (#$36)
          bra L059A                     ; Branch Always (1 = 1)                   
; 
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          bne L0589                     ; Branch to L0589 if Not Equal (Z = 0);   
          brclr 5,RAM1_0bb,L05B6        ; Branch to L05B6 if Bit 5 Clear (Mn = 0) 
          bset 3,RAM1_094               ; Set Bit 3 at memory RAM1_094 (Mn <- 1 ) 
          brclr 6,RAM1_0b5,L0591        ; Branch to L0591 if Bit 6 Clear (Mn = 0) 
          brset 2,RAM1_0b8,L0591        ; Branch to L0591 if Bit 2 is set at RAM1_0b8 (Mn=1)
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
L2591: 
          brclr 3,RAM1_08e,L0596        ; Branch to L0596 if Bit 3 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          sta STACK_0d5                 ; Store Accumulator in Memory at STACK_0d5
          bra L05A6                     ; Branch Always (1 = 1)                   
; 
L259A: 
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          eor STACK_0d5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d5)
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          beq L05B6                     ; Branch to L05B6 if Equal Z=1            
          eor STACK_0d5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d5)
          sta STACK_0d5                 ; Store Accumulator in Memory at STACK_0d5
L25A6: 
          brclr 0,RAM1_061,L05AD        ; Branch to L05AD if Bit 0 Clear (Mn = 0) 
          brclr 3,STACK_0ce,L05B2       ; Branch to L05B2 if Bit 3 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 3,RAM1_08e,L05B2        ; Branch to L05B2 if Bit 3 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          bset 7,STACK_0d5              ; Set Bit 7 at memory STACK_0d5 (Mn <- 1 )
          bset 1,RAM1_094               ; Set Bit 1 at memory RAM1_094 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L25B7: 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          clr RAM1_057                  ; Clear byte at RAM1_057 <- 0x00          
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bms L05CA                     ; Branch to L05CA if Interrupt Mask Set (I=1)
          sei                           ; Set Interrupt Mask, I ← 1);           
          stx ADSTAT                    ; Store Index Register In Memory at ADSTAT
          brclr 7,ADSTAT,L05C4          ; Branch to L05C4 if Bit COCO Clear (Mn = 0)
          cli                           ; Clear Interrupt Mask (I <- 0)           
          bra L05CF                     ; Branch Always (1 = 1)                   
; 
          stx ADSTAT                    ; Store Index Register In Memory at ADSTAT
          brclr 7,ADSTAT,L05CC          ; Branch to L05CC if Bit COCO Clear (Mn = 0)
          add ADDATA                    ; Add without Carry, A ← (A) + (ADDATA) 
          bcc L05D5                     ; Branch to L05D5 if C bit is cleared     
          inc RAM1_057                  ; Increment Byte RAM1_057, Byte = Byte + 1
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bne L05BF                     ; Branch to L05BF if Not Equal (Z = 0);   
          lsr RAM1_057                  ; Logical Shift Right of RAM1_057, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr RAM1_057                  ; Logical Shift Right of RAM1_057, b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          adc #$00                      ; ADD with CARRY, A ← (A) + (#$00) + (C) 
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          rts                           ; Return from Subroutine                  
; 
L25E4: 
          clrx                          ; Clear Index Register, X <- 0x00         
          sec                           ; Set Carry Bit , C ← 1                 
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bcs L0613                     ; Branch to L0613 if C = 1                
          lsr RAM1_056                  ; Logical Shift Right of RAM1_056, b7 -> [b7 >>>> b0] -> C
          ror RAM1_057                  ; Rotate Byte at RAM1_057 Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          sub RAM1_057                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_057)
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          sbc RAM1_056                  ; Subtract Memory Byte RAM1_056 and Carry Bit from Accumulator, A ←  (A) – (RAM1_056) – (C)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          bcc L05E5                     ; Branch to L05E5 if C bit is cleared     
          clc                           ; Clear Carry Bit (C <- 0)                
          rolx                          ; Rotate Index Register Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bcs L0613                     ; Branch to L0613 if C = 1                
          lsr RAM1_056                  ; Logical Shift Right of RAM1_056, b7 -> [b7 >>>> b0] -> C
          ror RAM1_057                  ; Rotate Byte at RAM1_057 Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          adc RAM1_056                  ; ADD with CARRY, A ← (A) + (RAM1_056) + (C) 
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          bcc L05FB                     ; Branch to L05FB if C bit is cleared     
          bra L05E5                     ; Branch Always (1 = 1)                   
; 
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          rts                           ; Return from Subroutine                  
; 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
L2616: 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
L2617: 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          rts                           ; Return from Subroutine                  
; 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
L261E: 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
L261F: 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          rts                           ; Return from Subroutine                  
; 
L2623: 
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          bra L062C                     ; Branch Always (1 = 1)                   
; 
          jsr L0785                     ; Jump to Subroutine at L0785             
          bsr L0631                     ; Branch to Subroutine at L0631           
          dec RAM1_050                  ; Decrement Byte at RAM1_050 Byte = Byte - 1
          bpl L0627                     ; Branch to L0627 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L2631: 
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
L2633: 
          add ACH                       ; Add without Carry, A ← (A) + (ACH)    
          tst ACL                       ; Test Memory Byte for Negative or Zero, (ACL) – 0x00
          bih L063B                     ; Branch to L063B if IRQ Pin High IRQ=1   
          bset 7,RAM1_08f               ; Set Bit 7 at memory RAM1_08f (Mn <- 1 ) 
          cmp ACH                       ; Compare Accumulator with Memory Byte, (A) - (ACH)
          bpl L0637                     ; Branch to L0637 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L2640: 
          lda #$85                      ; Load Accumulator with value of Memory at #$85, A <- (#$85)
          cmp XA621                     ; Compare Accumulator with Memory Byte, (A) - (XA621)
deca 
          bne L0645                     ; Branch to L0645 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L2649: 
          lda X2656,x                   ; Load Accumulator with value of Memory at X2656, A <- (X2656)
          sta RAM1_064                  ; Store Accumulator in Memory at RAM1_064 
          lda X2657,x                   ; Load Accumulator with value of Memory at X2657, A <- (X2657)
          sta RAM1_065                  ; Store Accumulator in Memory at RAM1_065 
          clr RAM1_066                  ; Clear byte at RAM1_066 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
X2656: 
          inc ,x                        ; Increment Byte , Byte = Byte + 1        
; 
X2657: 
          db $52                        ; data? R,  ,  ,                          
; 
          rol STACK_0eb,x               ; Rotate Byte at STACK_0eb Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bmc L065C                     ; Branch to L065C if Interrupt Mask Clear I=0
          clr ,x                        ; Clear byte at  <- 0x00                  
          sub RAM1_07c,x                ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_07c)
          beq L0662                     ; Branch to L0662 if Equal Z=1            
          dec ,x                        ; Decrement Byte at  Byte = Byte - 1      
          dec ,x                        ; Decrement Byte at  Byte = Byte - 1      
          rts                           ; Return from Subroutine                  
; 
L2664: 
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sec                           ; Set Carry Bit , C ← 1                 
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
decx 
          bpl L0669                     ; Branch to L0669 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L266E: 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          bit ,x                        ; Bit Test Accumulator with Memory Byte (A) ∧ ()
          bne L0676                     ; Branch to L0676 if Not Equal (Z = 0);   
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          bne L0670                     ; Branch to L0670 if Not Equal (Z = 0);   
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
          sta ,x                        ; Store Accumulator in Memory at          
          rts                           ; Return from Subroutine                  
; 
L2679: 
          ldx RAM1_056                  ; Load Index Register with Memory Byte, X <- (RAM1_056)
          inc RAM1_056                  ; Increment Byte RAM1_056, Byte = Byte + 1
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          brclr 1,RAM1_059,L0684        ; Branch to L0684 if Bit 1 Clear (Mn = 0) 
          lda BOT1_0200,x               ; Load Accumulator with value of Memory at BOT1_0200, A <- (BOT1_0200)
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          inc RAM1_057                  ; Increment Byte RAM1_057, Byte = Byte + 1
          brclr 0,RAM1_059,L068F        ; Branch to L068F if Bit 0 Clear (Mn = 0) 
          sta BOT1_0200,x               ; Store Accumulator in Memory at BOT1_0200
          cmp STACK_0f7                 ; Compare Accumulator with Memory Byte, (A) - (STACK_0f7)
          dec RAM1_058                  ; Decrement Byte at RAM1_058 Byte = Byte - 1
          bpl L0679                     ; Branch to L0679 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L2695: 
          clrx                          ; Clear Index Register, X <- 0x00         
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bpl L06A4                     ; Branch to L06A4 if Plus N = 0           
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bmi L06A4                     ; Branch to L06A4 if Minus N = 1          
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bmi L06A4                     ; Branch to L06A4 if Minus N = 1          
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rts                           ; Return from Subroutine                  
; 
X26A5: 
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
; 
          db $41                        ; data? A,  ,  ,                          
; 
          bra L06C9                     ; Branch Always (1 = 1)                   
          bra L06DC                     ; Branch Always (1 = 1)                   
          bra L06CD                     ; Branch Always (1 = 1)                   
; 
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
; 
          db $41                        ; data? A,  ,  ,                          
; 
          inca                          ; Increment Accumulator by 1,A++          
; 
          db $41                        ; data? A,  ,  ,                          
; 
          bra L06E4                     ; Branch Always (1 = 1)                   
          bra L06D5                     ; Branch Always (1 = 1)                   
; 
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          clra                          ; Clear byte Accumulator, A <- 0x00       
          inca                          ; Increment Accumulator by 1,A++          
          bra L06DA                     ; Branch Always (1 = 1)                   
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          bra L06DD                     ; Branch Always (1 = 1)                   
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
; 
          db $45, $4E                   ; data? E, N,  ,                          
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
          bra L0707                     ; Branch Always (1 = 1)                   
; 
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          bra L0718                     ; Branch Always (1 = 1)                   
; 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bra L06E9                     ; Branch Always (1 = 1)                   
          bra L071A                     ; Branch Always (1 = 1)                   
; 
          db $4E                        ; data? N,  ,  ,                          
; 
          bra L071C                     ; Branch Always (1 = 1)                   
; 
          db $41                        ; data? A,  ,  ,                          
; 
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bra L06F2                     ; Branch Always (1 = 1)                   
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          bra L06F5                     ; Branch Always (1 = 1)                   
; 
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
; 
          db $45                        ; data? E,  ,  ,                          
; 
          inca                          ; Increment Accumulator by 1,A++          
          bra L06FA                     ; Branch Always (1 = 1)                   
; 
          db $52                        ; data? R,  ,  ,                          
; 
          bra L06FD                     ; Branch Always (1 = 1)                   
; 
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
; 
          db $41                        ; data? A,  ,  ,                          
; 
          inca                          ; Increment Accumulator by 1,A++          
; 
          db $41                        ; data? A,  ,  ,                          
; 
          bra L0732                     ; Branch Always (1 = 1)                   
; 
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
; 
          db $45, $4E                   ; data? E, N,  ,                          
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
          bra L0737                     ; Branch Always (1 = 1)                   
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L0740                     ; Branch Always (1 = 1)                   
; 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bra L0711                     ; Branch Always (1 = 1)                   
          bra L0742                     ; Branch Always (1 = 1)                   
; 
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
; 
          db $45                        ; data? E,  ,  ,                          
; 
          inca                          ; Increment Accumulator by 1,A++          
          bra L071A                     ; Branch Always (1 = 1)                   
; 
          inca                          ; Increment Accumulator by 1,A++          
          bra L071D                     ; Branch Always (1 = 1)                   
; 
          db $45, $31                   ; data? E, 1,  ,                          
; 
          bra L0751                     ; Branch Always (1 = 1)                   
; 
          com X003A                     ; Complement Byte (One’s Complement), 0xFF - X003A
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          bra L074F                     ; Branch Always (1 = 1)                   
; 
          db $52, $52, $31, $4E         ; data? R, R, 1, N                        
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L0754                     ; Branch Always (1 = 1)                   
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
; 
          db $45                        ; data? E,  ,  ,                          
; 
          bra L0768                     ; Branch Always (1 = 1)                   
; 
          neg X0020                     ; Negate Byte of X0020 (Two’s Complement), X0020 = 0x00 - (X0020)
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
          dec X0020                     ; Decrement Byte at X0020 Byte = Byte - 1 
          bra L0764                     ; Branch Always (1 = 1)                   
; 
          db $41                        ; data? A,  ,  ,                          
; 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          bra L0771                     ; Branch Always (1 = 1)                   
; 
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bra L0765                     ; Branch Always (1 = 1)                   
; 
          ora XA60A                     ; Logical OR Accumulator with Memory at XA60A, A <- (A) || (XA60A)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          rts                           ; Return from Subroutine                  
; 
L2730: 
          ldx #$D1                      ; Load Index Register with Memory Byte, X <- (#$D1)
          jsr L265E                     ; Jump to Subroutine at L265E             
          bne L0739                     ; Branch to L0739 if Not Equal (Z = 0);   
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          ldx #$CF                      ; Load Index Register with Memory Byte, X <- (#$CF)
          jsr L265E                     ; Jump to Subroutine at L265E             
          bne L072F                     ; Branch to L072F if Not Equal (Z = 0);   
          brclr 3,STACK_0ce,L0745       ; Branch to L0745 if Bit 3 Clear (Mn = 0) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          brclr 2,STACK_0ce,L07C1       ; Branch to L07C1 if Bit 2 Clear (Mn = 0) 
          lda STACK_0ce                 ; Load Accumulator with value of Memory at STACK_0ce, A <- (STACK_0ce)
          and #$F8                      ; Logical AND, A ← (A) && (#$F8)        
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
L274E: 
          lda #$0A                      ; Load Accumulator with value of Memory at #$0A, A <- (#$0A)
          brset 7,RAM1_060,L07B7        ; Branch to L07B7 if Bit 7 is set at RAM1_060 (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          brclr 3,RAM1_08b,L07B7        ; Branch to L07B7 if Bit 3 Clear (Mn = 0) 
          tst STACK_0ce                 ; Test Memory Byte for Negative or Zero, (STACK_0ce) – 0x00
          beq L078D                     ; Branch to L078D if Equal Z=1            
          brset 7,STACK_0ce,L07B7       ; Branch to L07B7 if Bit 7 is set at STACK_0ce (Mn=1)
          brset 2,STACK_0ce,L0782       ; Branch to L0782 if Bit 2 is set at STACK_0ce (Mn=1)
          brclr 1,STACK_0ce,L076E       ; Branch to L076E if Bit 1 Clear (Mn = 0) 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          brclr 0,STACK_0ce,L07A8       ; Branch to L07A8 if Bit 0 Clear (Mn = 0) 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bra L07A8                     ; Branch Always (1 = 1)                   
; 
          brset 5,STACK_0ce,L0779       ; Branch to L0779 if Bit 5 is set at STACK_0ce (Mn=1)
          brclr 6,STACK_0ce,L078D       ; Branch to L078D if Bit 6 Clear (Mn = 0) 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          brset 0,STACK_0ce,L07B7       ; Branch to L07B7 if Bit 0 is set at STACK_0ce (Mn=1)
          lda #$09                      ; Load Accumulator with value of Memory at #$09, A <- (#$09)
          brclr 6,RAM1_067,L07A8        ; Branch to L07A8 if Bit 6 Clear (Mn = 0) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bra L07A8                     ; Branch Always (1 = 1)                   
; 
          brclr 1,STACK_0ce,L078D       ; Branch to L078D if Bit 1 Clear (Mn = 0) 
          brset 2,STACK_0cb,L078D       ; Branch to L078D if Bit 2 is set at STACK_0cb (Mn=1)
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
          brclr 0,STACK_0ce,L07A6       ; Branch to L07A6 if Bit 0 Clear (Mn = 0) 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          brset 3,STACK_0ce,L07A8       ; Branch to L07A8 if Bit 3 is set at STACK_0ce (Mn=1)
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
          brset 6,RAM1_07f,L07A8        ; Branch to L07A8 if Bit 6 is set at RAM1_07f (Mn=1)
          brset 3,RAM1_07f,L07A8        ; Branch to L07A8 if Bit 3 is set at RAM1_07f (Mn=1)
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          brset 5,RAM1_07f,L07A6        ; Branch to L07A6 if Bit 5 is set at RAM1_07f (Mn=1)
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          beq L07A8                     ; Branch to L07A8 if Equal Z=1            
          ora #$40                      ; Logical OR Accumulator with Memory at #$40, A <- (A) || (#$40)
          brset 5,RAM1_07f,L07B7        ; Branch to L07B7 if Bit 5 is set at RAM1_07f (Mn=1)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          jsr L261E                     ; Jump to Subroutine at L261E             
          add RAM1_056                  ; Add without Carry, A ← (A) + (RAM1_056)
          eor STACK_0ca                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0ca)
          beq L07C1                     ; Branch to L07C1 if Equal Z=1            
          eor STACK_0ca                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0ca)
          sta STACK_0ca                 ; Store Accumulator in Memory at STACK_0ca
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
L27C2: 
          rts                           ; Return from Subroutine                  
; 
L27C3: 
          lda RAM1_07a                  ; Load Accumulator with value of Memory at RAM1_07a, A <- (RAM1_07a)
          beq L0027                     ; Branch to L0027 if Equal Z=1            
          dec RAM1_079                  ; Decrement Byte at RAM1_079 Byte = Byte - 1
          bne L0027                     ; Branch to L0027 if Not Equal (Z = 0);   
          clr RAM1_07a                  ; Clear byte at RAM1_07a <- 0x00          
          bra L001F                     ; Branch Always (1 = 1)                   
; 
L27CF: 
          brset 1,RAM1_077,L07EF        ; Branch to L07EF if Bit 1 is set at RAM1_077 (Mn=1)
          brclr 4,RAM1_077,L07F3        ; Branch to L07F3 if Bit 4 Clear (Mn = 0) 
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          beq L07EF                     ; Branch to L07EF if Equal Z=1            
          sta RAM1_07a                  ; Store Accumulator in Memory at RAM1_07a 
          lda RAM1_077                  ; Load Accumulator with value of Memory at RAM1_077, A <- (RAM1_077)
          and #$E0                      ; Logical AND, A ← (A) && (#$E0)        
          add RAM1_07a                  ; Add without Carry, A ← (A) + (RAM1_07a)
          sta RAM1_07a                  ; Store Accumulator in Memory at RAM1_07a 
          jsr L2616                     ; Jump to Subroutine at L2616             
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X2827,x                   ; Load Accumulator with value of Memory at X2827, A <- (X2827)
          sta RAM1_079                  ; Store Accumulator in Memory at RAM1_079 
          cmp X3F7A                     ; Compare Accumulator with Memory Byte, (A) - (X3F7A)
          clr RAM1_077                  ; Clear byte at RAM1_077 <- 0x00          
          brclr 6,RAM1_09f,L0027        ; Branch to L0027 if Bit 6 Clear (Mn = 0) 
          brset 6,RAM1_05d,L0027        ; Branch to L0027 if Bit 6 is set at RAM1_05d (Mn=1)
          lda RAM1_07a                  ; Load Accumulator with value of Memory at RAM1_07a, A <- (RAM1_07a)
          beq L000B                     ; Branch to L000B if Equal Z=1            
          brclr 7,RAM1_09f,L0003        ; Branch to L0003 if Bit 7 Clear (Mn = 0) 
          bclr 6,RAM1_09f               ; Clear bit 6 at RAM1_09f                 
          rts                           ; Return from Subroutine                  
; 
          clr RAM1_07a                  ; Clear byte at RAM1_07a <- 0x00          
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          ora #$C0                      ; Logical OR Accumulator with Memory at #$C0, A <- (A) || (#$C0)
          bra L001F                     ; Branch Always (1 = 1)                   
; 
          bclr 6,RAM1_09f               ; Clear bit 6 at RAM1_09f                 
          lda RAM1_09f                  ; Load Accumulator with value of Memory at RAM1_09f, A <- (RAM1_09f)
          bpl L0015                     ; Branch to L0015 if Plus N = 0           
          eor #$90                      ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (#$90)
          bra L001F                     ; Branch Always (1 = 1)                   
; 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X285B,x                   ; Load Accumulator with value of Memory at X285B, A <- (X285B)
          brclr 5,RAM1_069,L001F        ; Branch to L001F if Bit 5 Clear (Mn = 0) 
          lda X282D,x                   ; Load Accumulator with value of Memory at X282D, A <- (X282D)
          sta RAM1_078                  ; Store Accumulator in Memory at RAM1_078 
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          beq L0027                     ; Branch to L0027 if Equal Z=1            
          bset 6,RAM1_05d               ; Set Bit 6 at memory RAM1_05d (Mn <- 1 ) 
X2827: 
          rts                           ; Return from Subroutine                  
; 
          bclr 4,PLMA                   ; Clear bit 4 at PLMA                     
; 
          db $4B                        ; data? K,  ,  ,                          
; 
          bcs L005F                     ; Branch to L005F if C = 1                
X282D: 
          brset 0,STACK_0e1,L0012       ; Branch to L0012 if Bit 0 is set at STACK_0e1 (Mn=1)
cpx STACK_0e4,x 
          bit STACK_0e6,x               ; Bit Test Accumulator with Memory Byte (A) ∧ (STACK_0e6)
          sta EEPROM_ECLK_control,x     ; Store Accumulator in Memory at EEPROM_ECLK_control
          adc PortB,x                   ; ADD with CARRY, A ← (A) + (PortB) + (C) 
          brclr 0,PortB,L0028           ; Branch to L0028 if Bit ENA_12V_ANTENE Clear (Mn = 0)
          brclr 6,ADSTAT,L0048          ; Branch to L0048 if Bit ADRC Clear (Mn = 0)
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          brclr 0,STACK_0f3,L004E       ; Branch to L004E if Bit 0 Clear (Mn = 0) 
          bit ,x                        ; Bit Test Accumulator with Memory Byte (A) ∧ ()
          brclr 0,STACK_0f7,L003E       ; Branch to L003E if Bit 0 Clear (Mn = 0) 
          adc ,x                        ; ADD with CARRY, A ← (A) + () + (C)    
          ora ,x                        ; Logical OR Accumulator with Memory at , A <- (A) || ()
          add ,x                        ; Add without Carry, A ← (A) + ()       
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          brset 3,STACK_0ea,L0050       ; Branch to L0050 if Bit 3 is set at STACK_0ea (Mn=1)
          brset 1,SCCR2,L0061           ; Branch to L0061 if Bit RWU is set at SCCR2 (Mn=1)
          brclr 1,STACK_0ff,L0049       ; Branch to L0049 if Bit 1 Clear (Mn = 0) 
          brset 4,STACK_0ee,L0047       ; Branch to L0047 if Bit 4 is set at STACK_0ee (Mn=1)
          sub ,x                        ; Subtract Memory Byte from Accumulator , A ← (A) – ()
          cmp ,x                        ; Compare Accumulator with Memory Byte, (A) - ()
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
X285B: 
          brset 0,STACK_0e1,L0040       ; Branch to L0040 if Bit 0 is set at STACK_0e1 (Mn=1)
cpx STACK_0e4,x 
          bit STACK_0e6,x               ; Bit Test Accumulator with Memory Byte (A) ∧ (STACK_0e6)
          sta STACK_0e8,x               ; Store Accumulator in Memory at STACK_0e8
          adc DDRA,x                    ; ADD with CARRY, A ← (A) + (DDRA) + (C) 
          add STACK_0ec,x               ; Add without Carry, A ← (A) + (STACK_0ec)
          jsr L000D,x ;INFO: index jump ; Jump to Subroutine at L000D             
          brclr 4,PLMA,L0063            ; Branch to L0063 if Bit 4 Clear (Mn = 0) 
          brclr 2,STACK_0f3,L007C       ; Branch to L007C if Bit 2 Clear (Mn = 0) 
          bit ,x                        ; Bit Test Accumulator with Memory Byte (A) ∧ ()
          brclr 5,STACK_0f7,L006C       ; Branch to L006C if Bit 5 Clear (Mn = 0) 
          adc ,x                        ; ADD with CARRY, A ← (A) + () + (C)    
          ora ,x                        ; Logical OR Accumulator with Memory at , A <- (A) || ()
          add ,x                        ; Add without Carry, A ← (A) + ()       
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          brset 3,STACK_0ea,L007E       ; Branch to L007E if Bit 3 is set at STACK_0ea (Mn=1)
          brset 1,SCCR2,L008F           ; Branch to L008F if Bit RWU is set at SCCR2 (Mn=1)
          brclr 1,STACK_0ff,L0077       ; Branch to L0077 if Bit 1 Clear (Mn = 0) 
          brset 4,STACK_0ee,L0075       ; Branch to L0075 if Bit 4 is set at STACK_0ee (Mn=1)
          sub ,x                        ; Subtract Memory Byte from Accumulator , A ← (A) – ()
          cmp ,x                        ; Compare Accumulator with Memory Byte, (A) - ()
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
L2889: 
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          cmp RAM1_078                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_078)
          beq L00AF                     ; Branch to L00AF if Equal Z=1            
          cmp #$1F                      ; Compare Accumulator with Memory Byte, (A) - (#$1F)
          bne L0099                     ; Branch to L0099 if Not Equal (Z = 0);   
          eor RAM1_078                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_078)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          bra L00AF                     ; Branch Always (1 = 1)                   
; 
          bit #$E0                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$E0)
          beq L00AC                     ; Branch to L00AC if Equal Z=1            
          bit #$1F                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$1F)
          bne L00AC                     ; Branch to L00AC if Not Equal (Z = 0);   
          eor RAM1_078                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_078)
          beq L00AC                     ; Branch to L00AC if Equal Z=1            
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bhi L00AC                     ; Branch to L00AC if Higher C v Z = 0     
          bit #$00                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$00)
          rts                           ; Return from Subroutine                  
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
L28B0: 
          brset 6,RAM1_05f,L0132        ; Branch to L0132 if Bit 6 is set at RAM1_05f (Mn=1)
          brclr 1,RAM1_0bc,L00CB        ; Branch to L00CB if Bit 1 Clear (Mn = 0) 
          brset 7,RAM1_0b9,L00CB        ; Branch to L00CB if Bit 7 is set at RAM1_0b9 (Mn=1)
          brset 7,RAM1_0b3,L00CB        ; Branch to L00CB if Bit 7 is set at RAM1_0b3 (Mn=1)
          brclr 2,STACK_0ce,L00C5       ; Branch to L00C5 if Bit 2 Clear (Mn = 0) 
          brset 1,STACK_0ce,L00C5       ; Branch to L00C5 if Bit 1 is set at STACK_0ce (Mn=1)
          brclr 0,STACK_0ce,L00CB       ; Branch to L00CB if Bit 0 Clear (Mn = 0) 
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bclr 1,RAM1_0bc               ; Clear bit 1 at RAM1_0bc                 
          brclr 5,STACK_0cb,L00F5       ; Branch to L00F5 if Bit 5 Clear (Mn = 0) 
          lda STACK_0d5                 ; Load Accumulator with value of Memory at STACK_0d5, A <- (STACK_0d5)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          bne L00F5                     ; Branch to L00F5 if Not Equal (Z = 0);   
          lda STACK_0d5                 ; Load Accumulator with value of Memory at STACK_0d5, A <- (STACK_0d5)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          beq L00F5                     ; Branch to L00F5 if Equal Z=1            
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bcc L00F5                     ; Branch to L00F5 if C bit is cleared     
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 3,STACK_0ce,L00E8       ; Branch to L00E8 if Bit 3 is set at STACK_0ce (Mn=1)
          brclr 6,RAM1_0b5,L00EA        ; Branch to L00EA if Bit 6 Clear (Mn = 0) 
          brset 2,RAM1_0b8,L00EA        ; Branch to L00EA if Bit 2 is set at RAM1_0b8 (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          eor STACK_0d5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d5)
          and #$08                      ; Logical AND, A ← (A) && (#$08)        
          beq L00F5                     ; Branch to L00F5 if Equal Z=1            
          eor STACK_0d5                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d5)
          jsr L2591                     ; Jump to Subroutine at L2591             
          bclr 6,STACK_0d2              ; Clear bit 6 at STACK_0d2                
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bne L0101                     ; Branch to L0101 if Not Equal (Z = 0);   
          bset 6,STACK_0d2              ; Set Bit 6 at memory STACK_0d2 (Mn <- 1 )
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          and #$2B                      ; Logical AND, A ← (A) && (#$2B)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L0132                     ; Branch to L0132 if Not Equal (Z = 0);   
          brset 5,STACK_0ce,L0118       ; Branch to L0118 if Bit 5 is set at STACK_0ce (Mn=1)
          lda STACK_0ca                 ; Load Accumulator with value of Memory at STACK_0ca, A <- (STACK_0ca)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          beq L0118                     ; Branch to L0118 if Equal Z=1            
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bne L0132                     ; Branch to L0132 if Not Equal (Z = 0);   
          brset 5,STACK_0cb,L0123       ; Branch to L0123 if Bit 5 is set at STACK_0cb (Mn=1)
          brset 6,STACK_0cb,L0123       ; Branch to L0123 if Bit 6 is set at STACK_0cb (Mn=1)
          brclr 7,STACK_0cb,L0129       ; Branch to L0129 if Bit 7 Clear (Mn = 0) 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bclr 5,STACK_0cb              ; Clear bit 5 at STACK_0cb                
          bclr 6,STACK_0cb              ; Clear bit 6 at STACK_0cb                
          brset 6,STACK_0ce,L0132       ; Branch to L0132 if Bit 6 is set at STACK_0ce (Mn=1)
          brclr 6,RAM1_05d,L0132        ; Branch to L0132 if Bit 6 Clear (Mn = 0) 
          jmp L2CD4                     ; Unconditional Jump to L2CD4             
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$60                      ; Logical AND, A ← (A) && (#$60)        
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          bne L0143                     ; Branch to L0143 if Not Equal (Z = 0);   
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          bra L0159                     ; Branch Always (1 = 1)                   
; 
          lda #$10                      ; Load Accumulator with value of Memory at #$10, A <- (#$10)
          bra L014F                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$60                      ; Logical AND, A ← (A) && (#$60)        
          beq L0153                     ; Branch to L0153 if Equal Z=1            
          lda #$F0                      ; Load Accumulator with value of Memory at #$F0, A <- (#$F0)
          add RAM1_0b8                  ; Add without Carry, A ← (A) + (RAM1_0b8)
          bra L015E                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          ora #$60                      ; Logical OR Accumulator with Memory at #$60, A <- (A) || (#$60)
          brset 2,RAM1_0b8,L015E        ; Branch to L015E if Bit 2 is set at RAM1_0b8 (Mn=1)
          eor #$01                      ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (#$01)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          bra L018D                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          brset 2,RAM1_0b8,L016C        ; Branch to L016C if Bit 2 is set at RAM1_0b8 (Mn=1)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          inca                          ; Increment Accumulator by 1,A++          
          bra L018B                     ; Branch Always (1 = 1)                   
; 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          brclr 3,RAM1_0b8,L0189        ; Branch to L0189 if Bit 3 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L018B                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          brset 2,RAM1_0b8,L0181        ; Branch to L0181 if Bit 2 is set at RAM1_0b8 (Mn=1)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$08                      ; Logical AND, A ← (A) && (#$08)        
          bra L0187                     ; Branch Always (1 = 1)                   
; 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$02                      ; Logical AND, A ← (A) && (#$02)        
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
L2989: 
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          ora #$F0                      ; Logical OR Accumulator with Memory at #$F0, A <- (A) || (#$F0)
          sta RAM1_0b4                  ; Store Accumulator in Memory at RAM1_0b4 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          bra L01EA                     ; Branch Always (1 = 1)                   
L2993: 
          bra L0147                     ; Branch Always (1 = 1)                   
          bra L0133                     ; Branch Always (1 = 1)                   
          bra L0162                     ; Branch Always (1 = 1)                   
          bra L0174                     ; Branch Always (1 = 1)                   
; 
          brset 2,RAM1_0b8,L0199        ; Branch to L0199 if Bit 2 is set at RAM1_0b8 (Mn=1)
          brset 5,RAM1_069,L01C1        ; Branch to L01C1 if Bit 5 is set at RAM1_069 (Mn=1)
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bra L0189                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_0b8,L01AD        ; Branch to L01AD if Bit 2 Clear (Mn = 0) 
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          bset 5,RAM1_0b3               ; Set Bit 5 at memory RAM1_0b3 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          brclr 4,STACK_0ce,L0199       ; Branch to L0199 if Bit 4 Clear (Mn = 0) 
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          jmp L2A6B                     ; Unconditional Jump to L2A6B             
          jmp L2B14                     ; Unconditional Jump to L2B14             
; 
          brset 2,RAM1_0b6,L01C1        ; Branch to L01C1 if Bit 2 is set at RAM1_0b6 (Mn=1)
          brset 3,RAM1_08e,L01D1        ; Branch to L01D1 if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 2,RAM1_0b8,L01D8        ; Branch to L01D8 if Bit 2 Clear (Mn = 0) 
          rts                           ; Return from Subroutine                  
; 
          lda #$19                      ; Load Accumulator with value of Memory at #$19, A <- (#$19)
          brset 1,RAM1_0b5,L01C9        ; Branch to L01C9 if Bit 1 is set at RAM1_0b5 (Mn=1)
          lda #$18                      ; Load Accumulator with value of Memory at #$18, A <- (#$18)
          jsr L24E5                     ; Jump to Subroutine at L24E5             
          lda #$61                      ; Load Accumulator with value of Memory at #$61, A <- (#$61)
          jmp L2A57                     ; Unconditional Jump to L2A57             
; 
          bset 6,STACK_0c5              ; Set Bit 6 at memory STACK_0c5 (Mn <- 1 )
          lda #$63                      ; Load Accumulator with value of Memory at #$63, A <- (#$63)
          jmp L2A59                     ; Unconditional Jump to L2A59             
          jmp L2A91                     ; Unconditional Jump to L2A91             
; 
          bset 7,STACK_0d2              ; Set Bit 7 at memory STACK_0d2 (Mn <- 1 )
          ldx #$FA                      ; Load Index Register with Memory Byte, X <- (#$FA)
          stx STACK_0d1                 ; Store Index Register In Memory at STACK_0d1
          bra L0217                     ; Branch Always (1 = 1)                   
; 
          lda #$A4                      ; Load Accumulator with value of Memory at #$A4, A <- (#$A4)
          brclr 5,RAM1_0b6,L01EA        ; Branch to L01EA if Bit 5 Clear (Mn = 0) 
          lda #$B4                      ; Load Accumulator with value of Memory at #$B4, A <- (#$B4)
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          bra L0257                     ; Branch Always (1 = 1)                   
; 
          lda #$86                      ; Load Accumulator with value of Memory at #$86, A <- (#$86)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          brset 2,RAM1_0b8,L020E        ; Branch to L020E if Bit 2 is set at RAM1_0b8 (Mn=1)
          ldx #$9F                      ; Load Index Register with Memory Byte, X <- (#$9F)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_05b                  ; Store Accumulator in Memory at RAM1_05b 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          eor RAM1_05b                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_05b)
          and #$01                      ; Logical AND, A ← (A) && (#$01)        
          ora #$02                      ; Logical OR Accumulator with Memory at #$02, A <- (A) || (#$02)
          jmp L2989                     ; Unconditional Jump to L2989             
; 
          bset 7,STACK_0d2              ; Set Bit 7 at memory STACK_0d2 (Mn <- 1 )
          bra L021A                     ; Branch Always (1 = 1)                   
; 
          bset 7,STACK_0d2              ; Set Bit 7 at memory STACK_0d2 (Mn <- 1 )
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          cmp XA6CC                     ; Compare Accumulator with Memory Byte, (A) - (XA6CC)
          brclr 7,STACK_0d2,L01D8       ; Branch to L01D8 if Bit 7 Clear (Mn = 0) 
          ldx #$FA                      ; Load Index Register with Memory Byte, X <- (#$FA)
          stx STACK_0d1                 ; Store Index Register In Memory at STACK_0d1
          bra L023C                     ; Branch Always (1 = 1)                   
; 
          brset 7,STACK_0d2,L0255       ; Branch to L0255 if Bit 7 is set at STACK_0d2 (Mn=1)
          lda #$D4                      ; Load Accumulator with value of Memory at #$D4, A <- (#$D4)
          bra L0231                     ; Branch Always (1 = 1)                   
; 
          brset 7,STACK_0d2,L0255       ; Branch to L0255 if Bit 7 is set at STACK_0d2 (Mn=1)
          lda #$DC                      ; Load Accumulator with value of Memory at #$DC, A <- (#$DC)
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          bclr 5,RAM1_0bb               ; Clear bit 5 at RAM1_0bb                 
          bra L0257                     ; Branch Always (1 = 1)                   
; 
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          cmp XA6CC                     ; Compare Accumulator with Memory Byte, (A) - (XA6CC)
          brset 3,RAM1_05d,L026D        ; Branch to L026D if Bit 3 is set at RAM1_05d (Mn=1)
          bclr 4,RAM1_0bb               ; Clear bit 4 at RAM1_0bb                 
          bclr 5,RAM1_0bb               ; Clear bit 5 at RAM1_0bb                 
          brclr 7,STACK_0d2,L0248       ; Branch to L0248 if Bit 7 Clear (Mn = 0) 
          ora #$07                      ; Logical OR Accumulator with Memory at #$07, A <- (A) || (#$07)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          brclr 7,STACK_0d2,L0269       ; Branch to L0269 if Bit 7 Clear (Mn = 0) 
          ldx #$FA                      ; Load Index Register with Memory Byte, X <- (#$FA)
          stx STACK_0d1                 ; Store Index Register In Memory at STACK_0d1
          bra L0269                     ; Branch Always (1 = 1)                   
; 
          lda #$94                      ; Load Accumulator with value of Memory at #$94, A <- (#$94)
L2A57: 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
L2A59: 
          bset 5,STACK_0d2              ; Set Bit 5 at memory STACK_0d2 (Mn <- 1 )
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          jmp L2B0A                     ; Unconditional Jump to L2B0A             
; 
          lda #$8A                      ; Load Accumulator with value of Memory at #$8A, A <- (#$8A)
          jsr L2B36                     ; Jump to Subroutine at L2B36             
          bclr 5,STACK_0d2              ; Clear bit 5 at STACK_0d2                
          bset 7,RAM1_07e               ; Set Bit 7 at memory RAM1_07e (Mn <- 1 ) 
          lda #$90                      ; Load Accumulator with value of Memory at #$90, A <- (#$90)
L2A6B: 
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          rts                           ; Return from Subroutine                  
; 
          bset 5,RAM1_07e               ; Set Bit 5 at memory RAM1_07e (Mn <- 1 ) 
          brclr 5,STACK_0d2,L026D       ; Branch to L026D if Bit 5 Clear (Mn = 0) 
          bclr 1,STACK_0cb              ; Clear bit 1 at STACK_0cb                
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          jsr L2B36                     ; Jump to Subroutine at L2B36             
          bra L02A1                     ; Branch Always (1 = 1)                   
; 
          clrx                          ; Clear Index Register, X <- 0x00         
          bset 5,STACK_0d2              ; Set Bit 5 at memory STACK_0d2 (Mn <- 1 )
          brset 2,RAM1_0ba,L028E        ; Branch to L028E if Bit 2 is set at RAM1_0ba (Mn=1)
          brset 3,STACK_0ce,L028E       ; Branch to L028E if Bit 3 is set at STACK_0ce (Mn=1)
          brset 4,RAM1_0b6,L0291        ; Branch to L0291 if Bit 4 is set at RAM1_0b6 (Mn=1)
          brclr 7,RAM1_0ba,L0291        ; Branch to L0291 if Bit 7 Clear (Mn = 0) 
          brclr 2,RAM1_0b6,L0291        ; Branch to L0291 if Bit 2 Clear (Mn = 0) 
          jmp L2AFB                     ; Unconditional Jump to L2AFB             
; 
L2A91: 
          brclr 5,RAM1_0b6,L0297        ; Branch to L0297 if Bit 5 Clear (Mn = 0) 
          lda #$B4                      ; Load Accumulator with value of Memory at #$B4, A <- (#$B4)
          cmp XA642                     ; Compare Accumulator with Memory Byte, (A) - (XA642)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bset 4,STACK_0cc              ; Set Bit 4 at memory STACK_0cc (Mn <- 1 )
          lda #$B0                      ; Load Accumulator with value of Memory at #$B0, A <- (#$B0)
          bra L026B                     ; Branch Always (1 = 1)                   
; 
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cmp #$19                      ; Compare Accumulator with Memory Byte, (A) - (#$19)
          bcc L02B4                     ; Branch to L02B4 if C bit is cleared     
          bset 3,RAM1_05d               ; Set Bit 3 at memory RAM1_05d (Mn <- 1 ) 
          lda RAM1_0b4                  ; Load Accumulator with value of Memory at RAM1_0b4, A <- (RAM1_0b4)
          and #$74                      ; Logical AND, A ← (A) && (#$74)        
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          beq L02C5                     ; Branch to L02C5 if Equal Z=1            
          brclr 3,RAM1_081,L02C0        ; Branch to L02C0 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_081               ; Clear bit 3 at RAM1_081                 
          ldx #$A8                      ; Load Index Register with Memory Byte, X <- (#$A8)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          brclr 3,RAM1_05d,L02D9        ; Branch to L02D9 if Bit 3 Clear (Mn = 0) 
          bra L0300                     ; Branch Always (1 = 1)                   
; 
          ldx #$82                      ; Load Index Register with Memory Byte, X <- (#$82)
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$74                      ; Logical AND, A ← (A) && (#$74)        
          beq L02F7                     ; Branch to L02F7 if Equal Z=1            
          bclr 3,RAM1_05d               ; Clear bit 3 at RAM1_05d                 
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          bset 3,RAM1_081               ; Set Bit 3 at memory RAM1_081 (Mn <- 1 ) 
          lda RAM1_088                  ; Load Accumulator with value of Memory at RAM1_088, A <- (RAM1_088)
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          brset 3,RAM1_08e,L0300        ; Branch to L0300 if Bit 3 is set at RAM1_08e (Mn=1)
          lda RAM1_0b4                  ; Load Accumulator with value of Memory at RAM1_0b4, A <- (RAM1_0b4)
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          cmp RAM1_0b8                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0b8)
          bne L0300                     ; Branch to L0300 if Not Equal (Z = 0);   
          brclr 2,STACK_0ce,L0300       ; Branch to L0300 if Bit 2 Clear (Mn = 0) 
          brset 1,STACK_0ce,L0300       ; Branch to L0300 if Bit 1 is set at STACK_0ce (Mn=1)
          brset 0,STACK_0ce,L0300       ; Branch to L0300 if Bit 0 is set at STACK_0ce (Mn=1)
          jsr L1DF2                     ; Jump to Subroutine at L1DF2             
          and RAM1_056                  ; Logical AND, A ← (A) && (RAM1_056)    
          beq L0300                     ; Branch to L0300 if Equal Z=1            
          bclr 7,RAM1_0b5               ; Clear bit 7 at RAM1_0b5                 
          cmp XBFB3                     ; Compare Accumulator with Memory Byte, (A) - (XBFB3)
          bra L0300                     ; Branch Always (1 = 1)                   
; 
L2AFB: 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          jsr L2B36                     ; Jump to Subroutine at L2B36             
          bset 2,STACK_0ce              ; Set Bit 2 at memory STACK_0ce (Mn <- 1 )
          bclr 1,STACK_0ce              ; Clear bit 1 at STACK_0ce                
          bclr 0,STACK_0ce              ; Clear bit 0 at STACK_0ce                
          lda #$7D                      ; Load Accumulator with value of Memory at #$7D, A <- (#$7D)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
L2B0A: 
          brclr 3,STACK_0ce,L0313       ; Branch to L0313 if Bit 3 Clear (Mn = 0) 
          bclr 1,STACK_0ce              ; Clear bit 1 at STACK_0ce                
          lda #$32                      ; Load Accumulator with value of Memory at #$32, A <- (#$32)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          rts                           ; Return from Subroutine                  
; 
L2B14: 
          brset 5,STACK_0d2,L0325       ; Branch to L0325 if Bit 5 is set at STACK_0d2 (Mn=1)
          bset 5,STACK_0d2              ; Set Bit 5 at memory STACK_0d2 (Mn <- 1 )
          brclr 4,RAM1_0bb,L0320        ; Branch to L0320 if Bit 4 Clear (Mn = 0) 
          lda #$C2                      ; Load Accumulator with value of Memory at #$C2, A <- (#$C2)
          bra L0333                     ; Branch Always (1 = 1)                   
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          sta STACK_0cc                 ; Store Accumulator in Memory at STACK_0cc
          rts                           ; Return from Subroutine                  
; 
          lda STACK_0cc                 ; Load Accumulator with value of Memory at STACK_0cc, A <- (STACK_0cc)
          cmp #$FF                      ; Compare Accumulator with Memory Byte, (A) - (#$FF)
          bne L0320                     ; Branch to L0320 if Not Equal (Z = 0);   
          bclr 5,STACK_0d2              ; Clear bit 5 at STACK_0d2                
          lda RAM1_0b7                  ; Load Accumulator with value of Memory at RAM1_0b7, A <- (RAM1_0b7)
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          lda #$C0                      ; Load Accumulator with value of Memory at #$C0, A <- (#$C0)
          jmp L24E8                     ; Unconditional Jump to L24E8             
; 
L2B36: 
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          jsr L261E                     ; Jump to Subroutine at L261E             
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          eor RAM1_0b8                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0b8)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          sta RAM1_0b4                  ; Store Accumulator in Memory at RAM1_0b4 
          brclr 5,RAM1_069,L0350        ; Branch to L0350 if Bit 5 Clear (Mn = 0) 
          bclr 0,RAM1_0b4               ; Clear bit 0 at RAM1_0b4                 
          rts                           ; Return from Subroutine                  
; 
L2B51: 
          brclr 3,STACK_0ce,L0357       ; Branch to L0357 if Bit 3 Clear (Mn = 0) 
          jmp L2BD8                     ; Unconditional Jump to L2BD8             
; 
          brset 7,RAM1_0b9,L0380        ; Branch to L0380 if Bit 7 is set at RAM1_0b9 (Mn=1)
          brclr 7,RAM1_0ba,L0360        ; Branch to L0360 if Bit 7 Clear (Mn = 0) 
          brset 2,RAM1_0b6,L0380        ; Branch to L0380 if Bit 2 is set at RAM1_0b6 (Mn=1)
          brclr 3,RAM1_08e,L0380        ; Branch to L0380 if Bit 3 Clear (Mn = 0) 
          brclr 7,STACK_0c5,L0380       ; Branch to L0380 if Bit 7 Clear (Mn = 0) 
          brclr 4,RAM1_0b5,L0380        ; Branch to L0380 if Bit 4 Clear (Mn = 0) 
          brclr 6,STACK_0c5,L0380       ; Branch to L0380 if Bit 6 Clear (Mn = 0) 
          bclr 6,STACK_0c5              ; Clear bit 6 at STACK_0c5                
          bset 5,STACK_0c5              ; Set Bit 5 at memory STACK_0c5 (Mn <- 1 )
          lda STACK_0c5                 ; Load Accumulator with value of Memory at STACK_0c5, A <- (STACK_0c5)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          jsr L259A                     ; Jump to Subroutine at L259A             
          lda STACK_0c5                 ; Load Accumulator with value of Memory at STACK_0c5, A <- (STACK_0c5)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          add #$23                      ; Add without Carry, A ← (A) + (#$23)   
          jmp L24E8                     ; Unconditional Jump to L24E8             
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          brclr 4,RAM1_0bb,L0389        ; Branch to L0389 if Bit 4 Clear (Mn = 0) 
          brclr 3,RAM1_0b5,L0389        ; Branch to L0389 if Bit 3 Clear (Mn = 0) 
          inca                          ; Increment Accumulator by 1,A++          
          brset 7,RAM1_0b9,L0392        ; Branch to L0392 if Bit 7 is set at RAM1_0b9 (Mn=1)
          brclr 7,RAM1_0ba,L0394        ; Branch to L0394 if Bit 7 Clear (Mn = 0) 
          brclr 2,RAM1_0b6,L0394        ; Branch to L0394 if Bit 2 Clear (Mn = 0) 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          jsr L2565                     ; Jump to Subroutine at L2565             
          lda #$13                      ; Load Accumulator with value of Memory at #$13, A <- (#$13)
          brset 6,STACK_0d2,L03CE       ; Branch to L03CE if Bit 6 is set at STACK_0d2 (Mn=1)
          brclr 3,RAM1_0b5,L03B8        ; Branch to L03B8 if Bit 3 Clear (Mn = 0) 
          brclr 7,RAM1_0ba,L03A5        ; Branch to L03A5 if Bit 7 Clear (Mn = 0) 
          brset 2,RAM1_0b6,L03B8        ; Branch to L03B8 if Bit 2 is set at RAM1_0b6 (Mn=1)
          brclr 4,STACK_0ce,L03B3       ; Branch to L03B3 if Bit 4 Clear (Mn = 0) 
          brset 6,RAM1_0bb,L03AE        ; Branch to L03AE if Bit 6 is set at RAM1_0bb (Mn=1)
          brclr 0,RAM1_0bb,L03B8        ; Branch to L03B8 if Bit 0 Clear (Mn = 0) 
          lda #$CE                      ; Load Accumulator with value of Memory at #$CE, A <- (#$CE)
          jmp L24CB                     ; Unconditional Jump to L24CB             
; 
          lda #$C2                      ; Load Accumulator with value of Memory at #$C2, A <- (#$C2)
          brset 4,RAM1_0bb,L03B0        ; Branch to L03B0 if Bit 4 is set at RAM1_0bb (Mn=1)
          brclr 5,RAM1_0bb,L03D7        ; Branch to L03D7 if Bit 5 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 2,RAM1_0b8,L03C6        ; Branch to L03C6 if Bit 2 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          brclr 3,RAM1_08e,L03C6        ; Branch to L03C6 if Bit 3 Clear (Mn = 0) 
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          sta STACK_0c9                 ; Store Accumulator in Memory at STACK_0c9
          lda RAM1_0b7                  ; Load Accumulator with value of Memory at RAM1_0b7, A <- (RAM1_0b7)
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          lda #$C0                      ; Load Accumulator with value of Memory at #$C0, A <- (#$C0)
          brclr 7,STACK_0cb,L03D4       ; Branch to L03D4 if Bit 7 Clear (Mn = 0) 
          jmp L24DC                     ; Unconditional Jump to L24DC             
          jmp L24CB                     ; Unconditional Jump to L24CB             
          rts                           ; Return from Subroutine                  
; 
L2BD8: 
          brset 6,RAM1_05f,L0429        ; Branch to L0429 if Bit 6 is set at RAM1_05f (Mn=1)
          brclr 2,RAM1_0b6,L03E5        ; Branch to L03E5 if Bit 2 Clear (Mn = 0) 
          jsr L2B0A                     ; Jump to Subroutine at L2B0A             
          lda #$70                      ; Load Accumulator with value of Memory at #$70, A <- (#$70)
          bra L03CE                     ; Branch Always (1 = 1)                   
; 
          lda STACK_0cf                 ; Load Accumulator with value of Memory at STACK_0cf, A <- (STACK_0cf)
deca 
          brset 1,STACK_0ce,L0413       ; Branch to L0413 if Bit 1 is set at STACK_0ce (Mn=1)
          brclr 0,RAM1_0b9,L03F6        ; Branch to L03F6 if Bit 0 Clear (Mn = 0) 
          brset 6,RAM1_0bb,L03F3        ; Branch to L03F3 if Bit 6 is set at RAM1_0bb (Mn=1)
          bmi L040B                     ; Branch to L040B if Minus N = 1          
          brset 2,RAM1_0bf,L040B        ; Branch to L040B if Bit 2 is set at RAM1_0bf (Mn=1)
          bpl L0406                     ; Branch to L0406 if Plus N = 0           
          lda #$32                      ; Load Accumulator with value of Memory at #$32, A <- (#$32)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          lda #$D4                      ; Load Accumulator with value of Memory at #$D4, A <- (#$D4)
          brclr 3,RAM1_0b6,L0403        ; Branch to L0403 if Bit 3 Clear (Mn = 0) 
          lda #$DC                      ; Load Accumulator with value of Memory at #$DC, A <- (#$DC)
          jmp L2A57                     ; Unconditional Jump to L2A57             
; 
          brclr 5,STACK_0d2,L039F       ; Branch to L039F if Bit 5 Clear (Mn = 0) 
          bra L03E1                     ; Branch Always (1 = 1)                   
; 
          lda #$0A                      ; Load Accumulator with value of Memory at #$0A, A <- (#$0A)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          lda #$7D                      ; Load Accumulator with value of Memory at #$7D, A <- (#$7D)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          bpl L039F                     ; Branch to L039F if Plus N = 0           
          lda #$4B                      ; Load Accumulator with value of Memory at #$4B, A <- (#$4B)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          jsr L2649                     ; Jump to Subroutine at L2649             
          bset 6,RAM1_05f               ; Set Bit 6 at memory RAM1_05f (Mn <- 1 ) 
          lda RAM1_0b7                  ; Load Accumulator with value of Memory at RAM1_0b7, A <- (RAM1_0b7)
          sta STACK_0c4                 ; Store Accumulator in Memory at STACK_0c4
          lda #$15                      ; Load Accumulator with value of Memory at #$15, A <- (#$15)
          jmp L24DC                     ; Unconditional Jump to L24DC             
; 
          lda STACK_0cf                 ; Load Accumulator with value of Memory at STACK_0cf, A <- (STACK_0cf)
deca 
          bpl L0424                     ; Branch to L0424 if Plus N = 0           
          bclr 0,RAM1_061               ; Clear bit 0 at RAM1_061                 
          bset 2,RAM1_05d               ; Set Bit 2 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
          jmp L2504                     ; Unconditional Jump to L2504             
; 
L2C36: 
          bclr 7,STACK_0cb              ; Clear bit 7 at STACK_0cb                
          brset 6,RAM1_05f,L0433        ; Branch to L0433 if Bit 6 is set at RAM1_05f (Mn=1)
          brclr 7,RAM1_069,L0433        ; Branch to L0433 if Bit 7 Clear (Mn = 0) 
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          brset 2,RAM1_0b8,L0463        ; Branch to L0463 if Bit 2 is set at RAM1_0b8 (Mn=1)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X2CCF,x                   ; Load Accumulator with value of Memory at X2CCF, A <- (X2CCF)
          brclr 5,RAM1_069,L044E        ; Branch to L044E if Bit 5 Clear (Mn = 0) 
          and #$0C                      ; Logical AND, A ← (A) && (#$0C)        
          brclr 7,RAM1_0ba,L0454        ; Branch to L0454 if Bit 7 Clear (Mn = 0) 
          brset 2,RAM1_0b6,L0457        ; Branch to L0457 if Bit 2 is set at RAM1_0b6 (Mn=1)
          brclr 3,RAM1_0b5,L0459        ; Branch to L0459 if Bit 3 Clear (Mn = 0) 
          ora #$02                      ; Logical OR Accumulator with Memory at #$02, A <- (A) || (#$02)
          brset 3,RAM1_08e,L046A        ; Branch to L046A if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 1,RAM1_0bb,L046A        ; Branch to L046A if Bit 1 Clear (Mn = 0) 
          ora #$01                      ; Logical OR Accumulator with Memory at #$01, A <- (A) || (#$01)
          bra L046A                     ; Branch Always (1 = 1)                   
; 
          lda #$18                      ; Load Accumulator with value of Memory at #$18, A <- (#$18)
          brclr 3,RAM1_0b8,L046A        ; Branch to L046A if Bit 3 Clear (Mn = 0) 
          lda #$1C                      ; Load Accumulator with value of Memory at #$1C, A <- (#$1C)
          clrx                          ; Clear Index Register, X <- 0x00         
          jsr L24F5                     ; Jump to Subroutine at L24F5             
          brset 3,STACK_0ce,L0476       ; Branch to L0476 if Bit 3 is set at STACK_0ce (Mn=1)
          lda RAM1_0bd                  ; Load Accumulator with value of Memory at RAM1_0bd, A <- (RAM1_0bd)
          brset 2,RAM1_0bb,L0478        ; Branch to L0478 if Bit 2 is set at RAM1_0bb (Mn=1)
          lda RAM1_0b8                  ; Load Accumulator with value of Memory at RAM1_0b8, A <- (RAM1_0b8)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          brclr 7,RAM1_0b9,L047E        ; Branch to L047E if Bit 7 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L2617                     ; Jump to Subroutine at L2617             
          jsr L24F5                     ; Jump to Subroutine at L24F5             
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          brset 2,RAM1_0b8,L04AD        ; Branch to L04AD if Bit 2 is set at RAM1_0b8 (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          brclr 7,RAM1_0ba,L0491        ; Branch to L0491 if Bit 7 Clear (Mn = 0) 
          brset 2,RAM1_0b6,L0494        ; Branch to L0494 if Bit 2 is set at RAM1_0b6 (Mn=1)
          brclr 3,RAM1_0b5,L0496        ; Branch to L0496 if Bit 3 Clear (Mn = 0) 
          ora #$01                      ; Logical OR Accumulator with Memory at #$01, A <- (A) || (#$01)
          brset 3,STACK_0ce,L049C       ; Branch to L049C if Bit 3 is set at STACK_0ce (Mn=1)
          brclr 6,RAM1_0b5,L049E        ; Branch to L049E if Bit 6 Clear (Mn = 0) 
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
          brclr 3,RAM1_08e,L04A6        ; Branch to L04A6 if Bit 3 Clear (Mn = 0) 
          brclr 4,RAM1_0b5,L04A6        ; Branch to L04A6 if Bit 4 Clear (Mn = 0) 
          ora #$04                      ; Logical OR Accumulator with Memory at #$04, A <- (A) || (#$04)
          brclr 1,RAM1_0b8,L04B2        ; Branch to L04B2 if Bit 1 Clear (Mn = 0) 
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          bra L04B2                     ; Branch Always (1 = 1)                   
; 
          brclr 3,RAM1_0b8,L04B2        ; Branch to L04B2 if Bit 3 Clear (Mn = 0) 
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          brclr 5,RAM1_0b6,L04B7        ; Branch to L04B7 if Bit 5 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          brclr 5,RAM1_069,L04BC        ; Branch to L04BC if Bit 5 Clear (Mn = 0) 
          and #$2F                      ; Logical AND, A ← (A) && (#$2F)        
          jsr L24F5                     ; Jump to Subroutine at L24F5             
          clra                          ; Clear byte Accumulator, A <- 0x00       
          incx                          ; Increment Index register by 1,X++       
          brclr 2,RAM1_0bb,L04CB        ; Branch to L04CB if Bit 2 Clear (Mn = 0) 
          lda RAM1_0bd                  ; Load Accumulator with value of Memory at RAM1_0bd, A <- (RAM1_0bd)
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          jsr L2617                     ; Jump to Subroutine at L2617             
          jsr L24F5                     ; Jump to Subroutine at L24F5             
          rts                           ; Return from Subroutine                  
; 
X2CCF: 
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bhcc L051E                    ; Branch to L051E if half carry bit Clear H=0
          bmc L0455                     ; Branch to L0455 if Interrupt Mask Clear I=0
L2CD4: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brclr 3,STACK_0ce,L04DA       ; Branch to L04DA if Bit 3 Clear (Mn = 0) 
          ldx #$52                      ; Load Index Register with Memory Byte, X <- (#$52)
          lda X2CF1,x                   ; Load Accumulator with value of Memory at X2CF1, A <- (X2CF1)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X2CF0,x                   ; Load Accumulator with value of Memory at X2CF0, A <- (X2CF0)
          beq L04EF                     ; Branch to L04EF if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L04DA                     ; Branch to L04DA if Not Equal (Z = 0);   
          ldx X2CEF,x                   ; Load Index Register with Memory Byte, X <- (X2CEF)
          jsr L2993,x ;INFO: index jump ; Jump to Subroutine at L2993             
X2CEF: 
          rts                           ; Return from Subroutine                  
; 
X2CF0: 
          sub STACK_0e9,x               ; Subtract Memory Byte from Accumulator , A ← (A) – (STACK_0e9)
          sub #$CD                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$CD)
          rti                           ; Return from Interrupt                   
; 
          sbc XC0DB,x                   ; Subtract Memory Byte XC0DB and Carry Bit from Accumulator, A ←  (A) – (XC0DB) – (C)
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,STACK_0f4,L04FE       ; Branch to L04FE if Bit 0 is set at STACK_0f4 (Mn=1)
          adc X0025,x                   ; ADD with CARRY, A ← (A) + (X0025) + (C) 
          adc #$2F                      ; ADD with CARRY, A ← (A) + (#$2F) + (C) 
          adc X3EE7                     ; ADD with CARRY, A ← (A) + (X3EE7) + (C) 
; 
          db $84                        ; data?  ,  ,  ,                          
; 
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
; 
          db $87, $87                   ; data?  ,  ,  ,                          
; 
          adc RAM1_098                  ; ADD with CARRY, A ← (A) + (RAM1_098) + (C) 
          adc RAM1_0a7                  ; ADD with CARRY, A ← (A) + (RAM1_0a7) + (C) 
; 
          db $82                        ; data?  ,  ,  ,                          
; 
          eor RAM1_07e                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_07e)
          sta X92D8                     ; Store Accumulator in Memory at X92D8    
          sec                           ; Set Carry Bit , C ← 1                 
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          db $84                        ; data?  ,  ,  ,                          
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
; 
          db $87                        ; data?  ,  ,  ,                          
; 
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
          adc RAM1_09d                  ; ADD with CARRY, A ← (A) + (RAM1_09d) + (C) 
          adc RAM1_0bc                  ; ADD with CARRY, A ← (A) + (RAM1_0bc) + (C) 
; 
          db $82                        ; data?  ,  ,  ,                          
; 
          jsr L007E                     ; Jump to Subroutine at L007E             
          jmp L92DD,x ;INFO: index jump ; Unconditional Jump to L92DD             
; 
          sec                           ; Set Carry Bit , C ← 1                 
          sub ,x                        ; Subtract Memory Byte from Accumulator , A ← (A) – ()
; 
          db $84                        ; data?  ,  ,  ,                          
; 
          stx RAM1_087,x                ; Store Index Register In Memory at RAM1_087
; 
          db $90                        ; data?  ,  ,  ,                          
; 
          adc RAM1_08f                  ; ADD with CARRY, A ← (A) + (RAM1_08f) + (C) 
          adc RAM1_0b0                  ; ADD with CARRY, A ← (A) + (RAM1_0b0) + (C) 
; 
          db $82, $AF, $7E              ; data?  ,  , ~,                          
; 
          sub X92CF,x                   ; Subtract Memory Byte from Accumulator , A ← (A) – (X92CF)
          sec                           ; Set Carry Bit , C ← 1                 
          brclr 5,RAM1_050,L052A        ; Branch to L052A if Bit 5 Clear (Mn = 0) 
; 
          db $45                        ; data? E,  ,  ,                          
; 
          bit RAM1_05b                  ; Bit Test Accumulator with Memory Byte (A) ∧ (RAM1_05b)
          bit X6408,x                   ; Bit Test Accumulator with Memory Byte (A) ∧ (X6408)
          brset 2,STACK_0f6,L0550       ; Branch to L0550 if Bit 2 is set at STACK_0f6 (Mn=1)
          lda X2236,x                   ; Load Accumulator with value of Memory at X2236, A <- (X2236)
          brset 3,STACK_0e7,L04D9       ; Branch to L04D9 if Bit 3 is set at STACK_0e7 (Mn=1)
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          db $95                        ; data?  ,  ,  ,                          
; 
          jsr ,x ;INFO: index jump      ; Jump to Subroutine at                   
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
          sub ,x                        ; Subtract Memory Byte from Accumulator , A ← (A) – ()
; 
          db $95                        ; data?  ,  ,  ,                          
; 
          stx RAM1_09c,x                ; Store Index Register In Memory at RAM1_09c
          bit ,x                        ; Bit Test Accumulator with Memory Byte (A) ∧ ()
          lsr STACK_0e0,x               ; Logical Shift Right of STACK_0e0, b7 -> [b7 >>>> b0] -> C
          sbc STACK_0f7,x               ; Subtract Memory Byte STACK_0f7 and Carry Bit from Accumulator, A ←  (A) – (STACK_0f7) – (C)
          brset 4,PortA,L0564           ; Branch to L0564 if Bit SLAVE_CLOCK is set at PortA (Mn=1)
          neg OCL2,x                    ; Negate Byte of OCL2 (Two’s Complement), OCL2 = 0x00 - (OCL2)
          brclr 3,RAM1_08b,L0577        ; Branch to L0577 if Bit 3 Clear (Mn = 0) 
          lda #$48                      ; Load Accumulator with value of Memory at #$48, A <- (#$48)
          brset 2,RAM1_0be,L0562        ; Branch to L0562 if Bit 2 is set at RAM1_0be (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          brset 3,RAM1_05f,L057A        ; Branch to L057A if Bit 3 is set at RAM1_05f (Mn=1)
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          brset 4,RAM1_0ba,L057A        ; Branch to L057A if Bit 4 is set at RAM1_0ba (Mn=1)
          brset 2,RAM1_0be,L057A        ; Branch to L057A if Bit 2 is set at RAM1_0be (Mn=1)
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          brset 7,RAM1_05f,L0581        ; Branch to L0581 if Bit 7 is set at RAM1_05f (Mn=1)
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          brset 2,RAM1_0ba,L0581        ; Branch to L0581 if Bit 2 is set at RAM1_0ba (Mn=1)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L0581                     ; Branch Always (1 = 1)                   
; 
          brclr 5,STACK_0cb,L0581       ; Branch to L0581 if Bit 5 Clear (Mn = 0) 
          bclr 5,STACK_0cb              ; Clear bit 5 at STACK_0cb                
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          eor RAM1_07f                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_07f)
          and #$CC                      ; Logical AND, A ← (A) && (#$CC)        
          sta RAM1_05b                  ; Store Accumulator in Memory at RAM1_05b 
          eor RAM1_07f                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_07f)
          sta RAM1_07f                  ; Store Accumulator in Memory at RAM1_07f 
          and #$60                      ; Logical AND, A ← (A) && (#$60)        
          bne L059E                     ; Branch to L059E if Not Equal (Z = 0);   
          brset 3,RAM1_081,L059E        ; Branch to L059E if Bit 3 is set at RAM1_081 (Mn=1)
          brclr 4,RAM1_07f,L059E        ; Branch to L059E if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_07f               ; Clear bit 4 at RAM1_07f                 
          ldx #$A8                      ; Load Index Register with Memory Byte, X <- (#$A8)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          brclr 0,RAM1_061,L05FE        ; Branch to L05FE if Bit 0 Clear (Mn = 0) 
          tst RAM1_05b                  ; Test Memory Byte for Negative or Zero, (RAM1_05b) – 0x00
          beq L05CC                     ; Branch to L05CC if Equal Z=1            
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bset 0,STACK_0cb              ; Set Bit 0 at memory STACK_0cb (Mn <- 1 )
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          brset 3,STACK_0ce,L05FF       ; Branch to L05FF if Bit 3 is set at STACK_0ce (Mn=1)
          brclr 3,RAM1_05b,L05BB        ; Branch to L05BB if Bit 3 Clear (Mn = 0) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bset 0,STACK_0cb              ; Set Bit 0 at memory STACK_0cb (Mn <- 1 )
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          brclr 6,RAM1_05b,L05CC        ; Branch to L05CC if Bit 6 Clear (Mn = 0) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          brset 6,RAM1_07f,L05CC        ; Branch to L05CC if Bit 6 is set at RAM1_07f (Mn=1)
          ldx #$A8                      ; Load Index Register with Memory Byte, X <- (#$A8)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          bra L05CC                     ; Branch Always (1 = 1)                   
; 
          brclr 5,RAM1_07c,L05FF        ; Branch to L05FF if Bit 5 Clear (Mn = 0) 
          brset 6,RAM1_07c,L05EB        ; Branch to L05EB if Bit 6 is set at RAM1_07c (Mn=1)
          brclr 2,RAM1_069,L05FF        ; Branch to L05FF if Bit 2 Clear (Mn = 0) 
L2DD5: 
          bclr 2,RAM1_069               ; Clear bit 2 at RAM1_069                 
          bclr 2,STACK_0d2              ; Clear bit 2 at STACK_0d2                
          bclr 4,STACK_0d3              ; Clear bit 4 at STACK_0d3                
          ldx #$A5                      ; Load Index Register with Memory Byte, X <- (#$A5)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          brset 1,RAM1_07f,L05FF        ; Branch to L05FF if Bit 1 is set at RAM1_07f (Mn=1)
          brclr 0,RAM1_07f,L05FF        ; Branch to L05FF if Bit 0 Clear (Mn = 0) 
          brset 2,RAM1_081,L05FB        ; Branch to L05FB if Bit 2 is set at RAM1_081 (Mn=1)
          bra L0619                     ; Branch Always (1 = 1)                   
; 
          brset 2,RAM1_069,L05FF        ; Branch to L05FF if Bit 2 is set at RAM1_069 (Mn=1)
          bset 2,RAM1_069               ; Set Bit 2 at memory RAM1_069 (Mn <- 1 ) 
          bset 2,RAM1_081               ; Set Bit 2 at memory RAM1_081 (Mn <- 1 ) 
          brclr 1,RAM1_07f,L05F7        ; Branch to L05F7 if Bit 1 Clear (Mn = 0) 
          bclr 2,RAM1_081               ; Clear bit 2 at RAM1_081                 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          jmp L2F57                     ; Unconditional Jump to L2F57             
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          brset 0,RAM1_080,L0608        ; Branch to L0608 if Bit 0 is set at RAM1_080 (Mn=1)
          bit #$EA                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$EA)
          beq L0652                     ; Branch to L0652 if Equal Z=1            
          bit #$03                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$03)
          bne L061C                     ; Branch to L061C if Not Equal (Z = 0);   
          brclr 1,STACK_0d2,L0661       ; Branch to L0661 if Bit 1 Clear (Mn = 0) 
          brset 0,STACK_0d2,L0661       ; Branch to L0661 if Bit 0 is set at STACK_0d2 (Mn=1)
          bset 0,STACK_0d2              ; Set Bit 0 at memory STACK_0d2 (Mn <- 1 )
          ldx #$88                      ; Load Index Register with Memory Byte, X <- (#$88)
          jmp L2EC7                     ; Unconditional Jump to L2EC7             
          jmp L2F12                     ; Unconditional Jump to L2F12             
; 
          brclr 0,RAM1_07f,L065E        ; Branch to L065E if Bit 0 Clear (Mn = 0) 
          brclr 2,STACK_0d2,L06A0       ; Branch to L06A0 if Bit 2 Clear (Mn = 0) 
          brset 5,RAM1_07f,L065E        ; Branch to L065E if Bit 5 is set at RAM1_07f (Mn=1)
          brclr 3,RAM1_05f,L062B        ; Branch to L062B if Bit 3 Clear (Mn = 0) 
          brset 1,RAM1_07c,L06A0        ; Branch to L06A0 if Bit 1 is set at RAM1_07c (Mn=1)
          brset 7,STACK_0d3,L06A0       ; Branch to L06A0 if Bit 7 is set at STACK_0d3 (Mn=1)
          bset 7,STACK_0d3              ; Set Bit 7 at memory STACK_0d3 (Mn <- 1 )
          bclr 2,STACK_0d3              ; Clear bit 2 at STACK_0d3                
          brclr 3,RAM1_06a,L0637        ; Branch to L0637 if Bit 3 Clear (Mn = 0) 
          bset 2,STACK_0d3              ; Set Bit 2 at memory STACK_0d3 (Mn <- 1 )
          bclr 1,STACK_0d3              ; Clear bit 1 at STACK_0d3                
          brclr 1,RAM1_07c,L064D        ; Branch to L064D if Bit 1 Clear (Mn = 0) 
          bset 1,STACK_0d3              ; Set Bit 1 at memory STACK_0d3 (Mn <- 1 )
          bset 0,STACK_0d3              ; Set Bit 0 at memory STACK_0d3 (Mn <- 1 )
          brclr 0,RAM1_07c,L0648        ; Branch to L0648 if Bit 0 Clear (Mn = 0) 
          brset 2,RAM1_07c,L064D        ; Branch to L064D if Bit 2 is set at RAM1_07c (Mn=1)
          bra L064B                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_07c,L064D        ; Branch to L064D if Bit 2 Clear (Mn = 0) 
          bclr 0,STACK_0d3              ; Clear bit 0 at STACK_0d3                
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          jmp L2F06                     ; Unconditional Jump to L2F06             
; 
          brclr 3,RAM1_08b,L065E        ; Branch to L065E if Bit 3 Clear (Mn = 0) 
          brset 7,RAM1_060,L065E        ; Branch to L065E if Bit 7 is set at RAM1_060 (Mn=1)
          lda STACK_0ce                 ; Load Accumulator with value of Memory at STACK_0ce, A <- (STACK_0ce)
          and #$C8                      ; Logical AND, A ← (A) && (#$C8)        
          beq L066A                     ; Branch to L066A if Equal Z=1            
          brset 1,STACK_0d2,L06C3       ; Branch to L06C3 if Bit 1 is set at STACK_0d2 (Mn=1)
          brset 2,STACK_0d2,L0667       ; Branch to L0667 if Bit 2 is set at STACK_0d2 (Mn=1)
          brclr 3,RAM1_07c,L06A0        ; Branch to L06A0 if Bit 3 Clear (Mn = 0) 
          jmp L2F00                     ; Unconditional Jump to L2F00             
; 
          brclr 0,RAM1_07f,L0681        ; Branch to L0681 if Bit 0 Clear (Mn = 0) 
          brset 1,STACK_0d2,L06C3       ; Branch to L06C3 if Bit 1 is set at STACK_0d2 (Mn=1)
          brclr 6,RAM1_07c,L06A0        ; Branch to L06A0 if Bit 6 Clear (Mn = 0) 
          brset 4,RAM1_07c,L06A0        ; Branch to L06A0 if Bit 4 is set at RAM1_07c (Mn=1)
          brclr 2,STACK_0d2,L06CD       ; Branch to L06CD if Bit 2 Clear (Mn = 0) 
          brset 7,STACK_0d3,L06CD       ; Branch to L06CD if Bit 7 is set at STACK_0d3 (Mn=1)
          bra L06A0                     ; Branch Always (1 = 1)                   
          jmp L2DD5                     ; Unconditional Jump to L2DD5             
; 
          brset 2,STACK_0d2,L0700       ; Branch to L0700 if Bit 2 is set at STACK_0d2 (Mn=1)
          brset 3,RAM1_07c,L0700        ; Branch to L0700 if Bit 3 is set at RAM1_07c (Mn=1)
          brclr 6,RAM1_06a,L0619        ; Branch to L0619 if Bit 6 Clear (Mn = 0) 
          lda RAM2_0265                 ; Load Accumulator with value of Memory at RAM2_0265, A <- (RAM2_0265)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          cmp #$B0                      ; Compare Accumulator with Memory Byte, (A) - (#$B0)
          beq L069A                     ; Branch to L069A if Equal Z=1            
          brclr 3,STACK_0d4,L069A       ; Branch to L069A if Bit 3 Clear (Mn = 0) 
          bclr 3,STACK_0d4              ; Clear bit 3 at STACK_0d4                
          bra L06B4                     ; Branch Always (1 = 1)                   
; 
          brclr 1,STACK_0d2,L06B4       ; Branch to L06B4 if Bit 1 Clear (Mn = 0) 
          brset 0,STACK_0d2,L06B4       ; Branch to L06B4 if Bit 0 is set at STACK_0d2 (Mn=1)
          bclr 5,RAM1_080               ; Clear bit 5 at RAM1_080                 
          lda RAM1_085                  ; Load Accumulator with value of Memory at RAM1_085, A <- (RAM1_085)
          bne L06A8                     ; Branch to L06A8 if Not Equal (Z = 0);   
          bset 5,RAM1_080               ; Set Bit 5 at memory RAM1_080 (Mn <- 1 ) 
          brclr 6,RAM1_05d,L0720        ; Branch to L0720 if Bit 6 Clear (Mn = 0) 
          brclr 3,RAM1_08b,L0720        ; Branch to L0720 if Bit 3 Clear (Mn = 0) 
          brset 0,RAM1_080,L0720        ; Branch to L0720 if Bit 0 is set at RAM1_080 (Mn=1)
          jmp L310A                     ; Unconditional Jump to L310A             
; 
          bset 1,STACK_0d2              ; Set Bit 1 at memory STACK_0d2 (Mn <- 1 )
          bclr 0,STACK_0d2              ; Clear bit 0 at STACK_0d2                
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          ldx #$8D                      ; Load Index Register with Memory Byte, X <- (#$8D)
          brclr 2,STACK_0d4,L06C7       ; Branch to L06C7 if Bit 2 Clear (Mn = 0) 
          ldx #$83                      ; Load Index Register with Memory Byte, X <- (#$83)
          bra L06C7                     ; Branch Always (1 = 1)                   
; 
          ldx #$80                      ; Load Index Register with Memory Byte, X <- (#$80)
          bclr 1,STACK_0d2              ; Clear bit 1 at STACK_0d2                
L2EC7: 
          stx RAM1_07d                  ; Store Index Register In Memory at RAM1_07d
          bset 6,RAM1_094               ; Set Bit 6 at memory RAM1_094 (Mn <- 1 ) 
          bra L0716                     ; Branch Always (1 = 1)                   
; 
          bset 2,STACK_0d2              ; Set Bit 2 at memory STACK_0d2 (Mn <- 1 )
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          bclr 1,RAM1_07f               ; Clear bit 1 at RAM1_07f                 
          bset 0,RAM1_07f               ; Set Bit 0 at memory RAM1_07f (Mn <- 1 ) 
          brset 3,STACK_0d3,L06E5       ; Branch to L06E5 if Bit 3 is set at STACK_0d3 (Mn=1)
          bset 3,STACK_0d3              ; Set Bit 3 at memory STACK_0d3 (Mn <- 1 )
          lda #$8C                      ; Load Accumulator with value of Memory at #$8C, A <- (#$8C)
          brset 4,STACK_0d3,L0706       ; Branch to L0706 if Bit 4 is set at STACK_0d3 (Mn=1)
          lda #$8D                      ; Load Accumulator with value of Memory at #$8D, A <- (#$8D)
          bset 0,RAM1_07c               ; Set Bit 0 at memory RAM1_07c (Mn <- 1 ) 
          bra L0706                     ; Branch Always (1 = 1)                   
; 
          lda #$8F                      ; Load Accumulator with value of Memory at #$8F, A <- (#$8F)
          brclr 7,STACK_0d3,L0706       ; Branch to L0706 if Bit 7 Clear (Mn = 0) 
          bclr 7,STACK_0d3              ; Clear bit 7 at STACK_0d3                
          lda STACK_0d3                 ; Load Accumulator with value of Memory at STACK_0d3, A <- (STACK_0d3)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          brclr 5,STACK_0d3,L06F5       ; Branch to L06F5 if Bit 5 Clear (Mn = 0) 
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda X30FA,x                   ; Load Accumulator with value of Memory at X30FA, A <- (X30FA)
          brclr 2,STACK_0d3,L0706       ; Branch to L0706 if Bit 2 Clear (Mn = 0) 
          bset 3,RAM1_06a               ; Set Bit 3 at memory RAM1_06a (Mn <- 1 ) 
          bra L0708                     ; Branch Always (1 = 1)                   
; 
L2F00: 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          bclr 2,STACK_0d2              ; Clear bit 2 at STACK_0d2                
          bclr 3,RAM1_07c               ; Clear bit 3 at RAM1_07c                 
L2F06: 
          bclr 3,RAM1_06a               ; Clear bit 3 at RAM1_06a                 
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          bset 5,RAM1_094               ; Set Bit 5 at memory RAM1_094 (Mn <- 1 ) 
          cmp #$81                      ; Compare Accumulator with Memory Byte, (A) - (#$81)
          beq L071A                     ; Branch to L071A if Equal Z=1            
          bra L0716                     ; Branch Always (1 = 1)                   
; 
L2F12: 
          bset 1,RAM1_07f               ; Set Bit 1 at memory RAM1_07f (Mn <- 1 ) 
          bclr 0,RAM1_07f               ; Clear bit 0 at RAM1_07f                 
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bset 4,RAM1_05c               ; Set Bit 4 at memory RAM1_05c (Mn <- 1 ) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L2F21: 
          brclr 6,RAM1_07c,L0738        ; Branch to L0738 if Bit 6 Clear (Mn = 0) 
          brset 5,RAM1_07f,L0738        ; Branch to L0738 if Bit 5 is set at RAM1_07f (Mn=1)
          lda #$81                      ; Load Accumulator with value of Memory at #$81, A <- (#$81)
          bra L0706                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_08e,L074A        ; Branch to L074A if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 1,RAM1_0a1,L0734        ; Branch to L0734 if Bit 1 Clear (Mn = 0) 
          brclr 3,STACK_0d2,L0738       ; Branch to L0738 if Bit 3 Clear (Mn = 0) 
          lda #$B0                      ; Load Accumulator with value of Memory at #$B0, A <- (#$B0)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          rts                           ; Return from Subroutine                  
; 
          brclr 5,RAM1_07f,L074A        ; Branch to L074A if Bit 5 Clear (Mn = 0) 
          bclr 5,RAM1_07f               ; Clear bit 5 at RAM1_07f                 
          bclr 1,STACK_0ce              ; Clear bit 1 at STACK_0ce                
          bclr 0,STACK_0ce              ; Clear bit 0 at STACK_0ce                
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_0a0                  ; Store Accumulator in Memory at RAM1_0a0 
          bclr 3,STACK_0d2              ; Clear bit 3 at STACK_0d2                
          bra L0716                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_07f,L0738        ; Branch to L0738 if Bit 3 is set at RAM1_07f (Mn=1)
          bclr 2,RAM1_081               ; Clear bit 2 at RAM1_081                 
          bset 6,STACK_0c5              ; Set Bit 6 at memory STACK_0c5 (Mn <- 1 )
          brset 0,RAM1_07f,L076D        ; Branch to L076D if Bit 0 is set at RAM1_07f (Mn=1)
          brclr 1,RAM1_07f,L0712        ; Branch to L0712 if Bit 1 Clear (Mn = 0) 
L2F57: 
          brset 5,RAM1_07c,L0762        ; Branch to L0762 if Bit 5 is set at RAM1_07c (Mn=1)
          lda #$84                      ; Load Accumulator with value of Memory at #$84, A <- (#$84)
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          bset 5,RAM1_094               ; Set Bit 5 at memory RAM1_094 (Mn <- 1 ) 
          bra L076D                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_069,L076D        ; Branch to L076D if Bit 2 Clear (Mn = 0) 
          bset 0,RAM1_07f               ; Set Bit 0 at memory RAM1_07f (Mn <- 1 ) 
          bclr 4,RAM1_07c               ; Clear bit 4 at RAM1_07c                 
          bclr 3,RAM1_06a               ; Clear bit 3 at RAM1_06a                 
          bra L0778                     ; Branch Always (1 = 1)                   
; 
          brclr 6,RAM1_06a,L0712        ; Branch to L0712 if Bit 6 Clear (Mn = 0) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_0264                 ; Store Accumulator in Memory at RAM2_0264
          bclr 0,STACK_0d4              ; Clear bit 0 at STACK_0d4                
          bclr 0,RAM1_07f               ; Clear bit 0 at RAM1_07f                 
          bclr 1,RAM1_07f               ; Clear bit 1 at RAM1_07f                 
          bclr 2,RAM1_0ba               ; Clear bit 2 at RAM1_0ba                 
          bra L0716                     ; Branch Always (1 = 1)                   
; 
          ldx #$00                      ; Load Index Register with Memory Byte, X <- (#$00)
          cmp XAE06                     ; Compare Accumulator with Memory Byte, (A) - (XAE06)
          bra L079D                     ; Branch Always (1 = 1)                   
; 
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          brclr 6,RAM1_08e,L079D        ; Branch to L079D if Bit 6 Clear (Mn = 0) 
          lda STACK_0ce                 ; Load Accumulator with value of Memory at STACK_0ce, A <- (STACK_0ce)
          and #$F8                      ; Logical AND, A ← (A) && (#$F8)        
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          jsr L254B                     ; Jump to Subroutine at L254B             
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          jmp L24E8                     ; Unconditional Jump to L24E8             
; 
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          cmp XAE02                     ; Compare Accumulator with Memory Byte, (A) - (XAE02)
          brset 5,RAM1_07f,L0738        ; Branch to L0738 if Bit 5 is set at RAM1_07f (Mn=1)
          brclr 2,STACK_0ce,L07B4       ; Branch to L07B4 if Bit 2 Clear (Mn = 0) 
          brclr 1,STACK_0ce,L07B4       ; Branch to L07B4 if Bit 1 Clear (Mn = 0) 
          brset 0,STACK_0ce,L07B4       ; Branch to L07B4 if Bit 0 is set at STACK_0ce (Mn=1)
cpx STACK_0d0 
          bne L07B4                     ; Branch to L07B4 if Not Equal (Z = 0);   
          clr STACK_0cf                 ; Clear byte at STACK_0cf <- 0x00         
          bset 0,STACK_0cf              ; Set Bit 0 at memory STACK_0cf (Mn <- 1 )
          clr STACK_0cc                 ; Clear byte at STACK_0cc <- 0x00         
          rts                           ; Return from Subroutine                  
; 
          brset 7,RAM1_07f,L07B3        ; Branch to L07B3 if Bit 7 is set at RAM1_07f (Mn=1)
          brset 5,RAM1_080,L07B3        ; Branch to L07B3 if Bit 5 is set at RAM1_080 (Mn=1)
          lda RAM1_082                  ; Load Accumulator with value of Memory at RAM1_082, A <- (RAM1_082)
          and #$8F                      ; Logical AND, A ← (A) && (#$8F)        
          beq L07E5                     ; Branch to L07E5 if Equal Z=1            
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          beq L07E5                     ; Branch to L07E5 if Equal Z=1            
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          beq L07E5                     ; Branch to L07E5 if Equal Z=1            
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L07B3                     ; Branch to L07B3 if Not Equal (Z = 0);   
          brset 7,RAM1_0b9,L07B3        ; Branch to L07B3 if Bit 7 is set at RAM1_0b9 (Mn=1)
          brclr 2,RAM1_0b6,L07E5        ; Branch to L07E5 if Bit 2 Clear (Mn = 0) 
          lda RAM1_0b6                  ; Load Accumulator with value of Memory at RAM1_0b6, A <- (RAM1_0b6)
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L07B3                     ; Branch to L07B3 if Equal Z=1            
          brset 7,RAM1_0b5,L07DF        ; Branch to L07DF if Bit 7 is set at RAM1_0b5 (Mn=1)
          bset 7,RAM1_0b5               ; Set Bit 7 at memory RAM1_0b5 (Mn <- 1 ) 
          bset 3,RAM1_0bc               ; Set Bit 3 at memory RAM1_0bc (Mn <- 1 ) 
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          bset 5,RAM1_0b3               ; Set Bit 5 at memory RAM1_0b3 (Mn <- 1 ) 
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          stx STACK_0d0                 ; Store Index Register In Memory at STACK_0d0
          bset 2,STACK_0ce              ; Set Bit 2 at memory STACK_0ce (Mn <- 1 )
          bset 1,STACK_0ce              ; Set Bit 1 at memory STACK_0ce (Mn <- 1 )
          bclr 0,STACK_0ce              ; Clear bit 0 at STACK_0ce                
          lda #$96                      ; Load Accumulator with value of Memory at #$96, A <- (#$96)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          jmp L30C1                     ; Unconditional Jump to L30C1             
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          cmp XA6FF                     ; Compare Accumulator with Memory Byte, (A) - (XA6FF)
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          bra L0004                     ; Branch Always (1 = 1)                   
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          cmp XA6FF                     ; Compare Accumulator with Memory Byte, (A) - (XA6FF)
          ldx #$30                      ; Load Index Register with Memory Byte, X <- (#$30)
          stx RAM1_077                  ; Store Index Register In Memory at RAM1_077
          bra L006A                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          add #$F9                      ; Add without Carry, A ← (A) + (#$F9)   
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          beq L07B3                     ; Branch to L07B3 if Equal Z=1            
          brclr 2,STACK_0ce,L006A       ; Branch to L006A if Bit 2 Clear (Mn = 0) 
          brclr 1,STACK_0ce,L006A       ; Branch to L006A if Bit 1 Clear (Mn = 0) 
          brset 0,STACK_0ce,L006A       ; Branch to L006A if Bit 0 is set at STACK_0ce (Mn=1)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          jsr L30C1                     ; Jump to Subroutine at L30C1             
          bsr L0058                     ; Branch to Subroutine at L0058           
          bhi L0049                     ; Branch to L0049 if Higher C v Z = 0     
          jsr L30E2                     ; Jump to Subroutine at L30E2             
          bne L0030                     ; Branch to L0030 if Not Equal (Z = 0);   
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L07ED                     ; Branch to L07ED if Not Equal (Z = 0);   
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          bra L0043                     ; Branch Always (1 = 1)                   
; 
          bpl L003D                     ; Branch to L003D if Plus N = 0           
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          bmi L0043                     ; Branch to L0043 if Minus N = 1          
          lda #$28                      ; Load Accumulator with value of Memory at #$28, A <- (#$28)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L0043                     ; Branch Always (1 = 1)                   
; 
          add RAM1_057                  ; Add without Carry, A ← (A) + (RAM1_057)
          bmi L0036                     ; Branch to L0036 if Minus N = 1          
          beq L0036                     ; Branch to L0036 if Equal Z=1            
          bsr L0058                     ; Branch to Subroutine at L0058           
          bhi L07ED                     ; Branch to L07ED if Higher C v Z = 0     
          bra L004B                     ; Branch Always (1 = 1)                   
; 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          bsr L00C1                     ; Branch to Subroutine at L00C1           
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          bset 4,RAM1_07e               ; Set Bit 4 at memory RAM1_07e (Mn <- 1 ) 
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          bra L07ED                     ; Branch Always (1 = 1)                   
; 
          ldx STACK_0d0                 ; Load Index Register with Memory Byte, X <- (STACK_0d0)
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          bpl L0061                     ; Branch to L0061 if Plus N = 0           
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          incx                          ; Increment Index register by 1,X++       
          brclr 1,RAM1_081,L0066        ; Branch to L0066 if Bit 1 Clear (Mn = 0) 
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          cmp X30B1,x                   ; Compare Accumulator with Memory Byte, (A) - (X30B1)
          rts                           ; Return from Subroutine                  
; 
          brset 5,RAM1_082,L00B0        ; Branch to L00B0 if Bit 5 is set at RAM1_082 (Mn=1)
          brset 7,RAM1_087,L00B0        ; Branch to L00B0 if Bit 7 is set at RAM1_087 (Mn=1)
          brset 6,RAM1_07f,L0076        ; Branch to L0076 if Bit 6 is set at RAM1_07f (Mn=1)
          brclr 5,RAM1_07f,L0083        ; Branch to L0083 if Bit 5 Clear (Mn = 0) 
          brset 4,RAM1_07f,L0086        ; Branch to L0086 if Bit 4 is set at RAM1_07f (Mn=1)
          ldx RAM1_086                  ; Load Index Register with Memory Byte, X <- (RAM1_086)
cpx RAM1_085 
          bls L0086                     ; Branch to L0086 if Lower or Same C v Z = 1
          stx RAM1_085                  ; Store Index Register In Memory at RAM1_085
          bra L0086                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_082,L00B0        ; Branch to L00B0 if Bit 3 is set at RAM1_082 (Mn=1)
          bset 4,RAM1_07f               ; Set Bit 4 at memory RAM1_07f (Mn <- 1 ) 
          add RAM1_085                  ; Add without Carry, A ← (A) + (RAM1_085)
          bmi L009F                     ; Branch to L009F if Minus N = 1          
          brset 3,RAM1_081,L0095        ; Branch to L0095 if Bit 3 is set at RAM1_081 (Mn=1)
          cmp #$1E                      ; Compare Accumulator with Memory Byte, (A) - (#$1E)
          bls L0095                     ; Branch to L0095 if Lower or Same C v Z = 1
          lda #$1E                      ; Load Accumulator with value of Memory at #$1E, A <- (#$1E)
          brclr 7,RAM1_082,L00A0        ; Branch to L00A0 if Bit 7 Clear (Mn = 0) 
          tst RAM1_085                  ; Test Memory Byte for Negative or Zero, (RAM1_085) – 0x00
          bne L00B0                     ; Branch to L00B0 if Not Equal (Z = 0);   
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          cmp X004F                     ; Compare Accumulator with Memory Byte, (A) - (X004F)
          sta RAM1_085                  ; Store Accumulator in Memory at RAM1_085 
          brset 6,RAM1_07f,L00B0        ; Branch to L00B0 if Bit 6 is set at RAM1_07f (Mn=1)
          brset 7,RAM1_07f,L00B0        ; Branch to L00B0 if Bit 7 is set at RAM1_07f (Mn=1)
          brset 5,RAM1_07f,L00B0        ; Branch to L00B0 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 3,RAM1_081,L00B0        ; Branch to L00B0 if Bit 3 is set at RAM1_081 (Mn=1)
          bset 3,RAM1_05c               ; Set Bit 3 at memory RAM1_05c (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
X30B1: 
          brset 3,DDRC,L00B9            ; Branch to L00B9 if Bit RD_SP is set at DDRC (Mn=1)
          brclr 2,DDRC,L00BD            ; Branch to L00BD if Bit WR_SP Clear (Mn = 0)
          brclr 2,DDRB,L00C9            ; Branch to L00C9 if Bit ENA_12V_CDC Clear (Mn = 0)
          brclr 7,SCCR2,L00CC           ; Branch to L00CC if Bit TIE Clear (Mn = 0)
          brclr 7,SCCR2,L00CF           ; Branch to L00CF if Bit TIE Clear (Mn = 0)
          brclr 7,BAUD,L0142            ; Branch to L0142 if Bit SPC1 Clear (Mn = 0)
          bset 0,RAM1_0ae               ; Set Bit 0 at memory RAM1_0ae (Mn <- 1 ) 
          brset 7,RAM1_0a6,L00F3        ; Branch to L00F3 if Bit 7 is set at RAM1_0a6 (Mn=1)
          brset 2,RAM1_0be,L00F3        ; Branch to L00F3 if Bit 2 is set at RAM1_0be (Mn=1)
          brset 5,RAM1_0b9,L00F3        ; Branch to L00F3 if Bit 5 is set at RAM1_0b9 (Mn=1)
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          lda #$2A                      ; Load Accumulator with value of Memory at #$2A, A <- (#$2A)
          bra L00F3                     ; Branch Always (1 = 1)                   
; 
          ldx #$12                      ; Load Index Register with Memory Byte, X <- (#$12)
          lda #$38                      ; Load Accumulator with value of Memory at #$38, A <- (#$38)
          brset 3,RAM1_08e,L00DF        ; Branch to L00DF if Bit 3 is set at RAM1_08e (Mn=1)
          ldx #$11                      ; Load Index Register with Memory Byte, X <- (#$11)
          lda #$37                      ; Load Accumulator with value of Memory at #$37, A <- (#$37)
          brset 3,RAM1_07f,L00F3        ; Branch to L00F3 if Bit 3 is set at RAM1_07f (Mn=1)
L30E2: 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          sta STACK_0c7                 ; Store Accumulator in Memory at STACK_0c7
          bset 7,STACK_0c7              ; Set Bit 7 at memory STACK_0c7 (Mn <- 1 )
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          add #$A0                      ; Add without Carry, A ← (A) + (#$A0)   
          jsr L38CB                     ; Jump to Subroutine at L38CB             
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          bset 6,STACK_0c6              ; Set Bit 6 at memory STACK_0c6 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          jsr L259A                     ; Jump to Subroutine at L259A             
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          jmp L24CB                     ; Unconditional Jump to L24CB             
; 
X30FA: 
          wait                          ; Stop CPU Clock and Enable Interrupts    
          wait                          ; Stop CPU Clock and Enable Interrupts    
; 
          db $8A, $8B, $90, $90         ; data?  ,  ,  ,                          
          db $89                        ; data?  ,  ,  ,                          
X3101: 
          db $89                        ; data?  ,  ,  ,                          
; 
          wait                          ; Stop CPU Clock and Enable Interrupts    
          wait                          ; Stop CPU Clock and Enable Interrupts    
; 
          db $82                        ; data?  ,  ,  ,                          
; 
swi 
; 
          db $90, $90, $89, $89         ; data?  ,  ,  ,                          
; 
L310A: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brclr 3,STACK_0ce,L0110       ; Branch to L0110 if Bit 3 Clear (Mn = 0) 
          ldx #$22                      ; Load Index Register with Memory Byte, X <- (#$22)
          lda X3127,x                   ; Load Accumulator with value of Memory at X3127, A <- (X3127)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X3126,x                   ; Load Accumulator with value of Memory at X3126, A <- (X3126)
          beq L0125                     ; Branch to L0125 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L0110                     ; Branch to L0110 if Not Equal (Z = 0);   
          ldx X3125,x                   ; Load Index Register with Memory Byte, X <- (X3125)
          jsr L2F21,x ;INFO: index jump ; Jump to Subroutine at L2F21             
X3125: 
          rts                           ; Return from Subroutine                  
; 
X3126: 
          brclr 6,RAM1_064,L0132        ; Branch to L0132 if Bit 6 Clear (Mn = 0) 
          asr ,x                        ; Arithmetic Shift Right , b7 -> [b7 >>>> b0] -> C
          brset 5,RAM1_05d,L0139        ; Branch to L0139 if Bit 5 is set at RAM1_05d (Mn=1)
          dec ,x                        ; Decrement Byte at  Byte = Byte - 1      
          bclr 7,STACK_0e7              ; Clear bit 7 at STACK_0e7                
          ora ,x                        ; Logical OR Accumulator with Memory at , A <- (A) || ()
          jmp L3AD3,x ;INFO: index jump ; Unconditional Jump to L3AD3             
; 
decx 
cpx XDA92,x 
          add ,x                        ; Add without Carry, A ← (A) + ()       
          stx X3BD6,x                   ; Store Index Register In Memory at X3BD6 
; 
          db $5B                        ; data? [,  ,  ,                          
; 
          lda XDB92,x                   ; Load Accumulator with value of Memory at XDB92, A <- (XDB92)
          add PLMA,x                    ; Add without Carry, A ← (A) + (PLMA)   
          add X18EE                     ; Add without Carry, A ← (A) + (X18EE)  
          brset 5,STACK_0ce,L0160       ; Branch to L0160 if Bit 5 is set at STACK_0ce (Mn=1)
          brset 3,PortA,L014B           ; Branch to L014B if Bit SLAVE_STATUS is set at PortA (Mn=1)
L314B: 
          jmp L2631                     ; Unconditional Jump to L2631             
; 
L314E: 
          lda #$C8                      ; Load Accumulator with value of Memory at #$C8, A <- (#$C8)
          nop                           ; No Operation                            
deca 
          bne L0150                     ; Branch to L0150 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L3155: 
          clr RAM1_0a1                  ; Clear byte at RAM1_0a1 <- 0x00          
          clr RAM1_0a2                  ; Clear byte at RAM1_0a2 <- 0x00          
          clr RAM1_0b2                  ; Clear byte at RAM1_0b2 <- 0x00          
          brclr 4,RAM1_069,L0170        ; Branch to L0170 if Bit 4 Clear (Mn = 0) 
          jmp L3199                     ; Unconditional Jump to L3199             
L3161: 
          jmp L322B                     ; Unconditional Jump to L322B             
; 
L3164: 
          brclr 4,RAM1_069,L0170        ; Branch to L0170 if Bit 4 Clear (Mn = 0) 
          jmp L31DA                     ; Unconditional Jump to L31DA             
; 
L316A: 
          brclr 4,RAM1_069,L0170        ; Branch to L0170 if Bit 4 Clear (Mn = 0) 
          jmp L31FE                     ; Unconditional Jump to L31FE             
; 
          bclr 7,RAM1_0a0               ; Clear bit 7 at RAM1_0a0                 
          rts                           ; Return from Subroutine                  
L3173: 
          jmp L3176                     ; Unconditional Jump to L3176             
; 
L3176: 
          brclr 1,RAM1_0a1,L0197        ; Branch to L0197 if Bit 1 Clear (Mn = 0) 
          dec RAM1_0af                  ; Decrement Byte at RAM1_0af Byte = Byte - 1
          bpl L0197                     ; Branch to L0197 if Plus N = 0           
          brset 7,RAM1_0a1,L0183        ; Branch to L0183 if Bit 7 is set at RAM1_0a1 (Mn=1)
          jmp L322B                     ; Unconditional Jump to L322B             
; 
          brset 2,RAM1_0a1,L0197        ; Branch to L0197 if Bit 2 is set at RAM1_0a1 (Mn=1)
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          sta RAM1_0af                  ; Store Accumulator in Memory at RAM1_0af 
          jsr L3453                     ; Jump to Subroutine at L3453             
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
          bls L0197                     ; Branch to L0197 if Lower or Same C v Z = 1
          inc RAM1_0b1                  ; Increment Byte RAM1_0b1, Byte = Byte + 1
          bne L0197                     ; Branch to L0197 if Not Equal (Z = 0);   
          bset 1,RAM1_0b1               ; Set Bit 1 at memory RAM1_0b1 (Mn <- 1 ) 
          sec                           ; Set Carry Bit , C ← 1                 
          rts                           ; Return from Subroutine                  
; 
L3199: 
          sei                           ; Set Interrupt Mask, I ← 1);           
          bclr 3,PortC                  ; Clear bit RD_SP at PortC                
          bclr 2,PortC                  ; Clear bit WR_SP at PortC                
          cli                           ; Clear Interrupt Mask (I <- 0)           
          jsr L314B                     ; Jump to Subroutine at L314B             
          sei                           ; Set Interrupt Mask, I ← 1);           
          bset 2,PortC                  ; Set Bit WR_SP at memory PortC (Mn <- 1 )
          bset 3,PortC                  ; Set Bit RD_SP at memory PortC (Mn <- 1 )
          cli                           ; Clear Interrupt Mask (I <- 0)           
          bsr L01BC                     ; Branch to Subroutine at L01BC           
          ldx #$A3                      ; Load Index Register with Memory Byte, X <- (#$A3)
          clr PortB,x                   ; Clear byte at PortB <- 0x00             
          jsr L3395                     ; Jump to Subroutine at L3395             
          jsr L33DB                     ; Jump to Subroutine at L33DB             
          inc RAM1_0b2                  ; Increment Byte RAM1_0b2, Byte = Byte + 1
          brclr 4,RAM1_0b2,L01AA        ; Branch to L01AA if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_0b2               ; Clear bit 4 at RAM1_0b2                 
          rts                           ; Return from Subroutine                  
; 
          brset 0,RAM1_0a1,L01BB        ; Branch to L01BB if Bit 0 is set at RAM1_0a1 (Mn=1)
          jsr L325E                     ; Jump to Subroutine at L325E             
          lda #$4C                      ; Load Accumulator with value of Memory at #$4C, A <- (#$4C)
          bsr L01D4                     ; Branch to Subroutine at L01D4           
          lda #$A6                      ; Load Accumulator with value of Memory at #$A6, A <- (#$A6)
          bsr L01D4                     ; Branch to Subroutine at L01D4           
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          bsr L01D4                     ; Branch to Subroutine at L01D4           
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L334F                     ; Jump to Subroutine at L334F             
          lda #$0E                      ; Load Accumulator with value of Memory at #$0E, A <- (#$0E)
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          sta ,x                        ; Store Accumulator in Memory at          
          jmp L32F3                     ; Unconditional Jump to L32F3             
; 
L31DA: 
          brclr 7,RAM1_0a0,L0209        ; Branch to L0209 if Bit 7 Clear (Mn = 0) 
          brclr 0,RAM1_0a1,L01E6        ; Branch to L01E6 if Bit 0 Clear (Mn = 0) 
          lda RAM1_0a0                  ; Load Accumulator with value of Memory at RAM1_0a0, A <- (RAM1_0a0)
          and #$08                      ; Logical AND, A ← (A) && (#$08)        
          bne L0209                     ; Branch to L0209 if Not Equal (Z = 0);   
          lda RAM1_0a0                  ; Load Accumulator with value of Memory at RAM1_0a0, A <- (RAM1_0a0)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          bsr L01F7                     ; Branch to Subroutine at L01F7           
          bclr 7,RAM1_0a0               ; Clear bit 7 at RAM1_0a0                 
          lda RAM1_0a0                  ; Load Accumulator with value of Memory at RAM1_0a0, A <- (RAM1_0a0)
          jsr L2616                     ; Jump to Subroutine at L2616             
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          beq L0209                     ; Branch to L0209 if Equal Z=1            
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          ldx X3418,x                   ; Load Index Register with Memory Byte, X <- (X3418)
          jmp L33DB,x ;INFO: index jump ; Unconditional Jump to L33DB             
; 
L31FE: 
          brset 0,RAM1_0a1,L020A        ; Branch to L020A if Bit 0 is set at RAM1_0a1 (Mn=1)
          brset 2,RAM1_0a1,L0209        ; Branch to L0209 if Bit 2 is set at RAM1_0a1 (Mn=1)
          brset 1,RAM1_0a1,L020A        ; Branch to L020A if Bit 1 is set at RAM1_0a1 (Mn=1)
          clr RAM1_0a1                  ; Clear byte at RAM1_0a1 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
          jsr L3338                     ; Jump to Subroutine at L3338             
          and #$20                      ; Logical AND, A ← (A) && (#$20)        
          bne L0209                     ; Branch to L0209 if Not Equal (Z = 0);   
          brset 1,RAM1_0a1,L0224        ; Branch to L0224 if Bit 1 is set at RAM1_0a1 (Mn=1)
          lda RAM1_0ae                  ; Load Accumulator with value of Memory at RAM1_0ae, A <- (RAM1_0ae)
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          beq L021D                     ; Branch to L021D if Equal Z=1            
          brclr 4,RAM1_0a1,L0220        ; Branch to L0220 if Bit 4 Clear (Mn = 0) 
          bset 5,RAM1_0a1               ; Set Bit 5 at memory RAM1_0a1 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda #$91                      ; Load Accumulator with value of Memory at #$91, A <- (#$91)
          bra L0253                     ; Branch Always (1 = 1)                   
; 
          brclr 3,RAM1_0a1,L0207        ; Branch to L0207 if Bit 3 Clear (Mn = 0) 
          lda #$92                      ; Load Accumulator with value of Memory at #$92, A <- (#$92)
          bra L0288                     ; Branch Always (1 = 1)                   
; 
L322B: 
          bsr L0257                     ; Branch to Subroutine at L0257           
          brclr 0,RAM1_0a1,L0209        ; Branch to L0209 if Bit 0 Clear (Mn = 0) 
          bsr L025E                     ; Branch to Subroutine at L025E           
          jmp L3477                     ; Unconditional Jump to L3477             
; 
          brset 0,RAM1_0a1,L0209        ; Branch to L0209 if Bit 0 is set at RAM1_0a1 (Mn=1)
          bsr L0257                     ; Branch to Subroutine at L0257           
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta RAM1_0a2                  ; Store Accumulator in Memory at RAM1_0a2 
          jsr L34EA                     ; Jump to Subroutine at L34EA             
          lda RAM1_0ad                  ; Load Accumulator with value of Memory at RAM1_0ad, A <- (RAM1_0ad)
          beq L024B                     ; Branch to L024B if Equal Z=1            
          add #$01                      ; Add without Carry, A ← (A) + (#$01)   
          bcc L024D                     ; Branch to L024D if C bit is cleared     
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_0ae                  ; Store Accumulator in Memory at RAM1_0ae 
          sta RAM1_0b1                  ; Store Accumulator in Memory at RAM1_0b1 
          lda #$89                      ; Load Accumulator with value of Memory at #$89, A <- (#$89)
          sta RAM1_0a1                  ; Store Accumulator in Memory at RAM1_0a1 
          bra L028A                     ; Branch Always (1 = 1)                   
; 
L3257: 
          brclr 1,RAM1_0a1,L0209        ; Branch to L0209 if Bit 1 Clear (Mn = 0) 
          clr RAM1_0a1                  ; Clear byte at RAM1_0a1 <- 0x00          
          bsr L025E                     ; Branch to Subroutine at L025E           
L325E: 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          jmp L334F                     ; Unconditional Jump to L334F             
; 
L3263: 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          beq L02DA                     ; Branch to L02DA if Equal Z=1            
          bsr L0257                     ; Branch to Subroutine at L0257           
          ldx #$AD                      ; Load Index Register with Memory Byte, X <- (#$AD)
          jsr L3391                     ; Jump to Subroutine at L3391             
          brclr 6,RAM1_0a0,L0278        ; Branch to L0278 if Bit 6 Clear (Mn = 0) 
          ldx #$A3                      ; Load Index Register with Memory Byte, X <- (#$A3)
          jsr L33B5                     ; Jump to Subroutine at L33B5             
          jsr L33DB                     ; Jump to Subroutine at L33DB             
          ldx RAM1_0ae                  ; Load Index Register with Memory Byte, X <- (RAM1_0ae)
          stx RAM1_0b1                  ; Store Index Register In Memory at RAM1_0b1
L327F: 
cpx RAM1_0ad 
          bcs L0286                     ; Branch to L0286 if C = 1                
          lda #$8A                      ; Load Accumulator with value of Memory at #$8A, A <- (#$8A)
          cmp XA682                     ; Compare Accumulator with Memory Byte, (A) - (XA682)
          sta RAM1_0a1                  ; Store Accumulator in Memory at RAM1_0a1 
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          bsr L0260                     ; Branch to Subroutine at L0260           
          lda RAM1_0ad                  ; Load Accumulator with value of Memory at RAM1_0ad, A <- (RAM1_0ad)
          brclr 2,RAM1_0a1,L0297        ; Branch to L0297 if Bit 2 Clear (Mn = 0) 
          lda RAM1_0b1                  ; Load Accumulator with value of Memory at RAM1_0b1, A <- (RAM1_0b1)
          bset 6,RAM1_0a1               ; Set Bit 6 at memory RAM1_0a1 (Mn <- 1 ) 
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 3,RAM1_0a1,L02A0        ; Branch to L02A0 if Bit 3 Clear (Mn = 0) 
deca 
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          ldx #$56                      ; Load Index Register with Memory Byte, X <- (#$56)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          sta ,x                        ; Store Accumulator in Memory at          
          bsr L02DB                     ; Branch to Subroutine at L02DB           
          ldx #$56                      ; Load Index Register with Memory Byte, X <- (#$56)
          lda #$7F                      ; Load Accumulator with value of Memory at #$7F, A <- (#$7F)
          sta ,x                        ; Store Accumulator in Memory at          
          lda RAM1_0b1                  ; Load Accumulator with value of Memory at RAM1_0b1, A <- (RAM1_0b1)
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bcs L02B7                     ; Branch to L02B7 if C = 1                
          brclr 4,RAM1_0a1,L02B9        ; Branch to L02B9 if Bit 4 Clear (Mn = 0) 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta PortB,x                   ; Store Accumulator in Memory at PortB    
          clr ,x                        ; Clear byte at  <- 0x00                  
          bsr L02DD                     ; Branch to Subroutine at L02DD           
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          brset 0,RAM1_0a1,L02C5        ; Branch to L02C5 if Bit 0 is set at RAM1_0a1 (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          bsr L0260                     ; Branch to Subroutine at L0260           
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bsr L0260                     ; Branch to Subroutine at L0260           
          jsr L34F2                     ; Jump to Subroutine at L34F2             
          clrx                          ; Clear Index Register, X <- 0x00         
          bsr L0338                     ; Branch to Subroutine at L0338           
          and #$20                      ; Logical AND, A ← (A) && (#$20)        
          bne L02DA                     ; Branch to L02DA if Not Equal (Z = 0);   
decx 
          bne L02CF                     ; Branch to L02CF if Not Equal (Z = 0);   
L32D8: 
          clr RAM1_0a1                  ; Clear byte at RAM1_0a1 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
          bsr L02F3                     ; Branch to Subroutine at L02F3           
          lsr PortB,x                   ; Logical Shift Right of PortB, b7 -> [b7 >>>> b0] -> C
          ror ,x                        ; Rotate Byte at  Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr PortB,x                   ; Logical Shift Right of PortB, b7 -> [b7 >>>> b0] -> C
          ror ,x                        ; Rotate Byte at  Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr PortB,x                   ; Logical Shift Right of PortB, b7 -> [b7 >>>> b0] -> C
          ror ,x                        ; Rotate Byte at  Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr PortB,x                   ; Logical Shift Right of PortB, b7 -> [b7 >>>> b0] -> C
          ror ,x                        ; Rotate Byte at  Right through Carry Bit, C -> [b7 >>>> b0] -> C
          brclr 6,RAM1_0a1,L02F1        ; Branch to L02F1 if Bit 6 Clear (Mn = 0) 
          inc ,x                        ; Increment Byte , Byte = Byte + 1        
          inc ,x                        ; Increment Byte , Byte = Byte + 1        
          inc ,x                        ; Increment Byte , Byte = Byte + 1        
          bclr 6,RAM1_0a1               ; Clear bit 6 at RAM1_0a1                 
          bsr L02F3                     ; Branch to Subroutine at L02F3           
L32F3: 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          bsr L034F                     ; Branch to Subroutine at L034F           
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          jsr L2617                     ; Jump to Subroutine at L2617             
          incx                          ; Increment Index register by 1,X++       
          bra L034F                     ; Branch Always (1 = 1)                   
; 
L32FD: 
          lda #$09                      ; Load Accumulator with value of Memory at #$09, A <- (#$09)
          bsr L034F                     ; Branch to Subroutine at L034F           
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          jsr L314E                     ; Jump to Subroutine at L314E             
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          bsr L0320                     ; Branch to Subroutine at L0320           
          sta ,x                        ; Store Accumulator in Memory at          
          incx                          ; Increment Index register by 1,X++       
cpx #$54 
          bls L0308                     ; Branch to L0308 if Lower or Same C v Z = 1
          ldx #$51                      ; Load Index Register with Memory Byte, X <- (#$51)
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          rol PortB,x                   ; Rotate Byte at PortB Left through Carry Bit, C <- [b7 <<<< b0] <- C
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          rol PortB,x                   ; Rotate Byte at PortB Left through Carry Bit, C <- [b7 <<<< b0] <- C
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          rol PortB,x                   ; Rotate Byte at PortB Left through Carry Bit, C <- [b7 <<<< b0] <- C
          asl ,x                        ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          rol PortB,x                   ; Rotate Byte at PortB Left through Carry Bit, C <- [b7 <<<< b0] <- C
          incx                          ; Increment Index register by 1,X++       
          rts                           ; Return from Subroutine                  
; 
          bsr L032E                     ; Branch to Subroutine at L032E           
          jsr L2617                     ; Jump to Subroutine at L2617             
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          bsr L0333                     ; Branch to Subroutine at L0333           
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          ora RAM1_059                  ; Logical OR Accumulator with Memory at RAM1_059, A <- (A) || (RAM1_059)
          rts                           ; Return from Subroutine                  
; 
          lda #$31                      ; Load Accumulator with value of Memory at #$31, A <- (#$31)
deca 
          bne L0330                     ; Branch to L0330 if Not Equal (Z = 0);   
          lda #$1B                      ; Load Accumulator with value of Memory at #$1B, A <- (#$1B)
deca 
          bne L0335                     ; Branch to L0335 if Not Equal (Z = 0);   
L3338: 
          sei                           ; Set Interrupt Mask, I ← 1);           
          lda DDRC                      ; Load Accumulator with value of Memory at DDRC, A <- (DDRC)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          add #$0C                      ; Add without Carry, A ← (A) + (#$0C)   
          sta DDRC                      ; Store Accumulator in Memory at DDRC     
          cli                           ; Clear Interrupt Mask (I <- 0)           
          bset 2,PortC                  ; Set Bit WR_SP at memory PortC (Mn <- 1 )
          bclr 3,PortC                  ; Clear bit RD_SP at PortC                
          bsr L038D                     ; Branch to Subroutine at L038D           
          lda PortC                     ; Load Accumulator with value of Memory at PortC, A <- (PortC)
          bset 3,PortC                  ; Set Bit RD_SP at memory PortC (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
L334F: 
          clr RAM1_05a                  ; Clear byte at RAM1_05a <- 0x00          
          bset 3,PortC                  ; Set Bit RD_SP at memory PortC (Mn <- 1 )
          dec RAM1_05a                  ; Decrement Byte at RAM1_05a Byte = Byte - 1
          bne L035A                     ; Branch to L035A if Not Equal (Z = 0);   
          jmp L32D8                     ; Unconditional Jump to L32D8             
; 
          bsr L038D                     ; Branch to Subroutine at L038D           
          bclr 3,PortC                  ; Clear bit RD_SP at PortC                
          jsr L34F2                     ; Jump to Subroutine at L34F2             
          brset 4,PortC,L0351           ; Branch to L0351 if Bit D0-SP is set at PortC (Mn=1)
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L036E                     ; Branch to L036E if Equal Z=1            
          brset 5,PortC,L0351           ; Branch to L0351 if Bit D1-SP is set at PortC (Mn=1)
          cmp XA602                     ; Compare Accumulator with Memory Byte, (A) - (XA602)
          jsr L261E                     ; Jump to Subroutine at L261E             
          ora #$0F                      ; Logical OR Accumulator with Memory at #$0F, A <- (A) || (#$0F)
          sei                           ; Set Interrupt Mask, I ← 1);           
          sta PortC                     ; Store Accumulator in Memory at PortC    
          lda DDRC                      ; Load Accumulator with value of Memory at DDRC, A <- (DDRC)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          add #$FC                      ; Add without Carry, A ← (A) + (#$FC)   
          sta DDRC                      ; Store Accumulator in Memory at DDRC     
          cli                           ; Clear Interrupt Mask (I <- 0)           
          bclr 2,PortC                  ; Clear bit WR_SP at PortC                
          bsr L038D                     ; Branch to Subroutine at L038D           
          bset 2,PortC                  ; Set Bit WR_SP at memory PortC (Mn <- 1 )
          lda DDRC                      ; Load Accumulator with value of Memory at DDRC, A <- (DDRC)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          add #$0C                      ; Add without Carry, A ← (A) + (#$0C)   
          sta DDRC                      ; Store Accumulator in Memory at DDRC     
          jsr L34F2                     ; Jump to Subroutine at L34F2             
          rts                           ; Return from Subroutine                  
; 
L3391: 
          bclr 0,RAM1_058               ; Clear bit 0 at RAM1_058                 
          bra L0399                     ; Branch Always (1 = 1)                   
; 
L3395: 
          bset 0,RAM1_058               ; Set Bit 0 at memory RAM1_058 (Mn <- 1 ) 
          bclr 1,RAM1_058               ; Clear bit 1 at RAM1_058                 
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          jsr L2617                     ; Jump to Subroutine at L2617             
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          lda RAM1_0b2                  ; Load Accumulator with value of Memory at RAM1_0b2, A <- (RAM1_0b2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sub RAM1_052                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_052)
          bpl L03AC                     ; Branch to L03AC if Plus N = 0           
          add #$0A                      ; Add without Carry, A ← (A) + (#$0A)   
          inca                          ; Increment Accumulator by 1,A++          
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          cmp XA608                     ; Compare Accumulator with Memory Byte, (A) - (XA608)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          brclr 0,RAM1_058,L03CA        ; Branch to L03CA if Bit 0 Clear (Mn = 0) 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          stx RAM1_05a                  ; Store Index Register In Memory at RAM1_05a
          ldx RAM1_059                  ; Load Index Register with Memory Byte, X <- (RAM1_059)
          sta RAM2_02d8,x               ; Store Accumulator in Memory at RAM2_02d8
          ldx RAM1_05a                  ; Load Index Register with Memory Byte, X <- (RAM1_05a)
          inc RAM1_059                  ; Increment Byte RAM1_059, Byte = Byte + 1
          bra L03D6                     ; Branch Always (1 = 1)                   
; 
          stx RAM1_05a                  ; Store Index Register In Memory at RAM1_05a
          ldx RAM1_059                  ; Load Index Register with Memory Byte, X <- (RAM1_059)
          inc RAM1_059                  ; Increment Byte RAM1_059, Byte = Byte + 1
          lda RAM2_02d8,x               ; Load Accumulator with value of Memory at RAM2_02d8, A <- (RAM2_02d8)
          ldx RAM1_05a                  ; Load Index Register with Memory Byte, X <- (RAM1_05a)
          sta ,x                        ; Store Accumulator in Memory at          
          incx                          ; Increment Index register by 1,X++       
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bne L03B9                     ; Branch to L03B9 if Not Equal (Z = 0);   
L33DB: 
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          cmp #$0F                      ; Compare Accumulator with Memory Byte, (A) - (#$0F)
          beq L040D                     ; Branch to L040D if Equal Z=1            
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          cmp #$A0                      ; Compare Accumulator with Memory Byte, (A) - (#$A0)
          bcc L040D                     ; Branch to L040D if C bit is cleared     
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          jsr L2617                     ; Jump to Subroutine at L2617             
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          cmp RAM1_056                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_056)
          bcs L040D                     ; Branch to L040D if C = 1                
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          bra L0405                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          cmp #$0F                      ; Compare Accumulator with Memory Byte, (A) - (#$0F)
          beq L040D                     ; Branch to L040D if Equal Z=1            
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          beq L040D                     ; Branch to L040D if Equal Z=1            
          sub #$10                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$10)
          eor RAM1_0a2                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0a2)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          eor RAM1_0a2                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0a2)
          bra L0413                     ; Branch Always (1 = 1)                   
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta RAM1_0a2                  ; Store Accumulator in Memory at RAM1_0a2 
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          rts                           ; Return from Subroutine                  
; 
X3418: 
          db $6B                        ; data? k,  ,  ,                          
; 
          brset 0,PortA,L041C           ; Branch to L041C if Bit PANEL_STATUS is set at PortA (Mn=1)
          negx                          ; Negate Byte of Index register(Two’s Complement), X = 0x00 - (X)
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          brset 0,RAM1_05c,L046F        ; Branch to L046F if Bit 0 is set at RAM1_05c (Mn=1)
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
          db $82                        ; data?  ,  ,  ,                          
; 
          asl RAM1_060,x                ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          lsr STACK_0cc,x               ; Logical Shift Right of STACK_0cc, b7 -> [b7 >>>> b0] -> C
; 
          db $32, $35                   ; data? 2, 5,  ,                          
; 
          bsr L03DC                     ; Branch to Subroutine at L03DC           
          bra L0446                     ; Branch Always (1 = 1)                   
; 
          bsr L03F9                     ; Branch to Subroutine at L03F9           
          bra L0446                     ; Branch Always (1 = 1)                   
; 
          bsr L040F                     ; Branch to Subroutine at L040F           
          bra L0446                     ; Branch Always (1 = 1)                   
; 
          bsr L040F                     ; Branch to Subroutine at L040F           
          bra L0441                     ; Branch Always (1 = 1)                   
; 
          bsr L03DC                     ; Branch to Subroutine at L03DC           
          bra L0441                     ; Branch Always (1 = 1)                   
; 
          bsr L03F9                     ; Branch to Subroutine at L03F9           
          beq L03DB                     ; Branch to L03DB if Equal Z=1            
          jmp L3263                     ; Unconditional Jump to L3263             
; 
          brset 1,RAM1_0a1,L044C        ; Branch to L044C if Bit 1 is set at RAM1_0a1 (Mn=1)
          jmp L3161                     ; Unconditional Jump to L3161             
; 
          bclr 7,RAM1_0a1               ; Clear bit 7 at RAM1_0a1                 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          sta RAM1_0af                  ; Store Accumulator in Memory at RAM1_0af 
          rts                           ; Return from Subroutine                  
; 
L3453: 
          lda RAM1_0ad                  ; Load Accumulator with value of Memory at RAM1_0ad, A <- (RAM1_0ad)
          sub RAM1_0b1                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_0b1)
          bcc L045B                     ; Branch to L045B if C bit is cleared     
          sub #$02                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$02)
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
          jsr L3257                     ; Jump to Subroutine at L3257             
          bclr 2,RAM1_0a1               ; Clear bit 2 at RAM1_0a1                 
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          jsr L3391                     ; Jump to Subroutine at L3391             
          jsr L33DB                     ; Jump to Subroutine at L33DB             
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM1_0ab                  ; Store Accumulator in Memory at RAM1_0ab 
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          sta RAM1_0ac                  ; Store Accumulator in Memory at RAM1_0ac 
          ldx RAM1_0b1                  ; Load Index Register with Memory Byte, X <- (RAM1_0b1)
          jmp L327F                     ; Unconditional Jump to L327F             
; 
L3477: 
          jsr L32FD                     ; Jump to Subroutine at L32FD             
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          sta RAM1_0ad                  ; Store Accumulator in Memory at RAM1_0ad 
          brset 5,RAM1_0a1,L048A        ; Branch to L048A if Bit 5 is set at RAM1_0a1 (Mn=1)
          sub RAM1_0ae                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_0ae)
          bcc L0486                     ; Branch to L0486 if C bit is cleared     
          sub #$02                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$02)
          sub #$02                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$02)
          bcs L04E7                     ; Branch to L04E7 if C = 1                
          lda RAM1_0b2                  ; Load Accumulator with value of Memory at RAM1_0b2, A <- (RAM1_0b2)
          inca                          ; Increment Accumulator by 1,A++          
          cmp #$09                      ; Compare Accumulator with Memory Byte, (A) - (#$09)
          bls L0492                     ; Branch to L0492 if Lower or Same C v Z = 1
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_0b2                  ; Store Accumulator in Memory at RAM1_0b2 
          ldx #$AD                      ; Load Index Register with Memory Byte, X <- (#$AD)
          jsr L3395                     ; Jump to Subroutine at L3395             
          ldx #$A3                      ; Load Index Register with Memory Byte, X <- (#$A3)
          jsr L33DB                     ; Jump to Subroutine at L33DB             
          lda RAM1_0ad                  ; Load Accumulator with value of Memory at RAM1_0ad, A <- (RAM1_0ad)
          add #$01                      ; Add without Carry, A ← (A) + (#$01)   
          bcc L04A6                     ; Branch to L04A6 if C bit is cleared     
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_0b1                  ; Store Accumulator in Memory at RAM1_0b1 
          clr RAM1_0a2                  ; Clear byte at RAM1_0a2 <- 0x00          
          lda RAM1_0ae                  ; Load Accumulator with value of Memory at RAM1_0ae, A <- (RAM1_0ae)
          cmp RAM1_0b1                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0b1)
          bcc L04CE                     ; Branch to L04CE if C bit is cleared     
          sta RAM1_0ae                  ; Store Accumulator in Memory at RAM1_0ae 
          beq L04DA                     ; Branch to L04DA if Equal Z=1            
          brset 5,RAM1_0a1,L04E1        ; Branch to L04E1 if Bit 5 is set at RAM1_0a1 (Mn=1)
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          cmp #$90                      ; Compare Accumulator with Memory Byte, (A) - (#$90)
          bcc L04E7                     ; Branch to L04E7 if C bit is cleared     
          add #$11                      ; Add without Carry, A ← (A) + (#$11)   
          sta RAM1_0a2                  ; Store Accumulator in Memory at RAM1_0a2 
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
          bsr L04EC                     ; Branch to Subroutine at L04EC           
          lda RAM1_051                  ; Load Accumulator with value of Memory at RAM1_051, A <- (RAM1_051)
          brset 1,RAM1_0a1,L04D2        ; Branch to L04D2 if Bit 1 is set at RAM1_0a1 (Mn=1)
          cmp RAM1_0ae                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0ae)
          bcs L04B0                     ; Branch to L04B0 if C = 1                
          bset 1,RAM1_0a1               ; Set Bit 1 at memory RAM1_0a1 (Mn <- 1 ) 
          bra L04D6                     ; Branch Always (1 = 1)                   
; 
          cmp RAM1_0ae                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0ae)
          bcc L04DA                     ; Branch to L04DA if C bit is cleared     
          cmp RAM1_0b1                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0b1)
          bcc L04B0                     ; Branch to L04B0 if C bit is cleared     
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          beq L04E7                     ; Branch to L04E7 if Equal Z=1            
          brclr 5,RAM1_0a1,L04E3        ; Branch to L04E3 if Bit 5 Clear (Mn = 0) 
          ora #$0F                      ; Logical OR Accumulator with Memory at #$0F, A <- (A) || (#$0F)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta RAM1_0a2                  ; Store Accumulator in Memory at RAM1_0a2 
          clr RAM1_0a1                  ; Clear byte at RAM1_0a1 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
L34EA: 
          ldx #$AD                      ; Load Index Register with Memory Byte, X <- (#$AD)
          jsr L3391                     ; Jump to Subroutine at L3391             
          jmp L33DB                     ; Unconditional Jump to L33DB             
; 
L34F2: 
          tst STACK_0ff,x               ; Test Memory Byte for Negative or Zero, (STACK_0ff) – 0x00
          tst STACK_0ff,x               ; Test Memory Byte for Negative or Zero, (STACK_0ff) – 0x00
          rts                           ; Return from Subroutine                  
; 
L34F7: 
          brset 7,RAM1_0a0,L0500        ; Branch to L0500 if Bit 7 is set at RAM1_0a0 (Mn=1)
          lda STACK_0ce                 ; Load Accumulator with value of Memory at STACK_0ce, A <- (STACK_0ce)
          and #$C0                      ; Logical AND, A ← (A) && (#$C0)        
          beq L0501                     ; Branch to L0501 if Equal Z=1            
          rts                           ; Return from Subroutine                  
; 
          brset 5,STACK_0ce,L0540       ; Branch to L0540 if Bit 5 is set at STACK_0ce (Mn=1)
          brclr 1,RAM1_0a1,L050C        ; Branch to L050C if Bit 1 Clear (Mn = 0) 
          brclr 7,RAM1_0a1,L050C        ; Branch to L050C if Bit 7 Clear (Mn = 0) 
          bset 5,RAM1_07f               ; Set Bit 5 at memory RAM1_07f (Mn <- 1 ) 
          brclr 5,RAM1_07f,L051E        ; Branch to L051E if Bit 5 Clear (Mn = 0) 
          brset 3,RAM1_07f,L051B        ; Branch to L051B if Bit 3 is set at RAM1_07f (Mn=1)
          brset 5,RAM1_0b9,L051B        ; Branch to L051B if Bit 5 is set at RAM1_0b9 (Mn=1)
          brset 0,RAM1_05d,L051E        ; Branch to L051E if Bit 0 is set at RAM1_05d (Mn=1)
          brclr 4,RAM1_0ba,L051E        ; Branch to L051E if Bit 4 Clear (Mn = 0) 
          jmp L35ED                     ; Unconditional Jump to L35ED             
; 
          brclr 0,RAM1_0a1,L052A        ; Branch to L052A if Bit 0 Clear (Mn = 0) 
          brclr 5,RAM1_07f,L052A        ; Branch to L052A if Bit 5 Clear (Mn = 0) 
          bset 0,RAM1_05d               ; Set Bit 0 at memory RAM1_05d (Mn <- 1 ) 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          bra L053E                     ; Branch Always (1 = 1)                   
; 
          brset 5,RAM1_0b9,L0539        ; Branch to L0539 if Bit 5 is set at RAM1_0b9 (Mn=1)
          brclr 4,RAM1_0b9,L0542        ; Branch to L0542 if Bit 4 Clear (Mn = 0) 
          brset 1,RAM1_0a1,L0547        ; Branch to L0547 if Bit 1 is set at RAM1_0a1 (Mn=1)
          brset 5,RAM1_07f,L0547        ; Branch to L0547 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 0,RAM1_05d,L0547        ; Branch to L0547 if Bit 0 is set at RAM1_05d (Mn=1)
          brset 0,RAM1_0a1,L0588        ; Branch to L0588 if Bit 0 is set at RAM1_0a1 (Mn=1)
          lda #$89                      ; Load Accumulator with value of Memory at #$89, A <- (#$89)
          sta RAM1_0a0                  ; Store Accumulator in Memory at RAM1_0a0 
          bra L0588                     ; Branch Always (1 = 1)                   
; 
          bclr 0,RAM1_05d               ; Clear bit 0 at RAM1_05d                 
          brset 0,RAM1_0a1,L0526        ; Branch to L0526 if Bit 0 is set at RAM1_0a1 (Mn=1)
          brclr 5,RAM1_07f,L0588        ; Branch to L0588 if Bit 5 Clear (Mn = 0) 
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          brset 3,STACK_0ce,L0588       ; Branch to L0588 if Bit 3 is set at STACK_0ce (Mn=1)
          brclr 1,RAM1_0a1,L0558        ; Branch to L0558 if Bit 1 Clear (Mn = 0) 
          bset 2,STACK_0ce              ; Set Bit 2 at memory STACK_0ce (Mn <- 1 )
          bset 5,STACK_0cf              ; Set Bit 5 at memory STACK_0cf (Mn <- 1 )
          bra L0588                     ; Branch Always (1 = 1)                   
; 
          ldx STACK_0cf                 ; Load Index Register with Memory Byte, X <- (STACK_0cf)
          brclr 2,STACK_0ce,L057B       ; Branch to L057B if Bit 2 Clear (Mn = 0) 
          brclr 3,STACK_0d2,L0569       ; Branch to L0569 if Bit 3 Clear (Mn = 0) 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          bne L0574                     ; Branch to L0574 if Not Equal (Z = 0);   
          jmp L3686                     ; Unconditional Jump to L3686             
; 
          incx                          ; Increment Index register by 1,X++       
          bne L051B                     ; Branch to L051B if Not Equal (Z = 0);   
          bclr 7,STACK_0cf              ; Clear bit 7 at STACK_0cf                
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          bset 0,RAM1_05d               ; Set Bit 0 at memory RAM1_05d (Mn <- 1 ) 
          bra L0583                     ; Branch Always (1 = 1)                   
; 
          jsr L36A5                     ; Jump to Subroutine at L36A5             
          lda #$85                      ; Load Accumulator with value of Memory at #$85, A <- (#$85)
          bra L0585                     ; Branch Always (1 = 1)                   
; 
          incx                          ; Increment Index register by 1,X++       
          bne L0588                     ; Branch to L0588 if Not Equal (Z = 0);   
          brclr 3,STACK_0d2,L05ED       ; Branch to L05ED if Bit 3 Clear (Mn = 0) 
          lda #$8D                      ; Load Accumulator with value of Memory at #$8D, A <- (#$8D)
L3583: 
          bclr 6,RAM1_080               ; Clear bit 6 at RAM1_080                 
          jmp L363B                     ; Unconditional Jump to L363B             
; 
          brclr 6,RAM1_05d,L05C0        ; Branch to L05C0 if Bit 6 Clear (Mn = 0) 
          brset 3,RAM1_07f,L05C0        ; Branch to L05C0 if Bit 3 is set at RAM1_07f (Mn=1)
          jmp L36CD                     ; Unconditional Jump to L36CD             
; 
L3591: 
          lda #$44                      ; Load Accumulator with value of Memory at #$44, A <- (#$44)
          bset 6,STACK_0c5              ; Set Bit 6 at memory STACK_0c5 (Mn <- 1 )
          bra L05D1                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          and #$2B                      ; Logical AND, A ← (A) && (#$2B)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          bne L05C0                     ; Branch to L05C0 if Not Equal (Z = 0);   
          lda #$30                      ; Load Accumulator with value of Memory at #$30, A <- (#$30)
          bra L05BE                     ; Branch Always (1 = 1)                   
; 
          brset 3,STACK_0ce,L05C0       ; Branch to L05C0 if Bit 3 is set at STACK_0ce (Mn=1)
          brset 3,RAM1_08e,L05C0        ; Branch to L05C0 if Bit 3 is set at RAM1_08e (Mn=1)
          brset 3,STACK_0d2,L0620       ; Branch to L0620 if Bit 3 is set at STACK_0d2 (Mn=1)
          brset 5,RAM1_07f,L05F3        ; Branch to L05F3 if Bit 5 is set at RAM1_07f (Mn=1)
          rts                           ; Return from Subroutine                  
; 
          brset 3,STACK_0ce,L05C0       ; Branch to L05C0 if Bit 3 is set at STACK_0ce (Mn=1)
          brset 3,RAM1_08e,L0597        ; Branch to L0597 if Bit 3 is set at RAM1_08e (Mn=1)
          brclr 1,RAM1_0a1,L05BC        ; Branch to L05BC if Bit 1 Clear (Mn = 0) 
          brclr 3,STACK_0d2,L05D6       ; Branch to L05D6 if Bit 3 Clear (Mn = 0) 
          lda #$B0                      ; Load Accumulator with value of Memory at #$B0, A <- (#$B0)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          rts                           ; Return from Subroutine                  
; 
          brclr 4,RAM1_0ba,L05CA        ; Branch to L05CA if Bit 4 Clear (Mn = 0) 
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          lda #$F1                      ; Load Accumulator with value of Memory at #$F1, A <- (#$F1)
          bra L05D1                     ; Branch Always (1 = 1)                   
; 
L35CA: 
          lda #$66                      ; Load Accumulator with value of Memory at #$66, A <- (#$66)
          brclr 2,RAM1_0b8,L05D1        ; Branch to L05D1 if Bit 2 Clear (Mn = 0) 
          lda #$26                      ; Load Accumulator with value of Memory at #$26, A <- (#$26)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          jmp L366A                     ; Unconditional Jump to L366A             
; 
          lda #$24                      ; Load Accumulator with value of Memory at #$24, A <- (#$24)
          brset 3,RAM1_08e,L0593        ; Branch to L0593 if Bit 3 is set at RAM1_08e (Mn=1)
          brset 3,STACK_0d2,L0620       ; Branch to L0620 if Bit 3 is set at STACK_0d2 (Mn=1)
          brset 5,RAM1_07f,L05E7        ; Branch to L05E7 if Bit 5 is set at RAM1_07f (Mn=1)
          brclr 6,RAM1_0b5,L05CA        ; Branch to L05CA if Bit 6 Clear (Mn = 0) 
          brset 2,RAM1_0b8,L05CA        ; Branch to L05CA if Bit 2 is set at RAM1_0b8 (Mn=1)
          brset 2,RAM1_0be,L05C0        ; Branch to L05C0 if Bit 2 is set at RAM1_0be (Mn=1)
          brclr 1,RAM1_0a1,L05F3        ; Branch to L05F3 if Bit 1 Clear (Mn = 0) 
L35ED: 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM1_0a0                  ; Store Accumulator in Memory at RAM1_0a0 
          bra L066A                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          brclr 5,RAM1_07f,L0601        ; Branch to L0601 if Bit 5 Clear (Mn = 0) 
          beq L066A                     ; Branch to L066A if Equal Z=1            
          jsr L36A5                     ; Jump to Subroutine at L36A5             
          bra L0636                     ; Branch Always (1 = 1)                   
; 
          brset 0,RAM1_0a1,L0606        ; Branch to L0606 if Bit 0 is set at RAM1_0a1 (Mn=1)
          beq L0613                     ; Branch to L0613 if Equal Z=1            
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          bset 2,STACK_0ce              ; Set Bit 2 at memory STACK_0ce (Mn <- 1 )
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          jmp L3583                     ; Unconditional Jump to L3583             
; 
          clr STACK_0c8                 ; Clear byte at STACK_0c8 <- 0x00         
          lda #$8A                      ; Load Accumulator with value of Memory at #$8A, A <- (#$8A)
          jsr L24E5                     ; Jump to Subroutine at L24E5             
          lda #$2C                      ; Load Accumulator with value of Memory at #$2C, A <- (#$2C)
          jsr L259A                     ; Jump to Subroutine at L259A             
          rts                           ; Return from Subroutine                  
; 
          jsr L36A5                     ; Jump to Subroutine at L36A5             
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          brset 1,RAM1_0a1,L063B        ; Branch to L063B if Bit 1 is set at RAM1_0a1 (Mn=1)
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          cmp #$0F                      ; Compare Accumulator with Memory Byte, (A) - (#$0F)
          beq L0636                     ; Branch to L0636 if Equal Z=1            
deca 
          jsr L261E                     ; Jump to Subroutine at L261E             
          cmp RAM1_0a2                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_0a2)
          bcc L0639                     ; Branch to L0639 if C bit is cleared     
          lda #$86                      ; Load Accumulator with value of Memory at #$86, A <- (#$86)
          cmp XA684                     ; Compare Accumulator with Memory Byte, (A) - (XA684)
L363B: 
          bset 5,RAM1_07f               ; Set Bit 5 at memory RAM1_07f (Mn <- 1 ) 
          sta RAM1_0a0                  ; Store Accumulator in Memory at RAM1_0a0 
          bra L0698                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_05f,L0647        ; Branch to L0647 if Bit 1 Clear (Mn = 0) 
          jmp L35CA                     ; Unconditional Jump to L35CA             
; 
          brset 5,RAM1_07f,L06A4        ; Branch to L06A4 if Bit 5 is set at RAM1_07f (Mn=1)
          bset 2,RAM1_07e               ; Set Bit 2 at memory RAM1_07e (Mn <- 1 ) 
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_07f                  ; Store Accumulator in Memory at RAM1_07f 
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          jsr L2649                     ; Jump to Subroutine at L2649             
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          lda #$26                      ; Load Accumulator with value of Memory at #$26, A <- (#$26)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          bclr 5,STACK_0d2              ; Clear bit 5 at STACK_0d2                
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          bsr L0696                     ; Branch to Subroutine at L0696           
          bclr 4,RAM1_0b3               ; Clear bit 4 at RAM1_0b3                 
          bclr 5,RAM1_0b6               ; Clear bit 5 at RAM1_0b6                 
          rts                           ; Return from Subroutine                  
; 
L366A: 
          bclr 5,RAM1_07f               ; Clear bit 5 at RAM1_07f                 
          bclr 1,STACK_0ce              ; Clear bit 1 at STACK_0ce                
          bclr 0,STACK_0ce              ; Clear bit 0 at STACK_0ce                
          bclr 3,STACK_0d2              ; Clear bit 3 at STACK_0d2                
          bra L069E                     ; Branch Always (1 = 1)                   
; 
          brset 5,RAM1_07f,L06A4        ; Branch to L06A4 if Bit 5 is set at RAM1_07f (Mn=1)
          brset 4,RAM1_0ba,L06A4        ; Branch to L06A4 if Bit 4 is set at RAM1_0ba (Mn=1)
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          beq L0613                     ; Branch to L0613 if Equal Z=1            
          lda #$86                      ; Load Accumulator with value of Memory at #$86, A <- (#$86)
          sta RAM1_0a0                  ; Store Accumulator in Memory at RAM1_0a0 
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
L3686: 
          bclr 3,STACK_0d2              ; Clear bit 3 at STACK_0d2                
          lda #$7D                      ; Load Accumulator with value of Memory at #$7D, A <- (#$7D)
          bset 6,RAM1_080               ; Set Bit 6 at memory RAM1_080 (Mn <- 1 ) 
          bclr 2,STACK_0ce              ; Clear bit 2 at STACK_0ce                
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          bset 1,STACK_0ce              ; Set Bit 1 at memory STACK_0ce (Mn <- 1 )
          bset 0,STACK_0ce              ; Set Bit 0 at memory STACK_0ce (Mn <- 1 )
          bset 5,RAM1_07f               ; Set Bit 5 at memory RAM1_07f (Mn <- 1 ) 
          sta STACK_0cf                 ; Store Accumulator in Memory at STACK_0cf
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          bset 5,RAM1_0b3               ; Set Bit 5 at memory RAM1_0b3 (Mn <- 1 ) 
          bclr 7,STACK_0d2              ; Clear bit 7 at STACK_0d2                
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bset 3,RAM1_07e               ; Set Bit 3 at memory RAM1_07e (Mn <- 1 ) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L36A5: 
          bset 3,STACK_0d2              ; Set Bit 3 at memory STACK_0d2 (Mn <- 1 )
          lda #$32                      ; Load Accumulator with value of Memory at #$32, A <- (#$32)
          bra L068A                     ; Branch Always (1 = 1)                   
; 
L36AB: 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          cmp #$0F                      ; Compare Accumulator with Memory Byte, (A) - (#$0F)
          bne L06B5                     ; Branch to L06B5 if Not Equal (Z = 0);   
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bra L06C0                     ; Branch Always (1 = 1)                   
; 
          jsr L2617                     ; Jump to Subroutine at L2617             
          sta RAM1_05b                  ; Store Accumulator in Memory at RAM1_05b 
          lda RAM1_0a2                  ; Load Accumulator with value of Memory at RAM1_0a2, A <- (RAM1_0a2)
          sub RAM1_05b                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_05b)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          add #$2C                      ; Add without Carry, A ← (A) + (#$2C)   
          jsr L259A                     ; Jump to Subroutine at L259A             
          lda #$8A                      ; Load Accumulator with value of Memory at #$8A, A <- (#$8A)
          jsr L24DC                     ; Jump to Subroutine at L24DC             
          rts                           ; Return from Subroutine                  
; 
L36CD: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brclr 5,STACK_0ce,L06D3       ; Branch to L06D3 if Bit 5 Clear (Mn = 0) 
          ldx #$0E                      ; Load Index Register with Memory Byte, X <- (#$0E)
          lda X36EA,x                   ; Load Accumulator with value of Memory at X36EA, A <- (X36EA)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X36E9,x                   ; Load Accumulator with value of Memory at X36E9, A <- (X36E9)
          beq L06E8                     ; Branch to L06E8 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L06D3                     ; Branch to L06D3 if Not Equal (Z = 0);   
          ldx X36E8,x                   ; Load Index Register with Memory Byte, X <- (X36E8)
          jsr L3591,x ;INFO: index jump ; Jump to Subroutine at L3591             
X36E8: 
          rts                           ; Return from Subroutine                  
; 
X36E9: 
          eor OCL2,x                    ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (OCL2)
          eor X45A8                     ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (X45A8)
          sub X0028                     ; Subtract Memory Byte from Accumulator , A ← (A) – (X0028)
          brset 0,RAM1_0ab,L06D6        ; Branch to L06D6 if Bit 0 is set at RAM1_0ab (Mn=1)
          ldx #$E3                      ; Load Index Register with Memory Byte, X <- (#$E3)
          brset 4,TCR,L06FF             ; Branch to L06FF if Bit FOLV2 is set at TCR (Mn=1)
          neg STACK_0e8                 ; Negate Byte of STACK_0e8 (Two’s Complement), STACK_0e8 = 0x00 - (STACK_0e8)
          neg PortA                     ; Negate Byte of PortA (Two’s Complement), PortA = 0x00 - (PortA)
L36FC: 
          bsr L074A                     ; Branch to Subroutine at L074A           
          beq L070E                     ; Branch to L070E if Equal Z=1            
          lda #$81                      ; Load Accumulator with value of Memory at #$81, A <- (#$81)
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          bset 5,RAM1_094               ; Set Bit 5 at memory RAM1_094 (Mn <- 1 ) 
          bset 2,RAM1_069               ; Set Bit 2 at memory RAM1_069 (Mn <- 1 ) 
          bset 1,RAM1_07f               ; Set Bit 1 at memory RAM1_07f (Mn <- 1 ) 
          bclr 0,RAM1_07f               ; Clear bit 0 at RAM1_07f                 
          bset 4,RAM1_05c               ; Set Bit 4 at memory RAM1_05c (Mn <- 1 ) 
          lda SEC_MODE                  ; Load Accumulator with value of Memory at SEC_MODE, A <- (SEC_MODE)
          and #$EF                      ; Logical AND, A ← (A) && (#$EF)        
          brclr 7,RAM1_08b,L0718        ; Branch to L0718 if Bit 7 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          sta RAM1_08b                  ; Store Accumulator in Memory at RAM1_08b 
          bclr 7,RAM1_08b               ; Clear bit 7 at RAM1_08b                 
          and #$E0                      ; Logical AND, A ← (A) && (#$E0)        
          cmp #$A0                      ; Compare Accumulator with Memory Byte, (A) - (#$A0)
          bne L0730                     ; Branch to L0730 if Not Equal (Z = 0);   
          lda SEC_CODE1                 ; Load Accumulator with value of Memory at SEC_CODE1, A <- (SEC_CODE1)
          sta RAM1_08c                  ; Store Accumulator in Memory at RAM1_08c 
          lda SEC_CODE2                 ; Load Accumulator with value of Memory at SEC_CODE2, A <- (SEC_CODE2)
          sta RAM1_08d                  ; Store Accumulator in Memory at RAM1_08d 
          lda #$A8                      ; Load Accumulator with value of Memory at #$A8, A <- (#$A8)
          sta RAM1_08b                  ; Store Accumulator in Memory at RAM1_08b 
L3730: 
          bsr L074A                     ; Branch to Subroutine at L074A           
          beq L0736                     ; Branch to L0736 if Equal Z=1            
          bclr 3,RAM1_08b               ; Clear bit 3 at RAM1_08b                 
          brset 3,RAM1_08b,L0749        ; Branch to L0749 if Bit 3 is set at RAM1_08b (Mn=1)
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          brclr 2,RAM1_08b,L0749        ; Branch to L0749 if Bit 2 Clear (Mn = 0) 
          brclr 7,RAM1_064,L0749        ; Branch to L0749 if Bit 7 Clear (Mn = 0) 
          clr RAM1_08b                  ; Clear byte at RAM1_08b <- 0x00          
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L3761                     ; Jump to Subroutine at L3761             
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L374A: 
          lda SEC_CODE1                 ; Load Accumulator with value of Memory at SEC_CODE1, A <- (SEC_CODE1)
          cmp RAM1_08c                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_08c)
          bne L0749                     ; Branch to L0749 if Not Equal (Z = 0);   
          lda SEC_CODE2                 ; Load Accumulator with value of Memory at SEC_CODE2, A <- (SEC_CODE2)
          cmp RAM1_08d                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_08d)
          rts                           ; Return from Subroutine                  
; 
L3757: 
          brclr 1,RAM1_08b,L075C        ; Branch to L075C if Bit 1 Clear (Mn = 0) 
          bset 2,RAM1_08b               ; Set Bit 2 at memory RAM1_08b (Mn <- 1 ) 
          lda RAM1_08b                  ; Load Accumulator with value of Memory at RAM1_08b, A <- (RAM1_08b)
          cmp XA608                     ; Compare Accumulator with Memory Byte, (A) - (XA608)
L3761: 
          ldx #$63                      ; Load Index Register with Memory Byte, X <- (#$63)
          jsr L388B                     ; Jump to Subroutine at L388B             
          bset 2,RAM1_05d               ; Set Bit 2 at memory RAM1_05d (Mn <- 1 ) 
          jmp L2725                     ; Unconditional Jump to L2725             
; 
L376B: 
          brclr 0,STACK_0d6,L0773       ; Branch to L0773 if Bit 0 Clear (Mn = 0) 
          brclr 1,STACK_0d6,L0775       ; Branch to L0775 if Bit 1 Clear (Mn = 0) 
          bclr 0,STACK_0d6              ; Clear bit 0 at STACK_0d6                
          bclr 2,STACK_0d6              ; Clear bit 2 at STACK_0d6                
          bset 1,STACK_0d6              ; Set Bit 1 at memory STACK_0d6 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L3778: 
          bclr 1,STACK_0d6              ; Clear bit 1 at STACK_0d6                
          brset 3,SCSR,L07AB            ; Branch to L07AB if Bit OR is set at SCSR (Mn=1)
          brset 2,STACK_0d6,L07AB       ; Branch to L07AB if Bit 2 is set at STACK_0d6 (Mn=1)
          lda SCDR                      ; Load Accumulator with value of Memory at SCDR, A <- (SCDR)
          brset 6,RAM1_0ba,L0788        ; Branch to L0788 if Bit 6 is set at RAM1_0ba (Mn=1)
          brclr 5,RAM1_0ba,L07AB        ; Branch to L07AB if Bit 5 Clear (Mn = 0) 
          brset 0,STACK_0d6,L079A       ; Branch to L079A if Bit 0 is set at STACK_0d6 (Mn=1)
          bmi L07A8                     ; Branch to L07A8 if Minus N = 1          
          brset 3,STACK_0d6,L07AB       ; Branch to L07AB if Bit 3 is set at STACK_0d6 (Mn=1)
          sta RAM2_0271                 ; Store Accumulator in Memory at RAM2_0271
          bset 0,STACK_0d6              ; Set Bit 0 at memory STACK_0d6 (Mn <- 1 )
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          sta STACK_0d7                 ; Store Accumulator in Memory at STACK_0d7
          rts                           ; Return from Subroutine                  
; 
          ldx STACK_0d7                 ; Load Index Register with Memory Byte, X <- (STACK_0d7)
          sta RAM2_0272,x               ; Store Accumulator in Memory at RAM2_0272
          dec STACK_0d7                 ; Decrement Byte at STACK_0d7 Byte = Byte - 1
          bpl L07A7                     ; Branch to L07A7 if Plus N = 0           
          bset 3,STACK_0d6              ; Set Bit 3 at memory STACK_0d6 (Mn <- 1 )
          bclr 0,STACK_0d6              ; Clear bit 0 at STACK_0d6                
          rts                           ; Return from Subroutine                  
; 
          sta STACK_0d8                 ; Store Accumulator in Memory at STACK_0d8
          rts                           ; Return from Subroutine                  
; 
          bset 2,STACK_0d6              ; Set Bit 2 at memory STACK_0d6 (Mn <- 1 )
          bset 0,STACK_0d6              ; Set Bit 0 at memory STACK_0d6 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L37B0: 
          brclr 7,STACK_0d6,L07F3       ; Branch to L07F3 if Bit 7 Clear (Mn = 0) 
          brset 2,STACK_0d6,L07F3       ; Branch to L07F3 if Bit 2 is set at STACK_0d6 (Mn=1)
          lda STACK_0d9                 ; Load Accumulator with value of Memory at STACK_0d9, A <- (STACK_0d9)
          bne L07BC                     ; Branch to L07BC if Not Equal (Z = 0);   
          clr STACK_0d8                 ; Clear byte at STACK_0d8 <- 0x00         
          lda RAM2_027a                 ; Load Accumulator with value of Memory at RAM2_027a, A <- (RAM2_027a)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          cmp STACK_0d8                 ; Compare Accumulator with Memory Byte, (A) - (STACK_0d8)
          beq L07E9                     ; Branch to L07E9 if Equal Z=1            
          lda STACK_0d9                 ; Load Accumulator with value of Memory at STACK_0d9, A <- (STACK_0d9)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          bne L07DA                     ; Branch to L07DA if Not Equal (Z = 0);   
          clrx                          ; Clear Index Register, X <- 0x00         
          bsr L0008                     ; Branch to Subroutine at L0008           
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          incx                          ; Increment Index register by 1,X++       
deca 
          bmi L07CC                     ; Branch to L07CC if Minus N = 1          
          eor RAM2_027a                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM2_027a)
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          bne L07CC                     ; Branch to L07CC if Not Equal (Z = 0);   
          inc STACK_0d9                 ; Increment Byte STACK_0d9, Byte = Byte + 1
          bne L07F3                     ; Branch to L07F3 if Not Equal (Z = 0);   
          brclr 0,RAM1_061,L07E3        ; Branch to L07E3 if Bit 0 Clear (Mn = 0) 
          bset 2,RAM1_05d               ; Set Bit 2 at memory RAM1_05d (Mn <- 1 ) 
          bclr 6,RAM1_0ba               ; Clear bit 6 at RAM1_0ba                 
          bclr 5,RAM1_0ba               ; Clear bit 5 at RAM1_0ba                 
          bclr 5,RAM1_061               ; Clear bit 5 at RAM1_061                 
          bclr 7,STACK_0d6              ; Clear bit 7 at STACK_0d6                
          brclr 1,RAM1_0bf,L07F1        ; Branch to L07F1 if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_0bf               ; Clear bit 1 at RAM1_0bf                 
          rts                           ; Return from Subroutine                  
; 
          bclr 0,RAM1_0bf               ; Clear bit 0 at RAM1_0bf                 
          rts                           ; Return from Subroutine                  
; 
L37F4: 
          brclr 6,STACK_0d6,L0014       ; Branch to L0014 if Bit 6 Clear (Mn = 0) 
          bclr 6,STACK_0d6              ; Clear bit 6 at STACK_0d6                
          clra                          ; Clear byte Accumulator, A <- 0x00       
deca 
          beq L0000                     ; Branch to L0000 if Equal Z=1            
          brclr 7,SCSR,L07FA            ; Branch to L07FA if Bit TDRE Clear (Mn = 0)
          lda RAM2_0271                 ; Load Accumulator with value of Memory at RAM2_0271, A <- (RAM2_0271)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          sta SCDR                      ; Store Accumulator in Memory at SCDR     
          rts                           ; Return from Subroutine                  
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
deca 
          beq L000F                     ; Branch to L000F if Equal Z=1            
          brclr 7,SCSR,L0009            ; Branch to L0009 if Bit TDRE Clear (Mn = 0)
          lda RAM2_027a,x               ; Load Accumulator with value of Memory at RAM2_027a, A <- (RAM2_027a)
          sta SCDR                      ; Store Accumulator in Memory at SCDR     
          rts                           ; Return from Subroutine                  
; 
L3815: 
          clr RAM1_05d                  ; Clear byte at RAM1_05d <- 0x00          
          clr RAM1_077                  ; Clear byte at RAM1_077 <- 0x00          
          clr RAM1_0a0                  ; Clear byte at RAM1_0a0 <- 0x00          
          clr RAM1_05d                  ; Clear byte at RAM1_05d <- 0x00          
          clr STACK_0d5                 ; Clear byte at STACK_0d5 <- 0x00         
          clr RAM1_07d                  ; Clear byte at RAM1_07d <- 0x00          
          clr RAM1_07b                  ; Clear byte at RAM1_07b <- 0x00          
          clr RAM1_078                  ; Clear byte at RAM1_078 <- 0x00          
          clr RAM1_07a                  ; Clear byte at RAM1_07a <- 0x00          
          clr STACK_0d2                 ; Clear byte at STACK_0d2 <- 0x00         
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          sta RAM1_0b3                  ; Store Accumulator in Memory at RAM1_0b3 
          clr RAM1_0bb                  ; Clear byte at RAM1_0bb <- 0x00          
          clr RAM1_0b6                  ; Clear byte at RAM1_0b6 <- 0x00          
          jsr L2504                     ; Jump to Subroutine at L2504             
          ldx #$A7                      ; Load Index Register with Memory Byte, X <- (#$A7)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          sta RAM1_07f                  ; Store Accumulator in Memory at RAM1_07f 
          bset 7,RAM1_07f               ; Set Bit 7 at memory RAM1_07f (Mn <- 1 ) 
          ldx #$A5                      ; Load Index Register with Memory Byte, X <- (#$A5)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          and #$71                      ; Logical AND, A ← (A) && (#$71)        
          sta STACK_0d3                 ; Store Accumulator in Memory at STACK_0d3
          bset 7,RAM1_07c               ; Set Bit 7 at memory RAM1_07c (Mn <- 1 ) 
          ldx #$A6                      ; Load Index Register with Memory Byte, X <- (#$A6)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          and #$06                      ; Logical AND, A ← (A) && (#$06)        
          sta STACK_0d4                 ; Store Accumulator in Memory at STACK_0d4
          lda RAM1_081                  ; Load Accumulator with value of Memory at RAM1_081, A <- (RAM1_081)
          and #$01                      ; Logical AND, A ← (A) && (#$01)        
          sta RAM1_081                  ; Store Accumulator in Memory at RAM1_081 
          bset 6,RAM1_081               ; Set Bit 6 at memory RAM1_081 (Mn <- 1 ) 
          jsr L400D                     ; Jump to Subroutine at L400D             
          brclr 5,RAM1_069,L006C        ; Branch to L006C if Bit 5 Clear (Mn = 0) 
          bclr 5,STACK_0d3              ; Clear bit 5 at STACK_0d3                
          bclr 6,STACK_0d3              ; Clear bit 6 at STACK_0d3                
          brset 0,RAM1_07f,L006C        ; Branch to L006C if Bit 0 is set at RAM1_07f (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_07f                  ; Store Accumulator in Memory at RAM1_07f 
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
L386E: 
          tst RAM1_05c                  ; Test Memory Byte for Negative or Zero, (RAM1_05c) – 0x00
          beq L008A                     ; Branch to L008A if Equal Z=1            
          lda RAM1_07f                  ; Load Accumulator with value of Memory at RAM1_07f, A <- (RAM1_07f)
          ldx #$A7                      ; Load Index Register with Memory Byte, X <- (#$A7)
          brset 4,RAM1_05c,L007F        ; Branch to L007F if Bit 4 is set at RAM1_05c (Mn=1)
          lda RAM1_085                  ; Load Accumulator with value of Memory at RAM1_085, A <- (RAM1_085)
          ldx #$A8                      ; Load Index Register with Memory Byte, X <- (#$A8)
          bclr 3,RAM1_05c               ; Clear bit 3 at RAM1_05c                 
          bclr 4,RAM1_05c               ; Clear bit 4 at RAM1_05c                 
          brclr 0,RAM1_061,L008A        ; Branch to L008A if Bit 0 Clear (Mn = 0) 
          brset 0,RAM1_080,L008A        ; Branch to L008A if Bit 0 is set at RAM1_080 (Mn=1)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          rts                           ; Return from Subroutine                  
; 
L388B: 
cpx #$90 
          bcc L00BB                     ; Branch to L00BB if C bit is cleared     
cpx #$63 
          bcs L00BB                     ; Branch to L00BB if C = 1                
          bsr L00A4                     ; Branch to Subroutine at L00A4           
          bsr L0097                     ; Branch to Subroutine at L0097           
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          sub #$30                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$30)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda EEPROM_0130,x             ; Load Accumulator with value of Memory at EEPROM_0130, A <- (EEPROM_0130)
          bra L00A4                     ; Branch Always (1 = 1)                   
; 
L38A0: 
cpx #$90 
          bcs L00BB                     ; Branch to L00BB if C = 1                
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          cmp OPTR,x                    ; Compare Accumulator with Memory Byte, (A) - (OPTR)
          beq L00BB                     ; Branch to L00BB if Equal Z=1            
          sei                           ; Set Interrupt Mask, I ← 1);           
          bclr 4,Miscell                ; Clear bit INTE at Miscell               
          bset 1,EEPROM_ECLK_control    ; Set Bit E1LAT at memory EEPROM_ECLK_control (Mn <- 1 )
          bset 2,EEPROM_ECLK_control    ; Set Bit E1ERA at memory EEPROM_ECLK_control (Mn <- 1 )
          bsr L00BC                     ; Branch to Subroutine at L00BC           
          bset 1,EEPROM_ECLK_control    ; Set Bit E1LAT at memory EEPROM_ECLK_control (Mn <- 1 )
          bsr L00BC                     ; Branch to Subroutine at L00BC           
          bset 4,Miscell                ; Set Bit INTE at memory Miscell (Mn <- 1 )
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
          sta OPTR,x                    ; Store Accumulator in Memory at OPTR     
          bset 0,EEPROM_ECLK_control    ; Set Bit E1PGM at memory EEPROM_ECLK_control (Mn <- 1 )
          cli                           ; Clear Interrupt Mask (I <- 0)           
          jsr L2631                     ; Jump to Subroutine at L2631             
          sei                           ; Set Interrupt Mask, I ← 1);           
          lda RAM1_059                  ; Load Accumulator with value of Memory at RAM1_059, A <- (RAM1_059)
          bclr 1,EEPROM_ECLK_control    ; Clear bit E1LAT at EEPROM_ECLK_control  
          rts                           ; Return from Subroutine                  
; 
L38CB: 
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
L38CC: 
          lda OPTR,x                    ; Load Accumulator with value of Memory at OPTR, A <- (OPTR)
          rts                           ; Return from Subroutine                  
; 
L38D0: 
          brclr 6,STACK_0ce,L013D       ; Branch to L013D if Bit 6 Clear (Mn = 0) 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          beq L013D                     ; Branch to L013D if Equal Z=1            
          jmp L397F                     ; Unconditional Jump to L397F             
; 
L38DC: 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          bmi L013D                     ; Branch to L013D if Minus N = 1          
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          cmp #$60                      ; Compare Accumulator with Memory Byte, (A) - (#$60)
          bhi L00EB                     ; Branch to L00EB if Higher C v Z = 0     
          brclr 1,RAM1_081,L00F1        ; Branch to L00F1 if Bit 1 Clear (Mn = 0) 
          bne L00F1                     ; Branch to L00F1 if Not Equal (Z = 0);   
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 3,RAM1_08e,L00F1        ; Branch to L00F1 if Bit 3 Clear (Mn = 0) 
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          add #$10                      ; Add without Carry, A ← (A) + (#$10)   
          sta STACK_0d0                 ; Store Accumulator in Memory at STACK_0d0
          jsr L2617                     ; Jump to Subroutine at L2617             
          add #$A8                      ; Add without Carry, A ← (A) + (#$A8)   
          jsr L38CB                     ; Jump to Subroutine at L38CB             
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          add STACK_0d0                 ; Add without Carry, A ← (A) + (STACK_0d0)
          bra L012B                     ; Branch Always (1 = 1)                   
; 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          jsr L2617                     ; Jump to Subroutine at L2617             
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          cmp #$17                      ; Compare Accumulator with Memory Byte, (A) - (#$17)
          beq L013D                     ; Branch to L013D if Equal Z=1            
          bhi L011D                     ; Branch to L011D if Higher C v Z = 0     
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          cmp X393D,x                   ; Compare Accumulator with Memory Byte, (A) - (X393D)
          bhi L0126                     ; Branch to L0126 if Higher C v Z = 0     
          beq L012B                     ; Branch to L012B if Equal Z=1            
          inca                          ; Increment Accumulator by 1,A++          
          bra L012B                     ; Branch Always (1 = 1)                   
; 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          cmp X3944,x                   ; Compare Accumulator with Memory Byte, (A) - (X3944)
          bhi L012A                     ; Branch to L012A if Higher C v Z = 0     
          beq L012B                     ; Branch to L012B if Equal Z=1            
          lda X393D,x                   ; Load Accumulator with value of Memory at X393D, A <- (X393D)
          cmp X004A                     ; Compare Accumulator with Memory Byte, (A) - (X004A)
          sta STACK_0d0                 ; Store Accumulator in Memory at STACK_0d0
          jsr L2617                     ; Jump to Subroutine at L2617             
          add #$A8                      ; Add without Carry, A ← (A) + (#$A8)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          jmp L394C                     ; Unconditional Jump to L394C             
X393D: 
          rts                           ; Return from Subroutine                  
; 
          bclr 2,X0025                  ; Clear bit 2 at X0025                    
; 
          db $35, $41, $51, $65         ; data? 5, A, Q, e                        
X3944: 
          db $71                        ; data? q,  ,  ,                          
; 
          bclr 0,X0020                  ; Clear bit 0 at X0020                    
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          negx                          ; Negate Byte of Index register(Two’s Complement), X = 0x00 - (X)
; 
          db $61                        ; data? a,  ,  ,                          
; 
          neg ,x                        ; Negate Byte of  (Two’s Complement),  = 0x00 - ()
L394C: 
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          jsr L2573                     ; Jump to Subroutine at L2573             
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          bpl L0156                     ; Branch to L0156 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
          and #$70                      ; Logical AND, A ← (A) && (#$70)        
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          jsr L254D                     ; Jump to Subroutine at L254D             
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          beq L017A                     ; Branch to L017A if Equal Z=1            
          bcs L016D                     ; Branch to L016D if C = 1                
          ora #$30                      ; Logical OR Accumulator with Memory at #$30, A <- (A) || (#$30)
          sta RAM2_025c                 ; Store Accumulator in Memory at RAM2_025c
          bra L017A                     ; Branch Always (1 = 1)                   
; 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          sub #$10                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$10)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          and #$18                      ; Logical AND, A ← (A) && (#$18)        
          add #$40                      ; Add without Carry, A ← (A) + (#$40)   
          jsr L254D                     ; Jump to Subroutine at L254D             
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          jmp L24DC                     ; Unconditional Jump to L24DC             
; 
L397F: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brset 7,STACK_0d0,L0185       ; Branch to L0185 if Bit 7 is set at STACK_0d0 (Mn=1)
          ldx #$00                      ; Load Index Register with Memory Byte, X <- (#$00)
          lda X399E,x                   ; Load Accumulator with value of Memory at X399E, A <- (X399E)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X399D,x                   ; Load Accumulator with value of Memory at X399D, A <- (X399D)
          beq L019C                     ; Branch to L019C if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L0185                     ; Branch to L0185 if Not Equal (Z = 0);   
          ldx X399C,x                   ; Load Index Register with Memory Byte, X <- (X399C)
          jsr L38DC,x ;INFO: index jump ; Jump to Subroutine at L38DC             
          bclr 6,RAM1_05d               ; Clear bit 6 at RAM1_05d                 
X399C: 
          rts                           ; Return from Subroutine                  
; 
X399D: 
          eor PortA,x                   ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (PortA)
          brclr 3,PortA,L01C1           ; Branch to L01C1 if Bit SLAVE_STATUS Clear (Mn = 0)
          beq L01A4                     ; Branch to L01A4 if Equal Z=1            
L39A4: 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          jsr L3A7E                     ; Jump to Subroutine at L3A7E             
          beq L01B9                     ; Branch to L01B9 if Equal Z=1            
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L2631                     ; Jump to Subroutine at L2631             
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L01A8                     ; Branch to L01A8 if Not Equal (Z = 0);   
          jsr L2631                     ; Jump to Subroutine at L2631             
          bclr 6,PortB                  ; Clear bit PANEL_RESET at PortB          
          clr RAM1_09e                  ; Clear byte at RAM1_09e <- 0x00          
          rts                           ; Return from Subroutine                  
; 
L39C1: 
          bset 1,RAM1_05d               ; Set Bit 1 at memory RAM1_05d (Mn <- 1 ) 
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          cmp XA607                     ; Compare Accumulator with Memory Byte, (A) - (XA607)
          sta RAM1_09e                  ; Store Accumulator in Memory at RAM1_09e 
          jsr L3AA2                     ; Jump to Subroutine at L3AA2             
          bclr 6,PortB                  ; Clear bit PANEL_RESET at PortB          
          jsr L2640                     ; Jump to Subroutine at L2640             
          bset 6,PortB                  ; Set Bit PANEL_RESET at memory PortB (Mn <- 1 )
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          brclr 0,PortA,L01E4           ; Branch to L01E4 if Bit PANEL_STATUS Clear (Mn = 0)
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L01D8                     ; Branch to L01D8 if Not Equal (Z = 0);   
          bclr 2,RAM1_09e               ; Clear bit 2 at RAM1_09e                 
          jmp L0779                     ; Unconditional Jump to L0779             
; 
          jsr L2631                     ; Jump to Subroutine at L2631             
          jsr L2631                     ; Jump to Subroutine at L2631             
          bsr L0248                     ; Branch to Subroutine at L0248           
          clr RAM1_09f                  ; Clear byte at RAM1_09f <- 0x00          
          jsr L2504                     ; Jump to Subroutine at L2504             
          rts                           ; Return from Subroutine                  
          bra L01DF                     ; Branch Always (1 = 1)                   
; 
L39F4: 
          lda RAM1_09e                  ; Load Accumulator with value of Memory at RAM1_09e, A <- (RAM1_09e)
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          bne L020E                     ; Branch to L020E if Not Equal (Z = 0);   
          brclr 1,RAM1_05d,L0224        ; Branch to L0224 if Bit 1 Clear (Mn = 0) 
          lda RAM1_06c                  ; Load Accumulator with value of Memory at RAM1_06c, A <- (RAM1_06c)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          sta RAM2_0250,x               ; Store Accumulator in Memory at RAM2_0250
          lda #$E1                      ; Load Accumulator with value of Memory at #$E1, A <- (#$E1)
          bsr L027E                     ; Branch to Subroutine at L027E           
          bne L0224                     ; Branch to L0224 if Not Equal (Z = 0);   
          bclr 1,RAM1_05d               ; Clear bit 1 at RAM1_05d                 
          rts                           ; Return from Subroutine                  
; 
          brclr 2,RAM1_09e,L0224        ; Branch to L0224 if Bit 2 Clear (Mn = 0) 
          lda RAM2_0256                 ; Load Accumulator with value of Memory at RAM2_0256, A <- (RAM2_0256)
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          brclr 7,RAM1_09e,L0225        ; Branch to L0225 if Bit 7 Clear (Mn = 0) 
          brclr 3,RAM1_09e,L023E        ; Branch to L023E if Bit 3 Clear (Mn = 0) 
          lda #$D0                      ; Load Accumulator with value of Memory at #$D0, A <- (#$D0)
          bsr L027E                     ; Branch to Subroutine at L027E           
          bne L0224                     ; Branch to L0224 if Not Equal (Z = 0);   
          bclr 3,RAM1_09e               ; Clear bit 3 at RAM1_09e                 
          rts                           ; Return from Subroutine                  
; 
          brclr 6,RAM1_09e,L0234        ; Branch to L0234 if Bit 6 Clear (Mn = 0) 
          brset 3,RAM1_09e,L023E        ; Branch to L023E if Bit 3 is set at RAM1_09e (Mn=1)
          lda #$C0                      ; Load Accumulator with value of Memory at #$C0, A <- (#$C0)
          bsr L027E                     ; Branch to Subroutine at L027E           
          bne L0224                     ; Branch to L0224 if Not Equal (Z = 0);   
          bset 3,RAM1_09e               ; Set Bit 3 at memory RAM1_09e (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda #$13                      ; Load Accumulator with value of Memory at #$13, A <- (#$13)
          clrx                          ; Clear Index Register, X <- 0x00         
          brset 5,RAM1_09e,L023E        ; Branch to L023E if Bit 5 is set at RAM1_09e (Mn=1)
          lda #$23                      ; Load Accumulator with value of Memory at #$23, A <- (#$23)
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
          jsr L3A7E                     ; Jump to Subroutine at L3A7E             
          bne L0224                     ; Branch to L0224 if Not Equal (Z = 0);   
          ldx #$9E                      ; Load Index Register with Memory Byte, X <- (#$9E)
          jmp L266E                     ; Unconditional Jump to L266E             
; 
L3A48: 
          brclr 2,RAM1_09e,L01F2        ; Branch to L01F2 if Bit 2 Clear (Mn = 0) 
          brset 0,PortA,L02A8           ; Branch to L02A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 6,RAM1_09f,L02A8        ; Branch to L02A8 if Bit 6 is set at RAM1_09f (Mn=1)
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda #$25                      ; Load Accumulator with value of Memory at #$25, A <- (#$25)
          jsr L3AA9                     ; Jump to Subroutine at L3AA9             
          beq L02A0                     ; Branch to L02A0 if Equal Z=1            
          bclr 1,DDRA                   ; Clear bit PANEL_DATA at DDRA            
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bset 2,PortA                  ; Set Bit PANEL_CLOCK at memory PortA (Mn <- 1 )
          brset 1,PortA,L0265           ; Branch to L0265 if Bit PANEL_DATA is set at PortA (Mn=1)
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bclr 2,PortA                  ; Clear bit PANEL_CLOCK at PortA          
          bcc L0260                     ; Branch to L0260 if C bit is cleared     
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          sei                           ; Set Interrupt Mask, I ← 1);           
          bsr L02E7                     ; Branch to Subroutine at L02E7           
          beq L02A0                     ; Branch to L02A0 if Equal Z=1            
          brset 6,RAM1_056,L02A2        ; Branch to L02A2 if Bit 6 is set at RAM1_056 (Mn=1)
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          beq L0299                     ; Branch to L0299 if Equal Z=1            
          sta RAM1_09f                  ; Store Accumulator in Memory at RAM1_09f 
          bset 6,RAM1_09f               ; Set Bit 6 at memory RAM1_09f (Mn <- 1 ) 
          bra L0299                     ; Branch Always (1 = 1)                   
; 
L3A7E: 
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda #$9A                      ; Load Accumulator with value of Memory at #$9A, A <- (#$9A)
          bsr L02A9                     ; Branch to Subroutine at L02A9           
          beq L02A0                     ; Branch to L02A0 if Equal Z=1            
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          bsr L02C8                     ; Branch to Subroutine at L02C8           
          beq L02A0                     ; Branch to L02A0 if Equal Z=1            
          lda RAM2_0250,x               ; Load Accumulator with value of Memory at RAM2_0250, A <- (RAM2_0250)
          incx                          ; Increment Index register by 1,X++       
          tst RAM1_057                  ; Test Memory Byte for Negative or Zero, (RAM1_057) – 0x00
          bpl L028D                     ; Branch to L028D if Plus N = 0           
          bset 1,RAM1_09e               ; Set Bit 1 at memory RAM1_09e (Mn <- 1 ) 
          bset 0,RAM1_09e               ; Set Bit 0 at memory RAM1_09e (Mn <- 1 ) 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bra L02A2                     ; Branch Always (1 = 1)                   
; 
          dec RAM1_09e                  ; Decrement Byte at RAM1_09e Byte = Byte - 1
L3AA2: 
          bclr 1,DDRA                   ; Clear bit PANEL_DATA at DDRA            
          bset 2,PortA                  ; Set Bit PANEL_CLOCK at memory PortA (Mn <- 1 )
          bset 2,DDRA                   ; Set Bit PANEL_CLOCK at memory DDRA (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
L3AA9: 
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          bclr 1,DDRA                   ; Clear bit PANEL_DATA at DDRA            
          bclr 2,PortA                  ; Clear bit PANEL_CLOCK at PortA          
          lda ACH                       ; Load Accumulator with value of Memory at ACH, A <- (ACH)
          add #$14                      ; Add without Carry, A ← (A) + (#$14)   
          cmp ACH                       ; Compare Accumulator with Memory Byte, (A) - (ACH)
          bmi L02C4                     ; Branch to L02C4 if Minus N = 1          
          brset 1,PortA,L02B3           ; Branch to L02B3 if Bit PANEL_DATA is set at PortA (Mn=1)
          brset 0,PortA,L02B3           ; Branch to L02B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C6           ; Branch to L02C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          cmp ACH                       ; Compare Accumulator with Memory Byte, (A) - (ACH)
          bpl L02BD                     ; Branch to L02BD if Plus N = 0           
          clra                          ; Clear byte Accumulator, A <- 0x00       
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          sec                           ; Set Carry Bit , C ← 1                 
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bclr 2,PortA                  ; Clear bit PANEL_CLOCK at PortA          
          bclr 1,PortA                  ; Clear bit PANEL_DATA at PortA           
          bcc L02D4                     ; Branch to L02D4 if C bit is cleared     
          bclr 1,DDRA                   ; Clear bit PANEL_DATA at DDRA            
          bra L02D6                     ; Branch Always (1 = 1)                   
; 
          bset 1,DDRA                   ; Set Bit PANEL_DATA at memory DDRA (Mn <- 1 )
          bset 2,PortA                  ; Set Bit PANEL_CLOCK at memory PortA (Mn <- 1 )
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bne L02CA                     ; Branch to L02CA if Not Equal (Z = 0);   
          bclr 2,PortA                  ; Clear bit PANEL_CLOCK at PortA          
          jsr L3B09                     ; Jump to Subroutine at L3B09             
          bclr 1,DDRA                   ; Clear bit PANEL_DATA at DDRA            
          tst RAM1_057                  ; Test Memory Byte for Negative or Zero, (RAM1_057) – 0x00
          bne L02E7                     ; Branch to L02E7 if Not Equal (Z = 0);   
          sei                           ; Set Interrupt Mask, I ← 1);           
          lda #$38                      ; Load Accumulator with value of Memory at #$38, A <- (#$38)
          brclr 0,PortA,L02F1           ; Branch to L02F1 if Bit PANEL_STATUS Clear (Mn = 0)
deca 
          bne L02E9                     ; Branch to L02E9 if Not Equal (Z = 0);   
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
          bset 2,PortA                  ; Set Bit PANEL_CLOCK at memory PortA (Mn <- 1 )
          cli                           ; Clear Interrupt Mask (I <- 0)           
          dec RAM1_057                  ; Decrement Byte at RAM1_057 Byte = Byte - 1
          bmi L0309                     ; Branch to L0309 if Minus N = 1          
          jsr L2640                     ; Jump to Subroutine at L2640             
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 0,PortA,L0309           ; Branch to L0309 if Bit PANEL_STATUS is set at PortA (Mn=1)
          lda #$38                      ; Load Accumulator with value of Memory at #$38, A <- (#$38)
          bclr 2,PortA                  ; Clear bit PANEL_CLOCK at PortA          
          brset 0,PortA,L0309           ; Branch to L0309 if Bit PANEL_STATUS is set at PortA (Mn=1)
deca 
          bne L0303                     ; Branch to L0303 if Not Equal (Z = 0);   
L3B09: 
          rts                           ; Return from Subroutine                  
; 
L3B0A: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_08f                  ; Store Accumulator in Memory at RAM1_08f 
          sta RAM2_02d1                 ; Store Accumulator in Memory at RAM2_02d1
          bclr 4,RAM1_06b               ; Clear bit 4 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          clr RAM1_090                  ; Clear byte at RAM1_090 <- 0x00          
          bset 1,RAM1_091               ; Set Bit 1 at memory RAM1_091 (Mn <- 1 ) 
          ldx #$0F                      ; Load Index Register with Memory Byte, X <- (#$0F)
          sta RAM2_02c0,x               ; Store Accumulator in Memory at RAM2_02c0
decx 
          bpl L031A                     ; Branch to L031A if Plus N = 0           
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          sta RAM2_02ca                 ; Store Accumulator in Memory at RAM2_02ca
          sta RAM2_02cb                 ; Store Accumulator in Memory at RAM2_02cb
          lda #$10                      ; Load Accumulator with value of Memory at #$10, A <- (#$10)
          sta RAM2_02c2                 ; Store Accumulator in Memory at RAM2_02c2
          brset 7,RAM1_061,L0387        ; Branch to L0387 if Bit 7 is set at RAM1_061 (Mn=1)
          brclr 3,RAM1_08e,L0335        ; Branch to L0335 if Bit 3 Clear (Mn = 0) 
          bset 4,STACK_0d5              ; Set Bit 4 at memory STACK_0d5 (Mn <- 1 )
          bset 5,STACK_0d5              ; Set Bit 5 at memory STACK_0d5 (Mn <- 1 )
          jsr L25A6                     ; Jump to Subroutine at L25A6             
          bset 5,RAM1_08f               ; Set Bit 5 at memory RAM1_08f (Mn <- 1 ) 
          brset 3,RAM1_05f,L0341        ; Branch to L0341 if Bit 3 is set at RAM1_05f (Mn=1)
          bset 0,RAM1_090               ; Set Bit 0 at memory RAM1_090 (Mn <- 1 ) 
          ldx #$2F                      ; Load Index Register with Memory Byte, X <- (#$2F)
          bclr 0,RAM1_05b               ; Clear bit 0 at RAM1_05b                 
          lda OPTR,x                    ; Load Accumulator with value of Memory at OPTR, A <- (OPTR)
          cmp EEPROM_0130,x             ; Compare Accumulator with Memory Byte, (A) - (EEPROM_0130)
          bne L0352                     ; Branch to L0352 if Not Equal (Z = 0);   
          cmp EEPROM_0160,x             ; Compare Accumulator with Memory Byte, (A) - (EEPROM_0160)
          beq L036F                     ; Branch to L036F if Equal Z=1            
          bset 0,RAM1_05b               ; Set Bit 0 at memory RAM1_05b (Mn <- 1 ) 
          and EEPROM_0130,x             ; Logical AND, A ← (A) && (EEPROM_0130) 
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda OPTR,x                    ; Load Accumulator with value of Memory at OPTR, A <- (OPTR)
          eor EEPROM_0130,x             ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (EEPROM_0130)
          and EEPROM_0160,x             ; Logical AND, A ← (A) && (EEPROM_0160) 
          ora RAM1_057                  ; Logical OR Accumulator with Memory at RAM1_057, A <- (A) || (RAM1_057)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          add #$60                      ; Add without Carry, A ← (A) + (#$60)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          jsr L388B                     ; Jump to Subroutine at L388B             
decx 
          bpl L0345                     ; Branch to L0345 if Plus N = 0           
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          bsr L03C4                     ; Branch to Subroutine at L03C4           
          ldx #$12                      ; Load Index Register with Memory Byte, X <- (#$12)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          ldx #$0E                      ; Load Index Register with Memory Byte, X <- (#$0E)
          cmp #$5A                      ; Compare Accumulator with Memory Byte, (A) - (#$5A)
          beq L0382                     ; Branch to L0382 if Equal Z=1            
          clra                          ; Clear byte Accumulator, A <- 0x00       
          add #$FF                      ; Add without Carry, A ← (A) + (#$FF)   
          jsr L3DFF                     ; Jump to Subroutine at L3DFF             
          rts                           ; Return from Subroutine                  
; 
L3B88: 
          brclr 6,RAM1_09f,L03A1        ; Branch to L03A1 if Bit 6 Clear (Mn = 0) 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM1_09f                  ; Load Accumulator with value of Memory at RAM1_09f, A <- (RAM1_09f)
          bmi L039E                     ; Branch to L039E if Minus N = 1          
          and #$3F                      ; Logical AND, A ← (A) && (#$3F)        
          cmp #$21                      ; Compare Accumulator with Memory Byte, (A) - (#$21)
          beq L039E                     ; Branch to L039E if Equal Z=1            
          bcs L039C                     ; Branch to L039C if C = 1                
          cmp #$25                      ; Compare Accumulator with Memory Byte, (A) - (#$25)
          bcs L039E                     ; Branch to L039E if C = 1                
          ldx #$BC                      ; Load Index Register with Memory Byte, X <- (#$BC)
          stx RAM2_02d6                 ; Store Index Register In Memory at RAM2_02d6
          rts                           ; Return from Subroutine                  
; 
L3BA2: 
          lda RAM2_02d6                 ; Load Accumulator with value of Memory at RAM2_02d6, A <- (RAM2_02d6)
          beq L03B3                     ; Branch to L03B3 if Equal Z=1            
deca 
          sta RAM2_02d6                 ; Store Accumulator in Memory at RAM2_02d6
          bne L03B3                     ; Branch to L03B3 if Not Equal (Z = 0);   
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bset 0,RAM1_05b               ; Set Bit 0 at memory RAM1_05b (Mn <- 1 ) 
          bra L03C4                     ; Branch Always (1 = 1)                   
; 
          brclr 4,RAM1_07c,L03A1        ; Branch to L03A1 if Bit 4 Clear (Mn = 0) 
          ldx #$0D                      ; Load Index Register with Memory Byte, X <- (#$0D)
          jsr L3DD2                     ; Jump to Subroutine at L3DD2             
          lda RAM2_02cd                 ; Load Accumulator with value of Memory at RAM2_02cd, A <- (RAM2_02cd)
          bpl L03A1                     ; Branch to L03A1 if Plus N = 0           
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bra L03D3                     ; Branch Always (1 = 1)                   
; 
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          ldx #$0D                      ; Load Index Register with Memory Byte, X <- (#$0D)
          brclr 0,RAM1_05b,L03CB        ; Branch to L03CB if Bit 0 Clear (Mn = 0) 
          jsr L3DE0                     ; Jump to Subroutine at L3DE0             
          brclr 0,RAM1_05b,L03A1        ; Branch to L03A1 if Bit 0 Clear (Mn = 0) 
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          ldx #$CF                      ; Load Index Register with Memory Byte, X <- (#$CF)
          jmp L38A0                     ; Unconditional Jump to L38A0             
; 
L3BD8: 
          brclr 7,RAM1_060,L03FD        ; Branch to L03FD if Bit 7 Clear (Mn = 0) 
          brclr 6,RAM1_05d,L03FD        ; Branch to L03FD if Bit 6 Clear (Mn = 0) 
          ldx #$23                      ; Load Index Register with Memory Byte, X <- (#$23)
          lda X40B0,x                   ; Load Accumulator with value of Memory at X40B0, A <- (X40B0)
decx 
decx 
          cmp RAM1_078                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_078)
          bne L03FA                     ; Branch to L03FA if Not Equal (Z = 0);   
          lda X40B0,x                   ; Load Accumulator with value of Memory at X40B0, A <- (X40B0)
          sta RAM2_02d3                 ; Store Accumulator in Memory at RAM2_02d3
          lda X40B1,x                   ; Load Accumulator with value of Memory at X40B1, A <- (X40B1)
          sta RAM2_02d4                 ; Store Accumulator in Memory at RAM2_02d4
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM2_02d5                 ; Store Accumulator in Memory at RAM2_02d5
decx 
          bne L03E0                     ; Branch to L03E0 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L3BFE: 
          brclr 2,RAM1_091,L0439        ; Branch to L0439 if Bit 2 Clear (Mn = 0) 
          sei                           ; Set Interrupt Mask, I ← 1);           
          brclr 7,PortB,L0427           ; Branch to L0427 if Bit CONTROL Clear (Mn = 0)
          brclr 1,RAM1_090,L0427        ; Branch to L0427 if Bit 1 Clear (Mn = 0) 
          brset 3,PortB,L0427           ; Branch to L0427 if Bit MUTE_WOOFER is set at PortB (Mn=1)
          lda #$24                      ; Load Accumulator with value of Memory at #$24, A <- (#$24)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cmp #$1F                      ; Compare Accumulator with Memory Byte, (A) - (#$1F)
          bls L0416                     ; Branch to L0416 if Lower or Same C v Z = 1
          lda #$1F                      ; Load Accumulator with value of Memory at #$1F, A <- (#$1F)
          sta RAM2_02c7                 ; Store Accumulator in Memory at RAM2_02c7
          lda #$23                      ; Load Accumulator with value of Memory at #$23, A <- (#$23)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cmp #$1F                      ; Compare Accumulator with Memory Byte, (A) - (#$1F)
          bls L0424                     ; Branch to L0424 if Lower or Same C v Z = 1
          lda #$1F                      ; Load Accumulator with value of Memory at #$1F, A <- (#$1F)
          sta RAM2_02c8                 ; Store Accumulator in Memory at RAM2_02c8
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brclr 3,PortB,L048A           ; Branch to L048A if Bit MUTE_WOOFER Clear (Mn = 0)
          brclr 1,RAM1_090,L048A        ; Branch to L048A if Bit 1 Clear (Mn = 0) 
          bclr 1,RAM1_090               ; Clear bit 1 at RAM1_090                 
          lda RAM2_02c7                 ; Load Accumulator with value of Memory at RAM2_02c7, A <- (RAM2_02c7)
          beq L048A                     ; Branch to L048A if Equal Z=1            
          bset 4,RAM1_06b               ; Set Bit 4 at memory RAM1_06b (Mn <- 1 ) 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          lda RAM1_090                  ; Load Accumulator with value of Memory at RAM1_090, A <- (RAM1_090)
          add #$04                      ; Add without Carry, A ← (A) + (#$04)   
          sta RAM1_090                  ; Store Accumulator in Memory at RAM1_090 
          bcs L0484                     ; Branch to L0484 if C = 1                
          bpl L048A                     ; Branch to L048A if Plus N = 0           
          sei                           ; Set Interrupt Mask, I ← 1);           
          brclr 7,PortB,L048A           ; Branch to L048A if Bit CONTROL Clear (Mn = 0)
          lda #$24                      ; Load Accumulator with value of Memory at #$24, A <- (#$24)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brset 5,RAM1_08e,L0456        ; Branch to L0456 if Bit 5 is set at RAM1_08e (Mn=1)
          cmp #$64                      ; Compare Accumulator with Memory Byte, (A) - (#$64)
          bhi L0456                     ; Branch to L0456 if Higher C v Z = 0     
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
          sub RAM2_02c7                 ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM2_02c7)
          bcc L045C                     ; Branch to L045C if C bit is cleared     
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L3FAE                     ; Jump to Subroutine at L3FAE             
          brset 1,RAM1_08f,L0484        ; Branch to L0484 if Bit 1 is set at RAM1_08f (Mn=1)
          brset 0,RAM1_08f,L0484        ; Branch to L0484 if Bit 0 is set at RAM1_08f (Mn=1)
          sei                           ; Set Interrupt Mask, I ← 1);           
          brclr 7,PortB,L048A           ; Branch to L048A if Bit CONTROL Clear (Mn = 0)
          lda #$23                      ; Load Accumulator with value of Memory at #$23, A <- (#$23)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brclr 5,RAM1_08e,L0475        ; Branch to L0475 if Bit 5 Clear (Mn = 0) 
          brclr 7,RAM1_08e,L047B        ; Branch to L047B if Bit 7 Clear (Mn = 0) 
          cmp #$64                      ; Compare Accumulator with Memory Byte, (A) - (#$64)
          bhi L047B                     ; Branch to L047B if Higher C v Z = 0     
          lda #$64                      ; Load Accumulator with value of Memory at #$64, A <- (#$64)
          sub RAM2_02c8                 ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM2_02c8)
          bcc L0481                     ; Branch to L0481 if C bit is cleared     
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L3FAE                     ; Jump to Subroutine at L3FAE             
          bclr 4,RAM1_06b               ; Clear bit 4 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          clr RAM1_090                  ; Clear byte at RAM1_090 <- 0x00          
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brset 4,RAM1_0bc,L04C7        ; Branch to L04C7 if Bit 4 is set at RAM1_0bc (Mn=1)
          brset 2,RAM1_0bc,L04A6        ; Branch to L04A6 if Bit 2 is set at RAM1_0bc (Mn=1)
          brset 3,RAM1_0bf,L04C7        ; Branch to L04C7 if Bit 3 is set at RAM1_0bf (Mn=1)
          brclr 5,RAM1_08f,L04C7        ; Branch to L04C7 if Bit 5 Clear (Mn = 0) 
          bclr 5,RAM1_08f               ; Clear bit 5 at RAM1_08f                 
          bclr 6,RAM1_08f               ; Clear bit 6 at RAM1_08f                 
          bset 2,RAM1_0bc               ; Set Bit 2 at memory RAM1_0bc (Mn <- 1 ) 
          bset 4,RAM1_0bc               ; Set Bit 4 at memory RAM1_0bc (Mn <- 1 ) 
          lda #$60                      ; Load Accumulator with value of Memory at #$60, A <- (#$60)
          sta RAM2_02d1                 ; Store Accumulator in Memory at RAM2_02d1
          bra L04C7                     ; Branch Always (1 = 1)                   
; 
          lda RAM2_02d1                 ; Load Accumulator with value of Memory at RAM2_02d1, A <- (RAM2_02d1)
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          bne L04B3                     ; Branch to L04B3 if Not Equal (Z = 0);   
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM2_02d1                 ; Store Accumulator in Memory at RAM2_02d1
          bra L04C7                     ; Branch Always (1 = 1)                   
; 
          sei                           ; Set Interrupt Mask, I ← 1);           
          brset 7,PortB,L04C7           ; Branch to L04C7 if Bit CONTROL is set at PortB (Mn=1)
          lda #$23                      ; Load Accumulator with value of Memory at #$23, A <- (#$23)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          sta RAM2_02d2                 ; Store Accumulator in Memory at RAM2_02d2
          lda RAM2_02d1                 ; Load Accumulator with value of Memory at RAM2_02d1, A <- (RAM2_02d1)
          ora #$80                      ; Logical OR Accumulator with Memory at #$80, A <- (A) || (#$80)
          sta RAM2_02d1                 ; Store Accumulator in Memory at RAM2_02d1
          cli                           ; Clear Interrupt Mask (I <- 0)           
          brclr 7,RAM1_060,L04E0        ; Branch to L04E0 if Bit 7 Clear (Mn = 0) 
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          lda RAM2_02d5                 ; Load Accumulator with value of Memory at RAM2_02d5, A <- (RAM2_02d5)
          beq L04E0                     ; Branch to L04E0 if Equal Z=1            
deca 
          sta RAM2_02d5                 ; Store Accumulator in Memory at RAM2_02d5
          bne L04E0                     ; Branch to L04E0 if Not Equal (Z = 0);   
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          sta RAM2_02d3                 ; Store Accumulator in Memory at RAM2_02d3
          sta RAM2_02d4                 ; Store Accumulator in Memory at RAM2_02d4
          rts                           ; Return from Subroutine                  
; 
L3CE1: 
          lda RAM2_02d7                 ; Load Accumulator with value of Memory at RAM2_02d7, A <- (RAM2_02d7)
          brclr 4,RAM1_06a,L04EB        ; Branch to L04EB if Bit 4 Clear (Mn = 0) 
          add #$0C                      ; Add without Carry, A ← (A) + (#$0C)   
          bcs L04F2                     ; Branch to L04F2 if C = 1                
          beq L04F2                     ; Branch to L04F2 if Equal Z=1            
          sub #$04                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$04)
          sta RAM2_02d7                 ; Store Accumulator in Memory at RAM2_02d7
          brclr 2,RAM1_091,L04E0        ; Branch to L04E0 if Bit 2 Clear (Mn = 0) 
          brclr 0,RAM1_090,L04E0        ; Branch to L04E0 if Bit 0 Clear (Mn = 0) 
          bclr 0,RAM1_090               ; Clear bit 0 at RAM1_090                 
          brset 3,RAM1_091,L0501        ; Branch to L0501 if Bit 3 is set at RAM1_091 (Mn=1)
          jsr L3FBC                     ; Jump to Subroutine at L3FBC             
          rts                           ; Return from Subroutine                  
; 
          lda #$32                      ; Load Accumulator with value of Memory at #$32, A <- (#$32)
          sta RAM1_090                  ; Store Accumulator in Memory at RAM1_090 
          rts                           ; Return from Subroutine                  
; 
L3D06: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brset 1,RAM1_05f,L0511        ; Branch to L0511 if Bit 1 is set at RAM1_05f (Mn=1)
          lda RAM1_09c                  ; Load Accumulator with value of Memory at RAM1_09c, A <- (RAM1_09c)
          cmp #$F4                      ; Compare Accumulator with Memory Byte, (A) - (#$F4)
          bhi L0514                     ; Branch to L0514 if Higher C v Z = 0     
          clc                           ; Clear Carry Bit (C <- 0)                
          jsr L3DCF                     ; Jump to Subroutine at L3DCF             
          brclr 5,RAM1_060,L051E        ; Branch to L051E if Bit 5 Clear (Mn = 0) 
          bclr 5,RAM1_060               ; Clear bit 5 at RAM1_060                 
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          jsr L3E02                     ; Jump to Subroutine at L3E02             
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          add #$78                      ; Add without Carry, A ← (A) + (#$78)   
          bcs L052C                     ; Branch to L052C if C = 1                
          add #$14                      ; Add without Carry, A ← (A) + (#$14)   
          bcs L0531                     ; Branch to L0531 if C = 1                
          ldx #$01                      ; Load Index Register with Memory Byte, X <- (#$01)
          jsr L3DD2                     ; Jump to Subroutine at L3DD2             
          brclr 2,RAM1_0bc,L0583        ; Branch to L0583 if Bit 2 Clear (Mn = 0) 
          lda RAM2_02d1                 ; Load Accumulator with value of Memory at RAM2_02d1, A <- (RAM2_02d1)
          bpl L0583                     ; Branch to L0583 if Plus N = 0           
          ldx #$03                      ; Load Index Register with Memory Byte, X <- (#$03)
          brset 6,RAM1_08f,L0547        ; Branch to L0547 if Bit 6 is set at RAM1_08f (Mn=1)
          bclr 4,RAM1_08f               ; Clear bit 4 at RAM1_08f                 
          brclr 0,RAM1_091,L0547        ; Branch to L0547 if Bit 0 Clear (Mn = 0) 
          bset 4,RAM1_08f               ; Set Bit 4 at memory RAM1_08f (Mn <- 1 ) 
          bset 6,RAM1_08f               ; Set Bit 6 at memory RAM1_08f (Mn <- 1 ) 
          jsr L3DD2                     ; Jump to Subroutine at L3DD2             
          bclr 3,RAM1_08f               ; Clear bit 3 at RAM1_08f                 
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          lda RAM2_02d2                 ; Load Accumulator with value of Memory at RAM2_02d2, A <- (RAM2_02d2)
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          add #$66                      ; Add without Carry, A ← (A) + (#$66)   
          bcc L0558                     ; Branch to L0558 if C bit is cleared     
          bset 3,RAM1_08f               ; Set Bit 3 at memory RAM1_08f (Mn <- 1 ) 
          bsr L05D2                     ; Branch to Subroutine at L05D2           
          lda RAM2_02c3                 ; Load Accumulator with value of Memory at RAM2_02c3, A <- (RAM2_02c3)
          bmi L057F                     ; Branch to L057F if Minus N = 1          
          lda RAM2_02c2                 ; Load Accumulator with value of Memory at RAM2_02c2, A <- (RAM2_02c2)
          bpl L0567                     ; Branch to L0567 if Plus N = 0           
          brclr 2,RAM1_08f,L057F        ; Branch to L057F if Bit 2 Clear (Mn = 0) 
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          bne L056C                     ; Branch to L056C if Not Equal (Z = 0);   
          bset 2,RAM1_08f               ; Set Bit 2 at memory RAM1_08f (Mn <- 1 ) 
          brclr 6,RAM1_08f,L0583        ; Branch to L0583 if Bit 6 Clear (Mn = 0) 
          lda RAM2_02d1                 ; Load Accumulator with value of Memory at RAM2_02d1, A <- (RAM2_02d1)
          bit #$70                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$70)
          beq L057D                     ; Branch to L057D if Equal Z=1            
          sub #$10                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$10)
          sta RAM2_02d1                 ; Store Accumulator in Memory at RAM2_02d1
          bra L0583                     ; Branch Always (1 = 1)                   
; 
          bset 5,RAM1_08f               ; Set Bit 5 at memory RAM1_08f (Mn <- 1 ) 
          bclr 2,RAM1_0bc               ; Clear bit 2 at RAM1_0bc                 
          bset 4,RAM1_0bc               ; Set Bit 4 at memory RAM1_0bc (Mn <- 1 ) 
          ldx #$04                      ; Load Index Register with Memory Byte, X <- (#$04)
          brclr 1,PortB,L0594           ; Branch to L0594 if Bit ENA_12V_WOOFER Clear (Mn = 0)
          brset 5,RAM1_091,L058B        ; Branch to L058B if Bit 5 is set at RAM1_091 (Mn=1)
          bsr L05D2                     ; Branch to Subroutine at L05D2           
          lda RAM2_02c4                 ; Load Accumulator with value of Memory at RAM2_02c4, A <- (RAM2_02c4)
          bpl L0594                     ; Branch to L0594 if Plus N = 0           
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          ldx #$05                      ; Load Index Register with Memory Byte, X <- (#$05)
          brset 3,RAM1_091,L0599        ; Branch to L0599 if Bit 3 is set at RAM1_091 (Mn=1)
          bsr L05CF                     ; Branch to Subroutine at L05CF           
          ldx #$09                      ; Load Index Register with Memory Byte, X <- (#$09)
          brclr 0,PortB,L05AC           ; Branch to L05AC if Bit ENA_12V_ANTENE Clear (Mn = 0)
          brset 4,RAM1_091,L05A3        ; Branch to L05A3 if Bit 4 is set at RAM1_091 (Mn=1)
          bsr L05D2                     ; Branch to Subroutine at L05D2           
          lda RAM2_02c9                 ; Load Accumulator with value of Memory at RAM2_02c9, A <- (RAM2_02c9)
          bpl L05AC                     ; Branch to L05AC if Plus N = 0           
          bclr 0,PortB                  ; Clear bit ENA_12V_ANTENE at PortB       
          brclr 2,RAM1_08e,L05C3        ; Branch to L05C3 if Bit 2 Clear (Mn = 0) 
          brset 4,RAM1_06a,L05BB        ; Branch to L05BB if Bit 4 is set at RAM1_06a (Mn=1)
          brclr 1,RAM1_05f,L05C3        ; Branch to L05C3 if Bit 1 Clear (Mn = 0) 
          lda RAM1_09c                  ; Load Accumulator with value of Memory at RAM1_09c, A <- (RAM1_09c)
          cmp #$F4                      ; Compare Accumulator with Memory Byte, (A) - (#$F4)
          bhi L05C3                     ; Branch to L05C3 if Higher C v Z = 0     
          ldx #$0A                      ; Load Index Register with Memory Byte, X <- (#$0A)
          brclr 4,RAM1_06a,L05C0        ; Branch to L05C0 if Bit 4 Clear (Mn = 0) 
          jsr L3DCF                     ; Jump to Subroutine at L3DCF             
          brclr 1,RAM1_08e,L05CE        ; Branch to L05CE if Bit 1 Clear (Mn = 0) 
          ldx #$0B                      ; Load Index Register with Memory Byte, X <- (#$0B)
          brclr 6,RAM1_06a,L05CB        ; Branch to L05CB if Bit 6 Clear (Mn = 0) 
          jsr L3DCF                     ; Jump to Subroutine at L3DCF             
          rts                           ; Return from Subroutine                  
; 
L3DCF: 
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
L3DD2: 
          lda RAM2_02c0,x               ; Load Accumulator with value of Memory at RAM2_02c0, A <- (RAM2_02c0)
          bcs L05F5                     ; Branch to L05F5 if C = 1                
          sub #$02                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$02)
          bcc L05F9                     ; Branch to L05F9 if C bit is cleared     
          bra L05E5                     ; Branch Always (1 = 1)                   
; 
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
L3DE0: 
          lda RAM2_02c0,x               ; Load Accumulator with value of Memory at RAM2_02c0, A <- (RAM2_02c0)
          bcs L0602                     ; Branch to L0602 if C = 1                
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          bcs L0617                     ; Branch to L0617 if C = 1                
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          sta RAM2_02c0,x               ; Store Accumulator in Memory at RAM2_02c0
          lda EEPROM_01c0,x             ; Load Accumulator with value of Memory at EEPROM_01c0, A <- (EEPROM_01c0)
          beq L0617                     ; Branch to L0617 if Equal Z=1            
deca 
          bra L0604                     ; Branch Always (1 = 1)                   
; 
          bmi L0617                     ; Branch to L0617 if Minus N = 1          
          add #$02                      ; Add without Carry, A ← (A) + (#$02)   
          sta RAM2_02c0,x               ; Store Accumulator in Memory at RAM2_02c0
          bmi L0602                     ; Branch to L0602 if Minus N = 1          
          rts                           ; Return from Subroutine                  
; 
L3DFF: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bcs L0604                     ; Branch to L0604 if C = 1                
L3E02: 
          lda #$33                      ; Load Accumulator with value of Memory at #$33, A <- (#$33)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          add #$C0                      ; Add without Carry, A ← (A) + (#$C0)   
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          brset 0,RAM1_08e,L0614        ; Branch to L0614 if Bit 0 is set at RAM1_08e (Mn=1)
cpx #$C2 
          bne L0614                     ; Branch to L0614 if Not Equal (Z = 0);   
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          rts                           ; Return from Subroutine                  
; 
L3E18: 
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
          bne L0630                     ; Branch to L0630 if Not Equal (Z = 0);   
          lda RAM2_02b4                 ; Load Accumulator with value of Memory at RAM2_02b4, A <- (RAM2_02b4)
          cmp #$53                      ; Compare Accumulator with Memory Byte, (A) - (#$53)
          bne L0629                     ; Branch to L0629 if Not Equal (Z = 0);   
          bset 0,RAM1_090               ; Set Bit 0 at memory RAM1_090 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
          jsr L2591                     ; Jump to Subroutine at L2591             
          bclr 7,RAM1_05d               ; Clear bit 7 at RAM1_05d                 
          rts                           ; Return from Subroutine                  
; 
L3E31: 
          ldx X3E37,x                   ; Load Index Register with Memory Byte, X <- (X3E37)
          jmp L3E3F,x ;INFO: index jump ; Unconditional Jump to L3E3F             
; 
X3E37: 
          brset 0,PortA,L065A           ; Branch to L065A if Bit PANEL_STATUS is set at PortA (Mn=1)
; 
          db $32                        ; data? 2,  ,  ,                          
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          tst RAM1_072,x                ; Test Memory Byte for Negative or Zero, (RAM1_072) – 0x00
; 
          db $84                        ; data?  ,  ,  ,                          
; 
L3E3F: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brset 7,RAM1_091,L0645        ; Branch to L0645 if Bit 7 is set at RAM1_091 (Mn=1)
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          sta RAM2_02b5                 ; Store Accumulator in Memory at RAM2_02b5
          lda #$27                      ; Load Accumulator with value of Memory at #$27, A <- (#$27)
          jsr L25B7                     ; Jump to Subroutine at L25B7             
          sta RAM2_02b8                 ; Store Accumulator in Memory at RAM2_02b8
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 2,RAM1_05f,L0657        ; Branch to L0657 if Bit 2 Clear (Mn = 0) 
          lda RAM2_02a4                 ; Load Accumulator with value of Memory at RAM2_02a4, A <- (RAM2_02a4)
          sta RAM2_02bb                 ; Store Accumulator in Memory at RAM2_02bb
          brset 1,RAM1_05f,L06A3        ; Branch to L06A3 if Bit 1 is set at RAM1_05f (Mn=1)
          bra L06A3                     ; Branch Always (1 = 1)                   
; 
          bset 0,RAM1_090               ; Set Bit 0 at memory RAM1_090 (Mn <- 1 ) 
          lda #$F3                      ; Load Accumulator with value of Memory at #$F3, A <- (#$F3)
          brset 0,RAM1_08f,L066D        ; Branch to L066D if Bit 0 is set at RAM1_08f (Mn=1)
          lda #$F2                      ; Load Accumulator with value of Memory at #$F2, A <- (#$F2)
          brset 1,RAM1_08f,L066D        ; Branch to L066D if Bit 1 is set at RAM1_08f (Mn=1)
          lda #$C2                      ; Load Accumulator with value of Memory at #$C2, A <- (#$C2)
          sta RAM2_02b8                 ; Store Accumulator in Memory at RAM2_02b8
          rts                           ; Return from Subroutine                  
; 
          bset 5,RAM1_08f               ; Set Bit 5 at memory RAM1_08f (Mn <- 1 ) 
          brclr 0,RAM1_08e,L067B        ; Branch to L067B if Bit 0 Clear (Mn = 0) 
          lda #$12                      ; Load Accumulator with value of Memory at #$12, A <- (#$12)
          sta RAM2_02b5                 ; Store Accumulator in Memory at RAM2_02b5
          lda #$F2                      ; Load Accumulator with value of Memory at #$F2, A <- (#$F2)
          brset 4,RAM1_08f,L068A        ; Branch to L068A if Bit 4 is set at RAM1_08f (Mn=1)
          lda #$C2                      ; Load Accumulator with value of Memory at #$C2, A <- (#$C2)
          brclr 3,RAM1_08f,L068A        ; Branch to L068A if Bit 3 Clear (Mn = 0) 
          brclr 0,RAM1_08e,L068A        ; Branch to L068A if Bit 0 Clear (Mn = 0) 
          lda #$F3                      ; Load Accumulator with value of Memory at #$F3, A <- (#$F3)
          sta RAM2_02bb                 ; Store Accumulator in Memory at RAM2_02bb
          rts                           ; Return from Subroutine                  
; 
          lda RAM2_02c4                 ; Load Accumulator with value of Memory at RAM2_02c4, A <- (RAM2_02c4)
          and #$61                      ; Logical AND, A ← (A) && (#$61)        
          sta RAM2_02c4                 ; Store Accumulator in Memory at RAM2_02c4
          clra                          ; Clear byte Accumulator, A <- 0x00       
          bset 1,PortB                  ; Set Bit ENA_12V_WOOFER at memory PortB (Mn <- 1 )
          brclr 5,RAM1_091,L069D        ; Branch to L069D if Bit 5 Clear (Mn = 0) 
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM2_02b5                 ; Store Accumulator in Memory at RAM2_02b5
          brset 3,RAM1_05f,L06A3        ; Branch to L06A3 if Bit 3 is set at RAM1_05f (Mn=1)
          lda #$87                      ; Load Accumulator with value of Memory at #$87, A <- (#$87)
          bcs L06A8                     ; Branch to L06A8 if C = 1                
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM2_02be                 ; Store Accumulator in Memory at RAM2_02be
          rts                           ; Return from Subroutine                  
; 
          brset 6,RAM1_06a,L06BA        ; Branch to L06BA if Bit 6 is set at RAM1_06a (Mn=1)
          bra L06BA                     ; Branch Always (1 = 1)                   
; 
          bset 5,STACK_0d5              ; Set Bit 5 at memory STACK_0d5 (Mn <- 1 )
          jsr L25A6                     ; Jump to Subroutine at L25A6             
          lda RAM2_02d7                 ; Load Accumulator with value of Memory at RAM2_02d7, A <- (RAM2_02d7)
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          lda #$C2                      ; Load Accumulator with value of Memory at #$C2, A <- (#$C2)
          bcs L06BF                     ; Branch to L06BF if C = 1                
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM2_02b8                 ; Store Accumulator in Memory at RAM2_02b8
          rts                           ; Return from Subroutine                  
; 
          lda RAM2_02d3                 ; Load Accumulator with value of Memory at RAM2_02d3, A <- (RAM2_02d3)
          sta RAM2_02b4                 ; Store Accumulator in Memory at RAM2_02b4
          lda RAM2_02d4                 ; Load Accumulator with value of Memory at RAM2_02d4, A <- (RAM2_02d4)
          sta RAM2_02b5                 ; Store Accumulator in Memory at RAM2_02b5
          rts                           ; Return from Subroutine                  
; 
L3ED0: 
          clr RAM1_05b                  ; Clear byte at RAM1_05b <- 0x00          
          brclr 3,RAM1_08e,L06D7        ; Branch to L06D7 if Bit 3 Clear (Mn = 0) 
          inc RAM1_05b                  ; Increment Byte RAM1_05b, Byte = Byte + 1
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          ldx #$80                      ; Load Index Register with Memory Byte, X <- (#$80)
          jsr L388B                     ; Jump to Subroutine at L388B             
          lda RAM2_02b4                 ; Load Accumulator with value of Memory at RAM2_02b4, A <- (RAM2_02b4)
          ldx #$81                      ; Load Index Register with Memory Byte, X <- (#$81)
          jsr L388B                     ; Jump to Subroutine at L388B             
X3EE7: 
          lda RAM2_02b5                 ; Load Accumulator with value of Memory at RAM2_02b5, A <- (RAM2_02b5)
          ldx #$82                      ; Load Index Register with Memory Byte, X <- (#$82)
          jsr L388B                     ; Jump to Subroutine at L388B             
          lda RAM2_02b6                 ; Load Accumulator with value of Memory at RAM2_02b6, A <- (RAM2_02b6)
          ldx #$83                      ; Load Index Register with Memory Byte, X <- (#$83)
          jsr L388B                     ; Jump to Subroutine at L388B             
          lda #$5A                      ; Load Accumulator with value of Memory at #$5A, A <- (#$5A)
          ldx #$72                      ; Load Index Register with Memory Byte, X <- (#$72)
          jsr L388B                     ; Jump to Subroutine at L388B             
          jsr L400D                     ; Jump to Subroutine at L400D             
          brclr 3,RAM1_08e,L0732        ; Branch to L0732 if Bit 3 Clear (Mn = 0) 
          tst RAM1_05b                  ; Test Memory Byte for Negative or Zero, (RAM1_05b) – 0x00
          bne L0732                     ; Branch to L0732 if Not Equal (Z = 0);   
          ldx #$12                      ; Load Index Register with Memory Byte, X <- (#$12)
          jsr L3FD1                     ; Jump to Subroutine at L3FD1             
          ldx #$00                      ; Load Index Register with Memory Byte, X <- (#$00)
          jsr L3FDF                     ; Jump to Subroutine at L3FDF             
          lda #$0D                      ; Load Accumulator with value of Memory at #$0D, A <- (#$0D)
          jsr L3FE7                     ; Jump to Subroutine at L3FE7             
          lda RAM2_027c                 ; Load Accumulator with value of Memory at RAM2_027c, A <- (RAM2_027c)
deca 
          bpl L0714                     ; Branch to L0714 if Plus N = 0           
          ldx #$30                      ; Load Index Register with Memory Byte, X <- (#$30)
          jsr L3FD1                     ; Jump to Subroutine at L3FD1             
          ldx #$02                      ; Load Index Register with Memory Byte, X <- (#$02)
          jsr L3FDF                     ; Jump to Subroutine at L3FDF             
          lda #$1B                      ; Load Accumulator with value of Memory at #$1B, A <- (#$1B)
          jsr L3FE7                     ; Jump to Subroutine at L3FE7             
          lda RAM2_027c                 ; Load Accumulator with value of Memory at RAM2_027c, A <- (RAM2_027c)
deca 
          bpl L0729                     ; Branch to L0729 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
          lda #$81                      ; Load Accumulator with value of Memory at #$81, A <- (#$81)
          sta STACK_0d0                 ; Store Accumulator in Memory at STACK_0d0
          lda #$41                      ; Load Accumulator with value of Memory at #$41, A <- (#$41)
          sta STACK_0ce                 ; Store Accumulator in Memory at STACK_0ce
          bset 0,RAM1_080               ; Set Bit 0 at memory RAM1_080 (Mn <- 1 ) 
          bset 7,RAM1_094               ; Set Bit 7 at memory RAM1_094 (Mn <- 1 ) 
          bclr 7,RAM1_060               ; Clear bit 7 at RAM1_060                 
          bclr 6,RAM1_060               ; Clear bit 6 at RAM1_060                 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L3F46: 
          ldx #$CF                      ; Load Index Register with Memory Byte, X <- (#$CF)
          clra                          ; Clear byte Accumulator, A <- 0x00       
cpx #$BE 
          bhi L0750                     ; Branch to L0750 if Higher C v Z = 0     
          lda X3EEE,x                   ; Load Accumulator with value of Memory at X3EEE, A <- (X3EEE)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          jsr L0785                     ; Jump to Subroutine at L0785             
decx 
cpx #$A0 
          bcc L0748                     ; Branch to L0748 if C bit is cleared     
          ldx #$80                      ; Load Index Register with Memory Byte, X <- (#$80)
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          jsr L388B                     ; Jump to Subroutine at L388B             
          ldx #$81                      ; Load Index Register with Memory Byte, X <- (#$81)
          lda #$22                      ; Load Accumulator with value of Memory at #$22, A <- (#$22)
          jsr L388B                     ; Jump to Subroutine at L388B             
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          ldx #$72                      ; Load Index Register with Memory Byte, X <- (#$72)
          jsr L388B                     ; Jump to Subroutine at L388B             
          lda #$46                      ; Load Accumulator with value of Memory at #$46, A <- (#$46)
          jsr L24DC                     ; Jump to Subroutine at L24DC             
          jsr L1F1C                     ; Jump to Subroutine at L1F1C             
          jsr L39F4                     ; Jump to Subroutine at L39F4             
          jsr L0785                     ; Jump to Subroutine at L0785             
          bra L077B                     ; Branch Always (1 = 1)                   
; 
L3F80: 
          ldx #$63                      ; Load Index Register with Memory Byte, X <- (#$63)
          lda #$A0                      ; Load Accumulator with value of Memory at #$A0, A <- (#$A0)
          jsr L388B                     ; Jump to Subroutine at L388B             
          jsr L2542                     ; Jump to Subroutine at L2542             
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          bra L0772                     ; Branch Always (1 = 1)                   
; 
          brset 0,PortA,L0791           ; Branch to L0791 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0794           ; Branch to L0794 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortC,L079F           ; Branch to L079F if Bit ENA_8V is set at PortC (Mn=1)
          brclr 1,PortD,L079D           ; Branch to L079D if Bit DIAG Clear (Mn = 0)
          brset 0,PortA,L07A0           ; Branch to L07A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortC,L07A0           ; Branch to L07A0 if Bit ENA_8V is set at PortC (Mn=1)
          brset 0,SCSR,L07B3            ; Branch to L07B3 if Bit 0 is set at SCSR (Mn=1)
          bset 0,SCSR                   ; Set Bit 0 at memory SCSR (Mn <- 1 )     
          bset 0,SCSR                   ; Set Bit 0 at memory SCSR (Mn <- 1 )     
          brset 0,PortA,L07AA           ; Branch to L07AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AD           ; Branch to L07AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,TSR,L073F             ; Branch to L073F if Bit 0 is set at TSR (Mn=1)
          cmp #$A9                      ; Compare Accumulator with Memory Byte, (A) - (#$A9)
          bhi L07BC                     ; Branch to L07BC if Higher C v Z = 0     
          cmp #$0B                      ; Compare Accumulator with Memory Byte, (A) - (#$0B)
          bhi L07BE                     ; Branch to L07BE if Higher C v Z = 0     
          bset 0,RAM1_08f               ; Set Bit 0 at memory RAM1_08f (Mn <- 1 ) 
          bra L07C0                     ; Branch Always (1 = 1)                   
; 
L3FBC: 
          bset 1,RAM1_08f               ; Set Bit 1 at memory RAM1_08f (Mn <- 1 ) 
          bclr 0,RAM1_08f               ; Clear bit 0 at RAM1_08f                 
          ldx #$05                      ; Load Index Register with Memory Byte, X <- (#$05)
          brclr 1,RAM1_08f,L07C5        ; Branch to L07C5 if Bit 1 Clear (Mn = 0) 
          jsr L3DE0                     ; Jump to Subroutine at L3DE0             
          ldx #$06                      ; Load Index Register with Memory Byte, X <- (#$06)
          brclr 0,RAM1_08f,L07CD        ; Branch to L07CD if Bit 0 Clear (Mn = 0) 
          jsr L3DE0                     ; Jump to Subroutine at L3DE0             
          rts                           ; Return from Subroutine                  
; 
L3FD1: 
          lda #$89                      ; Load Accumulator with value of Memory at #$89, A <- (#$89)
          sta RAM2_027d                 ; Store Accumulator in Memory at RAM2_027d
          lda #$8A                      ; Load Accumulator with value of Memory at #$8A, A <- (#$8A)
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$0A                      ; Load Accumulator with value of Memory at #$0A, A <- (#$0A)
          bra L07EE                     ; Branch Always (1 = 1)                   
; 
L3FDF: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$11                      ; Load Accumulator with value of Memory at #$11, A <- (#$11)
          bra L07EE                     ; Branch Always (1 = 1)                   
; 
L3FE7: 
          sta RAM2_027c                 ; Store Accumulator in Memory at RAM2_027c
          lda #$19                      ; Load Accumulator with value of Memory at #$19, A <- (#$19)
          ldx #$89                      ; Load Index Register with Memory Byte, X <- (#$89)
          sta RAM2_027a                 ; Store Accumulator in Memory at RAM2_027a
          stx RAM2_027b                 ; Store Index Register In Memory at RAM2_027b
          bset 7,STACK_0d6              ; Set Bit 7 at memory STACK_0d6 (Mn <- 1 )
          clr STACK_0d9                 ; Clear byte at STACK_0d9 <- 0x00         
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L4955                     ; Jump to Subroutine at L4955             
          brclr 3,RAM1_067,L07F8        ; Branch to L07F8 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_067               ; Clear bit 3 at RAM1_067                 
          jsr L37B0                     ; Jump to Subroutine at L37B0             
          jsr L490B                     ; Jump to Subroutine at L490B             
          brset 7,STACK_0d6,L07F8       ; Branch to L07F8 if Bit 7 is set at STACK_0d6 (Mn=1)
          rts                           ; Return from Subroutine                  
; 
L400D: 
          ldx EEPROM_0120               ; Load Index Register with Memory Byte, X <- (EEPROM_0120)
          lda EEPROM_0121               ; Load Accumulator with value of Memory at EEPROM_0121, A <- (EEPROM_0121)
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bsr L004C                     ; Branch to Subroutine at L004C           
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          sta RAM1_08e                  ; Store Accumulator in Memory at RAM1_08e 
          brclr 0,RAM1_056,L0022        ; Branch to L0022 if Bit 0 Clear (Mn = 0) 
          bset 3,RAM1_08e               ; Set Bit 3 at memory RAM1_08e (Mn <- 1 ) 
          brclr 4,RAM1_058,L0027        ; Branch to L0027 if Bit 4 Clear (Mn = 0) 
          bset 4,RAM1_08e               ; Set Bit 4 at memory RAM1_08e (Mn <- 1 ) 
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          beq L003B                     ; Branch to L003B if Equal Z=1            
          bset 5,RAM1_08e               ; Set Bit 5 at memory RAM1_08e (Mn <- 1 ) 
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          bne L0035                     ; Branch to L0035 if Not Equal (Z = 0);   
          bset 6,RAM1_08e               ; Set Bit 6 at memory RAM1_08e (Mn <- 1 ) 
          cmp #$01                      ; Compare Accumulator with Memory Byte, (A) - (#$01)
          bne L003B                     ; Branch to L003B if Not Equal (Z = 0);   
          bset 7,RAM1_08e               ; Set Bit 7 at memory RAM1_08e (Mn <- 1 ) 
          brclr 5,RAM1_069,L0044        ; Branch to L0044 if Bit 5 Clear (Mn = 0) 
          bclr 4,RAM1_08e               ; Clear bit 4 at RAM1_08e                 
          bclr 3,RAM1_08e               ; Clear bit 3 at RAM1_08e                 
          bclr 1,RAM1_08e               ; Clear bit 1 at RAM1_08e                 
          bclr 1,RAM1_081               ; Clear bit 1 at RAM1_081                 
          brclr 4,RAM1_08e,L004B        ; Branch to L004B if Bit 4 Clear (Mn = 0) 
          bset 1,RAM1_081               ; Set Bit 1 at memory RAM1_081 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L404C: 
          stx RAM1_050                  ; Store Index Register In Memory at RAM1_050
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          cmp #$09                      ; Compare Accumulator with Memory Byte, (A) - (#$09)
          bls L0058                     ; Branch to L0058 if Lower or Same C v Z = 1
          add #$06                      ; Add without Carry, A ← (A) + (#$06)   
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          clr RAM1_057                  ; Clear byte at RAM1_057 <- 0x00          
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM1_051                  ; Load Accumulator with value of Memory at RAM1_051, A <- (RAM1_051)
          bsr L006E                     ; Branch to Subroutine at L006E           
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          bsr L006B                     ; Branch to Subroutine at L006B           
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          bra L006E                     ; Branch Always (1 = 1)                   
; 
          jsr L261E                     ; Jump to Subroutine at L261E             
          jsr L2617                     ; Jump to Subroutine at L2617             
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          beq L00A7                     ; Branch to L00A7 if Equal Z=1            
          bset 7,RAM1_059               ; Set Bit 7 at memory RAM1_059 (Mn <- 1 ) 
          lda X40AB,x                   ; Load Accumulator with value of Memory at X40AB, A <- (X40AB)
          add RAM1_058                  ; Add without Carry, A ← (A) + (RAM1_058)
          bcs L0082                     ; Branch to L0082 if C = 1                
          bclr 7,RAM1_059               ; Clear bit 7 at RAM1_059                 
          sub #$60                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$60)
          bhcs L0086                    ; Branch to L0086 if Half-Carry Bit is Set, H=1
          sub #$06                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$06)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          rol RAM1_059                  ; Rotate Byte at RAM1_059 Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bset 7,RAM1_059               ; Set Bit 7 at memory RAM1_059 (Mn <- 1 ) 
          lda X40AA,x                   ; Load Accumulator with value of Memory at X40AA, A <- (X40AA)
          adc RAM1_057                  ; ADD with CARRY, A ← (A) + (RAM1_057) + (C) 
          bcs L0097                     ; Branch to L0097 if C = 1                
          bclr 7,RAM1_059               ; Clear bit 7 at RAM1_059                 
          sub #$60                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$60)
          bhcs L009B                    ; Branch to L009B if Half-Carry Bit is Set, H=1
          sub #$06                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$06)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          rol RAM1_059                  ; Rotate Byte at RAM1_059 Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bcc L00A3                     ; Branch to L00A3 if C bit is cleared     
          inc RAM1_056                  ; Increment Byte RAM1_056, Byte = Byte + 1
          dec RAM1_052                  ; Decrement Byte at RAM1_052 Byte = Byte - 1
          bne L0075                     ; Branch to L0075 if Not Equal (Z = 0);   
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          rts                           ; Return from Subroutine                  
; 
X40AA: 
          ror RAM1_07c,x                ; Rotate Byte at RAM1_07c Right through Carry Bit, C -> [b7 >>>> b0] -> C
          asl RAM1_0bc,x                ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          lda #$FC                      ; Load Accumulator with value of Memory at #$FC, A <- (#$FC)
X40B0: 
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
          add ,x                        ; Add without Carry, A ← (A) + ()       
          neg X0031                     ; Negate Byte of X0031 (Two’s Complement), X0031 = 0x00 - (X0031)
          ora ,x                        ; Logical OR Accumulator with Memory at , A <- (A) || ()
          neg X0032                     ; Negate Byte of X0032 (Two’s Complement), X0032 = 0x00 - (X0032)
          stx ,x                        ; Store Index Register In Memory at       
          neg X0033                     ; Negate Byte of X0033 (Two’s Complement), X0033 = 0x00 - (X0033)
          and ,x                        ; Logical AND, A ← (A) && ()            
          neg X0034                     ; Negate Byte of X0034 (Two’s Complement), X0034 = 0x00 - (X0034)
          brset 4,X0030,L00F6           ; Branch to L00F6 if Bit 4 is set at X0030 (Mn=1)
          ldx X0030,x                   ; Load Index Register with Memory Byte, X <- (X0030)
          ror STACK_0ef                 ; Rotate Byte at STACK_0ef Right through Carry Bit, C -> [b7 >>>> b0] -> C
          neg X0037                     ; Negate Byte of X0037 (Two’s Complement), X0037 = 0x00 - (X0037)
          sub ,x                        ; Subtract Memory Byte from Accumulator , A ← (A) – ()
          neg X0038                     ; Negate Byte of X0038 (Two’s Complement), X0038 = 0x00 - (X0038)
          cmp ,x                        ; Compare Accumulator with Memory Byte, (A) - ()
          neg X0039                     ; Negate Byte of X0039 (Two’s Complement), X0039 = 0x00 - (X0039)
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          neg STACK_0fd                 ; Negate Byte of STACK_0fd (Two’s Complement), STACK_0fd = 0x00 - (STACK_0fd)
; 
          db $31, $31                   ; data? 1, 1,  ,                          
; 
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          lda #$1F                      ; Load Accumulator with value of Memory at #$1F, A <- (#$1F)
          sta RAM1_090                  ; Store Accumulator in Memory at RAM1_090 
          bclr 4,RAM1_06b               ; Clear bit 4 at RAM1_06b                 
          bset 6,RAM1_095               ; Set Bit 6 at memory RAM1_095 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L40DD: 
          brclr 7,RAM1_060,L00F8        ; Branch to L00F8 if Bit 7 Clear (Mn = 0) 
          brset 7,RAM1_092,L00F8        ; Branch to L00F8 if Bit 7 is set at RAM1_092 (Mn=1)
L40E3: 
          bclr 7,RAM1_060               ; Clear bit 7 at RAM1_060                 
          bclr 7,RAM1_093               ; Clear bit 7 at RAM1_093                 
          bset 2,RAM1_05d               ; Set Bit 2 at memory RAM1_05d (Mn <- 1 ) 
          brclr 6,RAM1_060,L00F3        ; Branch to L00F3 if Bit 6 Clear (Mn = 0) 
          bclr 6,RAM1_060               ; Clear bit 6 at RAM1_060                 
          brset 0,RAM1_05f,L00F3        ; Branch to L00F3 if Bit 0 is set at RAM1_05f (Mn=1)
          bclr 0,RAM1_061               ; Clear bit 0 at RAM1_061                 
          bclr 3,PortB                  ; Clear bit MUTE_WOOFER at PortB          
          bclr 1,PortB                  ; Clear bit ENA_12V_WOOFER at PortB       
          rts                           ; Return from Subroutine                  
; 
          brset 3,RAM1_060,L0166        ; Branch to L0166 if Bit 3 is set at RAM1_060 (Mn=1)
          brset 0,RAM1_060,L0159        ; Branch to L0159 if Bit 0 is set at RAM1_060 (Mn=1)
          brset 4,RAM1_060,L0107        ; Branch to L0107 if Bit 4 is set at RAM1_060 (Mn=1)
          brclr 7,RAM1_093,L010A        ; Branch to L010A if Bit 7 Clear (Mn = 0) 
          jmp L418E                     ; Unconditional Jump to L418E             
          jmp L41A1                     ; Unconditional Jump to L41A1             
; 
          jsr L43F6                     ; Jump to Subroutine at L43F6             
          beq L0167                     ; Branch to L0167 if Equal Z=1            
          jsr L43F6                     ; Jump to Subroutine at L43F6             
          beq L0167                     ; Branch to L0167 if Equal Z=1            
          eor RAM1_093                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_093)
          sta RAM1_093                  ; Store Accumulator in Memory at RAM1_093 
          brclr 3,RAM1_093,L0123        ; Branch to L0123 if Bit 3 Clear (Mn = 0) 
          brclr 4,RAM1_093,L015F        ; Branch to L015F if Bit 4 Clear (Mn = 0) 
          brclr 5,RAM1_093,L0159        ; Branch to L0159 if Bit 5 Clear (Mn = 0) 
          bra L015F                     ; Branch Always (1 = 1)                   
; 
          brset 5,RAM1_093,L0126        ; Branch to L0126 if Bit 5 is set at RAM1_093 (Mn=1)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          eor RAM1_093                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_093)
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          bcc L0148                     ; Branch to L0148 if C bit is cleared     
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM2_02b1                 ; Load Accumulator with value of Memory at RAM2_02b1, A <- (RAM2_02b1)
          sub RAM1_068                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_068)
          cmp #$11                      ; Compare Accumulator with Memory Byte, (A) - (#$11)
          bcs L0148                     ; Branch to L0148 if C = 1                
          cmp #$17                      ; Compare Accumulator with Memory Byte, (A) - (#$17)
          bcs L014E                     ; Branch to L014E if C = 1                
          cmp #$22                      ; Compare Accumulator with Memory Byte, (A) - (#$22)
          bcs L0148                     ; Branch to L0148 if C = 1                
          cmp #$2B                      ; Compare Accumulator with Memory Byte, (A) - (#$2B)
          bhi L0148                     ; Branch to L0148 if Higher C v Z = 0     
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          beq L0155                     ; Branch to L0155 if Equal Z=1            
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          sta RAM1_093                  ; Store Accumulator in Memory at RAM1_093 
          bra L015F                     ; Branch Always (1 = 1)                   
; 
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          beq L0148                     ; Branch to L0148 if Equal Z=1            
cpx #$04 
          bhi L0148                     ; Branch to L0148 if Higher C v Z = 0     
          inc RAM1_093                  ; Increment Byte RAM1_093, Byte = Byte + 1
          bra L015F                     ; Branch Always (1 = 1)                   
; 
          bclr 0,RAM1_060               ; Clear bit 0 at RAM1_060                 
          bclr 4,RAM1_060               ; Clear bit 4 at RAM1_060                 
          clr RAM1_093                  ; Clear byte at RAM1_093 <- 0x00          
          lda RAM1_068                  ; Load Accumulator with value of Memory at RAM1_068, A <- (RAM1_068)
          sta RAM2_02b1                 ; Store Accumulator in Memory at RAM2_02b1
          clr RAM1_092                  ; Clear byte at RAM1_092 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
          lda RAM2_02b1                 ; Load Accumulator with value of Memory at RAM2_02b1, A <- (RAM2_02b1)
          sub RAM1_068                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_068)
          cmp #$C8                      ; Compare Accumulator with Memory Byte, (A) - (#$C8)
          bcs L0173                     ; Branch to L0173 if C = 1                
          bset 3,RAM1_060               ; Set Bit 3 at memory RAM1_060 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          brclr 5,RAM1_093,L0166        ; Branch to L0166 if Bit 5 Clear (Mn = 0) 
          brset 4,RAM1_093,L0166        ; Branch to L0166 if Bit 4 is set at RAM1_093 (Mn=1)
          cmp #$3C                      ; Compare Accumulator with Memory Byte, (A) - (#$3C)
          bcs L0166                     ; Branch to L0166 if C = 1                
          brclr 3,RAM1_093,L0185        ; Branch to L0185 if Bit 3 Clear (Mn = 0) 
          lda #$38                      ; Load Accumulator with value of Memory at #$38, A <- (#$38)
          sta RAM1_093                  ; Store Accumulator in Memory at RAM1_093 
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_093                  ; Load Accumulator with value of Memory at RAM1_093, A <- (RAM1_093)
          cmp #$25                      ; Compare Accumulator with Memory Byte, (A) - (#$25)
          bne L0166                     ; Branch to L0166 if Not Equal (Z = 0);   
          bset 4,RAM1_060               ; Set Bit 4 at memory RAM1_060 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L418E: 
          brset 7,RAM1_095,L01A0        ; Branch to L01A0 if Bit 7 is set at RAM1_095 (Mn=1)
          brset 4,RAM1_094,L01A0        ; Branch to L01A0 if Bit 4 is set at RAM1_094 (Mn=1)
          brclr 7,RAM1_092,L0148        ; Branch to L0148 if Bit 7 Clear (Mn = 0) 
          brset 4,RAM1_092,L01A0        ; Branch to L01A0 if Bit 4 is set at RAM1_092 (Mn=1)
          brset 3,RAM1_092,L01A9        ; Branch to L01A9 if Bit 3 is set at RAM1_092 (Mn=1)
          brset 6,RAM1_093,L01D9        ; Branch to L01D9 if Bit 6 is set at RAM1_093 (Mn=1)
          rts                           ; Return from Subroutine                  
; 
L41A1: 
          bclr 4,RAM1_060               ; Clear bit 4 at RAM1_060                 
          bclr 2,RAM1_060               ; Clear bit 2 at RAM1_060                 
          bclr 1,RAM1_060               ; Clear bit 1 at RAM1_060                 
          bra L01F5                     ; Branch Always (1 = 1)                   
; 
          bclr 3,RAM1_092               ; Clear bit 3 at RAM1_092                 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X4401,x                   ; Load Accumulator with value of Memory at X4401, A <- (X4401)
          beq L01D3                     ; Branch to L01D3 if Equal Z=1            
          cmp RAM2_02b0                 ; Compare Accumulator with Memory Byte, (A) - (RAM2_02b0)
          bne L01BE                     ; Branch to L01BE if Not Equal (Z = 0);   
          lda X4402,x                   ; Load Accumulator with value of Memory at X4402, A <- (X4402)
          cmp RAM2_02b2                 ; Compare Accumulator with Memory Byte, (A) - (RAM2_02b2)
          beq L01C3                     ; Branch to L01C3 if Equal Z=1            
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          bra L01AC                     ; Branch Always (1 = 1)                   
; 
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          beq L01C7                     ; Branch to L01C7 if Equal Z=1            
          bclr 6,RAM1_093               ; Clear bit 6 at RAM1_093                 
          lda RAM1_093                  ; Load Accumulator with value of Memory at RAM1_093, A <- (RAM1_093)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          ldx X4403,x                   ; Load Index Register with Memory Byte, X <- (X4403)
          jmp L41F5,x ;INFO: index jump ; Unconditional Jump to L41F5             
; 
L41D3: 
          ldx #$47                      ; Load Index Register with Memory Byte, X <- (#$47)
          jsr L43C0                     ; Jump to Subroutine at L43C0             
          rts                           ; Return from Subroutine                  
; 
          bclr 6,RAM1_093               ; Clear bit 6 at RAM1_093                 
          lda RAM1_093                  ; Load Accumulator with value of Memory at RAM1_093, A <- (RAM1_093)
          inca                          ; Increment Accumulator by 1,A++          
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          cmp #$02                      ; Compare Accumulator with Memory Byte, (A) - (#$02)
          beq L01DD                     ; Branch to L01DD if Equal Z=1            
          cmp #$03                      ; Compare Accumulator with Memory Byte, (A) - (#$03)
          beq L01FC                     ; Branch to L01FC if Equal Z=1            
          cmp #$04                      ; Compare Accumulator with Memory Byte, (A) - (#$04)
          beq L01FC                     ; Branch to L01FC if Equal Z=1            
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L0216                     ; Branch to L0216 if Equal Z=1            
          sub #$14                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$14)
          bcc L0245                     ; Branch to L0245 if C bit is cleared     
          rts                           ; Return from Subroutine                  
; 
L41F5: 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          brclr 5,RAM1_069,L01FC        ; Branch to L01FC if Bit 5 Clear (Mn = 0) 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          jsr L43B6                     ; Jump to Subroutine at L43B6             
          bset 4,RAM1_094               ; Set Bit 4 at memory RAM1_094 (Mn <- 1 ) 
          bset 6,RAM1_093               ; Set Bit 6 at memory RAM1_093 (Mn <- 1 ) 
          jsr L4507                     ; Jump to Subroutine at L4507             
          brset 7,RAM1_092,L023F        ; Branch to L023F if Bit 7 is set at RAM1_092 (Mn=1)
          lda #$90                      ; Load Accumulator with value of Memory at #$90, A <- (#$90)
          sta RAM1_092                  ; Store Accumulator in Memory at RAM1_092 
          lda RAM2_02b0                 ; Load Accumulator with value of Memory at RAM2_02b0, A <- (RAM2_02b0)
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          sta RAM2_02b0                 ; Store Accumulator in Memory at RAM2_02b0
          rts                           ; Return from Subroutine                  
; 
          jsr L43B6                     ; Jump to Subroutine at L43B6             
          bset 4,RAM1_094               ; Set Bit 4 at memory RAM1_094 (Mn <- 1 ) 
          lda EEPROM_0120               ; Load Accumulator with value of Memory at EEPROM_0120, A <- (EEPROM_0120)
          sta RAM2_02b4                 ; Store Accumulator in Memory at RAM2_02b4
          lda EEPROM_0121               ; Load Accumulator with value of Memory at EEPROM_0121, A <- (EEPROM_0121)
          sta RAM2_02b5                 ; Store Accumulator in Memory at RAM2_02b5
          lda EEPROM_0122               ; Load Accumulator with value of Memory at EEPROM_0122, A <- (EEPROM_0122)
          sta RAM2_02b6                 ; Store Accumulator in Memory at RAM2_02b6
          lda EEPROM_0123               ; Load Accumulator with value of Memory at EEPROM_0123, A <- (EEPROM_0123)
          sta RAM2_02b7                 ; Store Accumulator in Memory at RAM2_02b7
          bset 7,RAM1_060               ; Set Bit 7 at memory RAM1_060 (Mn <- 1 ) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bclr 0,RAM1_081               ; Clear bit 0 at RAM1_081                 
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          sta RAM1_08a                  ; Store Accumulator in Memory at RAM1_08a 
          bset 6,RAM1_082               ; Set Bit 6 at memory RAM1_082 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda #$13                      ; Load Accumulator with value of Memory at #$13, A <- (#$13)
          sta RAM1_093                  ; Store Accumulator in Memory at RAM1_093 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          ldx #$95                      ; Load Index Register with Memory Byte, X <- (#$95)
          jsr L43C0                     ; Jump to Subroutine at L43C0             
          clr RAM1_057                  ; Clear byte at RAM1_057 <- 0x00          
          jmp L433F                     ; Unconditional Jump to L433F             
; 
          ldx #$CE                      ; Load Index Register with Memory Byte, X <- (#$CE)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          jsr L38A0                     ; Jump to Subroutine at L38A0             
decx 
cpx #$C0 
          bcc L0253                     ; Branch to L0253 if C bit is cleared     
          bra L0240                     ; Branch Always (1 = 1)                   
; 
          cmp #$06                      ; Compare Accumulator with Memory Byte, (A) - (#$06)
          bcs L026B                     ; Branch to L026B if C = 1                
          cmp #$08                      ; Compare Accumulator with Memory Byte, (A) - (#$08)
          bcs L026D                     ; Branch to L026D if C = 1                
          bne L026B                     ; Branch to L026B if Not Equal (Z = 0);   
          jmp L4345                     ; Unconditional Jump to L4345             
; 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          inca                          ; Increment Accumulator by 1,A++          
          jsr L43B6                     ; Jump to Subroutine at L43B6             
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          jsr L3E18                     ; Jump to Subroutine at L3E18             
          rts                           ; Return from Subroutine                  
; 
          ldx RAM2_02b3                 ; Load Index Register with Memory Byte, X <- (RAM2_02b3)
          beq L028F                     ; Branch to L028F if Equal Z=1            
cpx #$07 
          bhi L0290                     ; Branch to L0290 if Higher C v Z = 0     
          stx RAM1_05b                  ; Store Index Register In Memory at RAM1_05b
          ldx X4426,x                   ; Load Index Register with Memory Byte, X <- (X4426)
          jsr L43C0                     ; Jump to Subroutine at L43C0             
          bset 4,RAM1_094               ; Set Bit 4 at memory RAM1_094 (Mn <- 1 ) 
          ldx RAM1_05b                  ; Load Index Register with Memory Byte, X <- (RAM1_05b)
          jsr L3E31                     ; Jump to Subroutine at L3E31             
          rts                           ; Return from Subroutine                  
; 
cpx #$19 
          bne L028F                     ; Branch to L028F if Not Equal (Z = 0);   
          brclr 2,RAM1_060,L028F        ; Branch to L028F if Bit 2 Clear (Mn = 0) 
          bset 1,RAM1_060               ; Set Bit 1 at memory RAM1_060 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          jsr L3ED0                     ; Jump to Subroutine at L3ED0             
          jmp L41F5                     ; Unconditional Jump to L41F5             
; 
          brclr 2,RAM1_08b,L02A6        ; Branch to L02A6 if Bit 2 Clear (Mn = 0) 
          jmp L41D3                     ; Unconditional Jump to L41D3             
; 
          ldx RAM2_02b3                 ; Load Index Register with Memory Byte, X <- (RAM2_02b3)
          lda RAM2_02b4                 ; Load Accumulator with value of Memory at RAM2_02b4, A <- (RAM2_02b4)
          jsr L404C                     ; Jump to Subroutine at L404C             
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          cmp SEC_CODE1                 ; Compare Accumulator with Memory Byte, (A) - (SEC_CODE1)
          bne L02C5                     ; Branch to L02C5 if Not Equal (Z = 0);   
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          cmp SEC_CODE2                 ; Compare Accumulator with Memory Byte, (A) - (SEC_CODE2)
          bne L02C5                     ; Branch to L02C5 if Not Equal (Z = 0);   
          jsr L375F                     ; Jump to Subroutine at L375F             
          bclr 2,RAM1_05d               ; Clear bit 2 at RAM1_05d                 
          bset 2,RAM1_060               ; Set Bit 2 at memory RAM1_060 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          inc RAM1_08b                  ; Increment Byte RAM1_08b, Byte = Byte + 1
          jsr L3757                     ; Jump to Subroutine at L3757             
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_08c                  ; Store Accumulator in Memory at RAM1_08c 
          jmp L40E3                     ; Unconditional Jump to L40E3             
          bra L0314                     ; Branch Always (1 = 1)                   
; 
          brclr 1,RAM1_060,L0313        ; Branch to L0313 if Bit 1 Clear (Mn = 0) 
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda RAM2_02b5                 ; Load Accumulator with value of Memory at RAM2_02b5, A <- (RAM2_02b5)
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          lda #$12                      ; Load Accumulator with value of Memory at #$12, A <- (#$12)
          jsr L43B6                     ; Jump to Subroutine at L43B6             
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          ldx RAM1_051                  ; Load Index Register with Memory Byte, X <- (RAM1_051)
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          and #$FC                      ; Logical AND, A ← (A) && (#$FC)        
          beq L02FB                     ; Branch to L02FB if Equal Z=1            
          sub #$30                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$30)
          beq L02FB                     ; Branch to L02FB if Equal Z=1            
          sub #$30                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$30)
          beq L02FB                     ; Branch to L02FB if Equal Z=1            
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          inc RAM1_051                  ; Increment Byte RAM1_051, Byte = Byte + 1
          ldx RAM1_052                  ; Load Index Register with Memory Byte, X <- (RAM1_052)
          sta RAM2_02b0,x               ; Store Accumulator in Memory at RAM2_02b0
          inc RAM1_052                  ; Increment Byte RAM1_052, Byte = Byte + 1
          lda RAM2_02b0                 ; Load Accumulator with value of Memory at RAM2_02b0, A <- (RAM2_02b0)
          inca                          ; Increment Accumulator by 1,A++          
          sta RAM2_02b0                 ; Store Accumulator in Memory at RAM2_02b0
          cmp #$0F                      ; Compare Accumulator with Memory Byte, (A) - (#$0F)
          beq L0313                     ; Branch to L0313 if Equal Z=1            
          dec RAM1_050                  ; Decrement Byte at RAM1_050 Byte = Byte - 1
          bne L02E9                     ; Branch to L02E9 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          cmp #$AB                      ; Compare Accumulator with Memory Byte, (A) - (#$AB)
          bne L0325                     ; Branch to L0325 if Not Equal (Z = 0);   
          lda RAM2_02b4                 ; Load Accumulator with value of Memory at RAM2_02b4, A <- (RAM2_02b4)
          cmp #$CD                      ; Compare Accumulator with Memory Byte, (A) - (#$CD)
          bne L0325                     ; Branch to L0325 if Not Equal (Z = 0);   
          jmp L3F46                     ; Unconditional Jump to L3F46             
; 
          brclr 1,RAM1_060,L0313        ; Branch to L0313 if Bit 1 Clear (Mn = 0) 
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          cmp SEC_CODE1                 ; Compare Accumulator with Memory Byte, (A) - (SEC_CODE1)
          bne L0313                     ; Branch to L0313 if Not Equal (Z = 0);   
          lda RAM2_02b4                 ; Load Accumulator with value of Memory at RAM2_02b4, A <- (RAM2_02b4)
          cmp SEC_CODE2                 ; Compare Accumulator with Memory Byte, (A) - (SEC_CODE2)
          bne L0313                     ; Branch to L0313 if Not Equal (Z = 0);   
          jmp L3F80                     ; Unconditional Jump to L3F80             
; 
          inc RAM1_050                  ; Increment Byte RAM1_050, Byte = Byte + 1
          inc RAM1_093                  ; Increment Byte RAM1_093, Byte = Byte + 1
L433F: 
          ldx RAM1_050                  ; Load Index Register with Memory Byte, X <- (RAM1_050)
cpx #$0E 
          bls L034A                     ; Branch to L034A if Lower or Same C v Z = 1
L4345: 
          clr RAM1_093                  ; Clear byte at RAM1_093 <- 0x00          
          bset 7,RAM1_093               ; Set Bit 7 at memory RAM1_093 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          lda EEPROM_01c0,x             ; Load Accumulator with value of Memory at EEPROM_01c0, A <- (EEPROM_01c0)
          beq L033B                     ; Branch to L033B if Equal Z=1            
cpx #$02 
          beq L0367                     ; Branch to L0367 if Equal Z=1            
cpx #$03 
          beq L035F                     ; Branch to L035F if Equal Z=1            
cpx #$05 
          beq L0367                     ; Branch to L0367 if Equal Z=1            
cpx #$06 
          bne L036C                     ; Branch to L036C if Not Equal (Z = 0);   
decx 
          cmp EEPROM_01c0,x             ; Compare Accumulator with Memory Byte, (A) - (EEPROM_01c0)
          bcs L033B                     ; Branch to L033B if C = 1                
          bra L036C                     ; Branch Always (1 = 1)                   
; 
          cmp EEPROM_01c1,x             ; Compare Accumulator with Memory Byte, (A) - (EEPROM_01c1)
          bls L033B                     ; Branch to L033B if Lower or Same C v Z = 1
          cmp #$33                      ; Compare Accumulator with Memory Byte, (A) - (#$33)
          bne L0371                     ; Branch to L0371 if Not Equal (Z = 0);   
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
cpx #$0C 
          bls L037F                     ; Branch to L037F if Lower or Same C v Z = 1
          bset 6,RAM1_093               ; Set Bit 6 at memory RAM1_093 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          add #$03                      ; Add without Carry, A ← (A) + (#$03)   
          sta RAM2_02b0                 ; Store Accumulator in Memory at RAM2_02b0
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          add RAM1_050                  ; Add without Carry, A ← (A) + (RAM1_050)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          ldx RAM1_058                  ; Load Index Register with Memory Byte, X <- (RAM1_058)
          lda X44D9,x                   ; Load Accumulator with value of Memory at X44D9, A <- (X44D9)
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          sta RAM2_02b0,x               ; Store Accumulator in Memory at RAM2_02b0
          ldx RAM1_058                  ; Load Index Register with Memory Byte, X <- (RAM1_058)
          lda X44DA,x                   ; Load Accumulator with value of Memory at X44DA, A <- (X44DA)
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          sta RAM2_02b1,x               ; Store Accumulator in Memory at RAM2_02b1
          ldx RAM1_058                  ; Load Index Register with Memory Byte, X <- (RAM1_058)
          lda X44DB,x                   ; Load Accumulator with value of Memory at X44DB, A <- (X44DB)
          tst RAM1_051                  ; Test Memory Byte for Negative or Zero, (RAM1_051) – 0x00
          bne L03AD                     ; Branch to L03AD if Not Equal (Z = 0);   
          and #$7F                      ; Logical AND, A ← (A) && (#$7F)        
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          sta RAM2_02b2,x               ; Store Accumulator in Memory at RAM2_02b2
          bset 4,RAM1_094               ; Set Bit 4 at memory RAM1_094 (Mn <- 1 ) 
          bra L033B                     ; Branch Always (1 = 1)                   
; 
L43B6: 
          sta RAM1_093                  ; Store Accumulator in Memory at RAM1_093 
          lda RAM1_093                  ; Load Accumulator with value of Memory at RAM1_093, A <- (RAM1_093)
          and #$1F                      ; Logical AND, A ← (A) && (#$1F)        
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          ldx X441D,x                   ; Load Index Register with Memory Byte, X <- (X441D)
L43C0: 
          bset 7,RAM1_093               ; Set Bit 7 at memory RAM1_093 (Mn <- 1 ) 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          stx RAM1_057                  ; Store Index Register In Memory at RAM1_057
          bclr 5,RAM1_05d               ; Clear bit 5 at RAM1_05d                 
cpx #$49 
          bne L03CE                     ; Branch to L03CE if Not Equal (Z = 0);   
          bset 5,RAM1_05d               ; Set Bit 5 at memory RAM1_05d (Mn <- 1 ) 
          lda X443F,x                   ; Load Accumulator with value of Memory at X443F, A <- (X443F)
          sta RAM2_02b0                 ; Store Accumulator in Memory at RAM2_02b0
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          sub #$03                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$03)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM2_02b1                 ; Store Accumulator in Memory at RAM2_02b1
          ldx RAM1_057                  ; Load Index Register with Memory Byte, X <- (RAM1_057)
          lda X4440,x                   ; Load Accumulator with value of Memory at X4440, A <- (X4440)
          ldx RAM1_056                  ; Load Index Register with Memory Byte, X <- (RAM1_056)
          sta RAM2_02b2,x               ; Store Accumulator in Memory at RAM2_02b2
          inc RAM1_056                  ; Increment Byte RAM1_056, Byte = Byte + 1
          inc RAM1_057                  ; Increment Byte RAM1_057, Byte = Byte + 1
          dec RAM1_058                  ; Decrement Byte at RAM1_058 Byte = Byte - 1
          bpl L03DF                     ; Branch to L03DF if Plus N = 0           
          bset 7,RAM1_095               ; Set Bit 7 at memory RAM1_095 (Mn <- 1 ) 
          bset 4,RAM1_092               ; Set Bit 4 at memory RAM1_092 (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L43F6: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 1,PortD,L03FC           ; Branch to L03FC if Bit DIAG Clear (Mn = 0)
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          eor RAM1_093                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_093)
          and #$20                      ; Logical AND, A ← (A) && (#$20)        
          rts                           ; Return from Subroutine                  
; 
X4401: 
          brclr 1,PortA,L0404           ; Branch to L0404 if Bit PANEL_DATA Clear (Mn = 0)
          brclr 1,EEPROM_ECLK_control,L0452 ; Branch to L0452 if Bit E1LAT Clear (Mn = 0)
          brclr 1,DDRB,L0466            ; Branch to L0466 if Bit ENA_12V_WOOFER Clear (Mn = 0)
          brset 2,DDRA,L0476            ; Branch to L0476 if Bit PANEL_CLOCK is set at DDRA (Mn=1)
          brset 2,X0029,L0392           ; Branch to L0392 if Bit 2 is set at X0029 (Mn=1)
          brclr 3,SCSR,L03B8            ; Branch to L03B8 if Bit OR Clear (Mn = 0)
          brset 4,X002B,L03C1           ; Branch to L03C1 if Bit 4 is set at X002B (Mn=1)
          brclr 2,ACL,L03F5             ; Branch to L03F5 if Bit 2 Clear (Mn = 0) 
          brset 3,PortD,L03FA           ; Branch to L03FA if Bit LSR_TEST_PHANTOM is set at PortD (Mn=1)
          brset 0,X003F,L0420           ; Branch to L0420 if Bit 0 is set at X003F (Mn=1)
          brclr 7,ICL2,L044D            ; Branch to L044D if Bit 7 Clear (Mn = 0) 
          asl X003B                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          clr X0043                     ; Clear byte at X0043 <- 0x00             
X4426: 
          asra                          ; Arithmetic Shift Right of accumulator, b7 -> [b7 >>>> b0] -> C
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          asrx                          ; Arithmetic Shift Right of Index Register, b7 -> [b7 >>>> b0] -> C
; 
          db $65                        ; data? e,  ,  ,                          
; 
          neg ,x                        ; Negate Byte of  (Two’s Complement),  = 0x00 - ()
; 
          db $7E, $86                   ; data? ~,  ,  ,                          
; 
          stop                          ; Stop Oscillator and Enable IRQ Pin      
; 
          db $95, $93                   ; data?  ,  ,  ,                          
; 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          nop                           ; No Operation                            
          sub #$A3                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$A3)
          lda #$A9                      ; Load Accumulator with value of Memory at #$A9, A <- (#$A9)
; 
          db $AC, $AF                   ; data?  ,  ,  ,                          
; 
          sbc RAM1_0b5                  ; Subtract Memory Byte RAM1_0b5 and Carry Bit from Accumulator, A ←  (A) – (RAM1_0b5) – (C)
          eor RAM1_0bb                  ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (RAM1_0bb)
          ldx STACK_0c1                 ; Load Index Register with Memory Byte, X <- (STACK_0c1)
          and X810F                     ; Logical AND, A ← (A) && (X810F)       
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          lsr X0042                     ; Logical Shift Right of X0042, b7 -> [b7 >>>> b0] -> C
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
          com X0035                     ; Complement Byte (One’s Complement), 0xFF - X0035
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          asl X0036                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          bra L046D                     ; Branch Always (1 = 1)                   
          bra L045E                     ; Branch Always (1 = 1)                   
; 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          lsr X0042                     ; Logical Shift Right of X0042, b7 -> [b7 >>>> b0] -> C
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
          com X0035                     ; Complement Byte (One’s Complement), 0xFF - X0035
; 
          db $31, $35, $32              ; data? 1, 5, 2,                          
; 
          bra L047B                     ; Branch Always (1 = 1)                   
          bra L046C                     ; Branch Always (1 = 1)                   
; 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          bra L04B2                     ; Branch Always (1 = 1)                   
; 
          db $61                        ; data? a,  ,  ,                          
; 
          lsr RAM1_069,x                ; Logical Shift Right of RAM1_069, b7 -> [b7 >>>> b0] -> C
          clr X0020,x                   ; Clear byte at X0020 <- 0x00             
          bra L0487                     ; Branch Always (1 = 1)                   
          bra L0489                     ; Branch Always (1 = 1)                   
          bra L0479                     ; Branch Always (1 = 1)                   
; 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
          bra L048E                     ; Branch Always (1 = 1)                   
          bra L0490                     ; Branch Always (1 = 1)                   
          bra L0492                     ; Branch Always (1 = 1)                   
          bra L04A4                     ; Branch Always (1 = 1)                   
; 
          neg X0030                     ; Negate Byte of X0030 (Two’s Complement), X0030 = 0x00 - (X0030)
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          brset 4,STACK_0f6,L047A       ; Branch to L047A if Bit 4 is set at STACK_0f6 (Mn=1)
          brclr 2,STACK_0f5,L0480       ; Branch to L0480 if Bit 2 Clear (Mn = 0) 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
          brclr 2,STACK_0f5,L0484       ; Branch to L0484 if Bit 2 Clear (Mn = 0) 
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          brclr 2,STACK_0f5,L0489       ; Branch to L0489 if Bit 2 Clear (Mn = 0) 
          add #$44                      ; Add without Carry, A ← (A) + (#$44)   
          brset 5,SCCR2,L0471           ; Branch to L0471 if Bit RIE is set at SCCR2 (Mn=1)
          bset 0,ADDATA                 ; Set Bit 0 at memory ADDATA (Mn <- 1 )   
          brset 0,DDRC,L04DD            ; Branch to L04DD if Bit ENA_8V is set at DDRC (Mn=1)
          sub X1764                     ; Subtract Memory Byte from Accumulator , A ← (A) – (X1764)
          rti                           ; Return from Interrupt                   
; 
          bcs L0495                     ; Branch to L0495 if C = 1                
; 
          db $87                        ; data?  ,  ,  ,                          
; 
          brclr 7,STACK_0e7,L04BE       ; Branch to L04BE if Bit 7 Clear (Mn = 0) 
          brset 0,STACK_0f0,L04C1       ; Branch to L04C1 if Bit 0 is set at STACK_0f0 (Mn=1)
          brset 0,STACK_0c2,L04B0       ; Branch to L04B0 if Bit 0 is set at STACK_0c2 (Mn=1)
          bra L04C1                     ; Branch Always (1 = 1)                   
; 
          bclr 0,X0020                  ; Clear bit 0 at X0020                    
          bra L04B1                     ; Branch Always (1 = 1)                   
; 
          sta X0025,x                   ; Store Accumulator in Memory at X0025    
          brclr 0,SCDR,L04CF            ; Branch to L04CF if Bit 0 Clear (Mn = 0) 
          brset 0,STACK_0f4,L04D2       ; Branch to L04D2 if Bit 0 is set at STACK_0f4 (Mn=1)
          brset 0,STACK_0c2,L04BF       ; Branch to L04BF if Bit 0 is set at STACK_0c2 (Mn=1)
          sta SCSR,x                    ; Store Accumulator in Memory at SCSR     
          brclr 0,PortA,L04C6           ; Branch to L04C6 if Bit PANEL_STATUS Clear (Mn = 0)
          bra L04D7                     ; Branch Always (1 = 1)                   
; 
          bcs L04B9                     ; Branch to L04B9 if C = 1                
          bit ,x                        ; Bit Test Accumulator with Memory Byte (A) ∧ ()
          bcs L04BC                     ; Branch to L04BC if C = 1                
; 
          db $88                        ; data?  ,  ,  ,                          
; 
          brclr 4,STACK_0e7,L04E5       ; Branch to L04E5 if Bit 4 Clear (Mn = 0) 
          brset 0,STACK_0f6,L04E8       ; Branch to L04E8 if Bit 0 is set at STACK_0f6 (Mn=1)
          brset 0,STACK_0c2,L04CF       ; Branch to L04CF if Bit 0 is set at STACK_0c2 (Mn=1)
          sta X0025,x                   ; Store Accumulator in Memory at X0025    
          brset 0,STACK_0f7,L04F0       ; Branch to L04F0 if Bit 0 is set at STACK_0f7 (Mn=1)
          brset 0,STACK_0c2,L04D4       ; Branch to L04D4 if Bit 0 is set at STACK_0c2 (Mn=1)
          sta SCDR,x                    ; Store Accumulator in Memory at SCDR     
          bra L04F2                     ; Branch Always (1 = 1)                   
; 
          brclr 1,STACK_0fd,L04DB       ; Branch to L04DB if Bit 1 Clear (Mn = 0) 
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          stx ,x                        ; Store Index Register In Memory at       
          stx ,x                        ; Store Index Register In Memory at       
; 
          db $88                        ; data?  ,  ,  ,                          
; 
X44D9: 
          brclr 1,RAM1_051,L0480        ; Branch to L0480 if Bit 1 Clear (Mn = 0) 
          brset 1,RAM1_09c,L0466        ; Branch to L0466 if Bit 1 is set at RAM1_09c (Mn=1)
          brclr 1,RAM1_058,L0486        ; Branch to L0486 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_058,L0482        ; Branch to L0482 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_052,L0485        ; Branch to L0485 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_054,L0497        ; Branch to L0497 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_054,L0492        ; Branch to L0492 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_055,L049D        ; Branch to L049D if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_055,L0498        ; Branch to L0498 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_058,L0494        ; Branch to L0494 if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_056,L04AB        ; Branch to L04AB if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_057,L04AE        ; Branch to L04AE if Bit 1 Clear (Mn = 0) 
          brclr 1,RAM1_057,L049D        ; Branch to L049D if Bit 1 Clear (Mn = 0) 
          stx ,x                        ; Store Index Register In Memory at       
          stx ,x                        ; Store Index Register In Memory at       
          brset 0,DDRA,L0519            ; Branch to L0519 if Bit PANEL_STATUS is set at DDRA (Mn=1)
          bls L0507                     ; Branch to L0507 if Lower or Same C v Z = 1
L4507: 
          lda EEPROM_01d0               ; Load Accumulator with value of Memory at EEPROM_01d0, A <- (EEPROM_01d0)
          cmp #$41                      ; Compare Accumulator with Memory Byte, (A) - (#$41)
          bne L0540                     ; Branch to L0540 if Not Equal (Z = 0);   
          lda RAM2_02b3                 ; Load Accumulator with value of Memory at RAM2_02b3, A <- (RAM2_02b3)
          cmp #$34                      ; Compare Accumulator with Memory Byte, (A) - (#$34)
          bne L0528                     ; Branch to L0528 if Not Equal (Z = 0);   
          ldx #$0A                      ; Load Index Register with Memory Byte, X <- (#$0A)
          lda EEPROM_01d0,x             ; Load Accumulator with value of Memory at EEPROM_01d0, A <- (EEPROM_01d0)
          brset 5,RAM1_069,L0520        ; Branch to L0520 if Bit 5 is set at RAM1_069 (Mn=1)
          lda EEPROM_01e0,x             ; Load Accumulator with value of Memory at EEPROM_01e0, A <- (EEPROM_01e0)
          sta RAM2_02b2,x               ; Store Accumulator in Memory at RAM2_02b2
decx 
          bne L0517                     ; Branch to L0517 if Not Equal (Z = 0);   
          bra L0540                     ; Branch Always (1 = 1)                   
; 
          lda RAM2_02bd                 ; Load Accumulator with value of Memory at RAM2_02bd, A <- (RAM2_02bd)
          cmp #$31                      ; Compare Accumulator with Memory Byte, (A) - (#$31)
          bne L0540                     ; Branch to L0540 if Not Equal (Z = 0);   
          ldx #$05                      ; Load Index Register with Memory Byte, X <- (#$05)
          lda EEPROM_01da,x             ; Load Accumulator with value of Memory at EEPROM_01da, A <- (EEPROM_01da)
          brset 5,RAM1_069,L053A        ; Branch to L053A if Bit 5 is set at RAM1_069 (Mn=1)
          lda EEPROM_01ea,x             ; Load Accumulator with value of Memory at EEPROM_01ea, A <- (EEPROM_01ea)
          sta RAM2_02b8,x               ; Store Accumulator in Memory at RAM2_02b8
decx 
          bne L0531                     ; Branch to L0531 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
L4541: 
          rts                           ; Return from Subroutine                  
; 
L4542: 
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          jsr L2591                     ; Jump to Subroutine at L2591             
          lda #$14                      ; Load Accumulator with value of Memory at #$14, A <- (#$14)
          jmp L24CB                     ; Unconditional Jump to L24CB             
; 
L454C: 
          brclr 6,STACK_0ce,L0559       ; Branch to L0559 if Bit 6 Clear (Mn = 0) 
          lda STACK_0d0                 ; Load Accumulator with value of Memory at STACK_0d0, A <- (STACK_0d0)
          bit #$F0                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$F0)
          bne L0559                     ; Branch to L0559 if Not Equal (Z = 0);   
          jmp L45EE                     ; Unconditional Jump to L45EE             
L4558: 
          rts                           ; Return from Subroutine                  
          rts                           ; Return from Subroutine                  
; 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bra L0560                     ; Branch Always (1 = 1)                   
; 
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          brclr 3,STACK_0d0,L0559       ; Branch to L0559 if Bit 3 Clear (Mn = 0) 
          add STACK_0d0                 ; Add without Carry, A ← (A) + (STACK_0d0)
          and #$0F                      ; Logical AND, A ← (A) && (#$0F)        
          ora #$08                      ; Logical OR Accumulator with Memory at #$08, A <- (A) || (#$08)
          cmp #$0D                      ; Compare Accumulator with Memory Byte, (A) - (#$0D)
          bcs L0574                     ; Branch to L0574 if C = 1                
          bne L0572                     ; Branch to L0572 if Not Equal (Z = 0);   
          lda #$08                      ; Load Accumulator with value of Memory at #$08, A <- (#$08)
          cmp XA60C                     ; Compare Accumulator with Memory Byte, (A) - (XA60C)
          sta STACK_0d0                 ; Store Accumulator in Memory at STACK_0d0
          bra L0578                     ; Branch Always (1 = 1)                   
; 
L4578: 
          brclr 5,STACK_0ce,L058B       ; Branch to L058B if Bit 5 Clear (Mn = 0) 
          lda #$17                      ; Load Accumulator with value of Memory at #$17, A <- (#$17)
          brset 6,RAM1_081,L05DA        ; Branch to L05DA if Bit 6 is set at RAM1_081 (Mn=1)
          ldx RAM1_084                  ; Load Index Register with Memory Byte, X <- (RAM1_084)
          lda X45DD,x                   ; Load Accumulator with value of Memory at X45DD, A <- (X45DD)
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          lda #$8B                      ; Load Accumulator with value of Memory at #$8B, A <- (#$8B)
          bra L05DA                     ; Branch Always (1 = 1)                   
; 
          brclr 6,STACK_0ce,L0559       ; Branch to L0559 if Bit 6 Clear (Mn = 0) 
          ldx STACK_0d0                 ; Load Index Register with Memory Byte, X <- (STACK_0d0)
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          brset 6,RAM1_06a,L0597        ; Branch to L0597 if Bit 6 is set at RAM1_06a (Mn=1)
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
cpx #$01 
          beq L05DA                     ; Branch to L05DA if Equal Z=1            
          lda #$CA                      ; Load Accumulator with value of Memory at #$CA, A <- (#$CA)
cpx #$08 
          beq L05DA                     ; Branch to L05DA if Equal Z=1            
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          cmp #$09                      ; Compare Accumulator with Memory Byte, (A) - (#$09)
          beq L05BA                     ; Branch to L05BA if Equal Z=1            
X45A8: 
          cmp #$0A                      ; Compare Accumulator with Memory Byte, (A) - (#$0A)
          beq L05C4                     ; Branch to L05C4 if Equal Z=1            
          cmp #$0B                      ; Compare Accumulator with Memory Byte, (A) - (#$0B)
          bne L05CF                     ; Branch to L05CF if Not Equal (Z = 0);   
          lda RAM1_0a3,x                ; Load Accumulator with value of Memory at RAM1_0a3, A <- (RAM1_0a3)
          sta RAM2_0257,x               ; Store Accumulator in Memory at RAM2_0257
decx 
          bpl L05B0                     ; Branch to L05B0 if Plus N = 0           
          bra L05D8                     ; Branch Always (1 = 1)                   
; 
          lda STACK_0da,x               ; Load Accumulator with value of Memory at STACK_0da, A <- (STACK_0da)
          sta RAM2_0257,x               ; Store Accumulator in Memory at RAM2_0257
decx 
          bpl L05BA                     ; Branch to L05BA if Plus N = 0           
          bra L05D8                     ; Branch Always (1 = 1)                   
; 
          lda X45E6,x                   ; Load Accumulator with value of Memory at X45E6, A <- (X45E6)
          sta RAM2_0257,x               ; Store Accumulator in Memory at RAM2_0257
decx 
          bpl L05C4                     ; Branch to L05C4 if Plus N = 0           
          bra L05D8                     ; Branch Always (1 = 1)                   
; 
          lda EEPROM_0190,x             ; Load Accumulator with value of Memory at EEPROM_0190, A <- (EEPROM_0190)
          sta RAM2_0257,x               ; Store Accumulator in Memory at RAM2_0257
decx 
          bpl L05CF                     ; Branch to L05CF if Plus N = 0           
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          jmp L24DC                     ; Unconditional Jump to L24DC             
; 
X45DD: 
          brset 0,PortB,L05E3           ; Branch to L05E3 if Bit ENA_12V_ANTENE is set at PortB (Mn=1)
          brset 2,DDRB,L05E9            ; Branch to L05E9 if Bit ENA_12V_CDC is set at DDRB (Mn=1)
          brset 4,ADSTAT,L05F0          ; Branch to L05F0 if Bit 0 is set at ADSTAT (Mn=1)
X45E6: 
          asr X0042                     ; Arithmetic Shift Right X0042, b7 -> [b7 >>>> b0] -> C
; 
          db $32                        ; data? 2,  ,  ,                          
; 
          neg X002E                     ; Negate Byte of X002E (Two’s Complement), X002E = 0x00 - (X002E)
; 
          db $31                        ; data? 1,  ,  ,                          
; 
          bra L063B                     ; Branch Always (1 = 1)                   
; 
L45EE: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X4606,x                   ; Load Accumulator with value of Memory at X4606, A <- (X4606)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X4605,x                   ; Load Accumulator with value of Memory at X4605, A <- (X4605)
          beq L0604                     ; Branch to L0604 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L05EF                     ; Branch to L05EF if Not Equal (Z = 0);   
          ldx X4604,x                   ; Load Index Register with Memory Byte, X <- (X4604)
          jsr L4558,x ;INFO: index jump ; Jump to Subroutine at L4558             
X4604: 
          rts                           ; Return from Subroutine                  
; 
X4605: 
          lda ,x                        ; Load Accumulator with value of Memory at , A <- ()
X4606: 
          brclr 0,STACK_0f8,L060B       ; Branch to L060B if Bit 0 Clear (Mn = 0) 
          sta DDRC,x                    ; Store Accumulator in Memory at DDRC     
          brset 0,PortD,L05E0           ; Branch to L05E0 if Bit S-KONT is set at PortD (Mn=1)
; 
          db $75                        ; data? u,  ,  ,                          
; 
          brset 0,STACK_0d2,L0684       ; Branch to L0684 if Bit 0 is set at STACK_0d2 (Mn=1)
          brclr 3,STACK_0cb,L0619       ; Branch to L0619 if Bit 3 Clear (Mn = 0) 
          bclr 3,STACK_0cb              ; Clear bit 3 at STACK_0cb                
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          brclr 6,RAM1_05d,L0684        ; Branch to L0684 if Bit 6 Clear (Mn = 0) 
          jmp L4742                     ; Unconditional Jump to L4742             
; 
L461F: 
          brclr 1,STACK_0d2,L0684       ; Branch to L0684 if Bit 1 Clear (Mn = 0) 
          lda #$06                      ; Load Accumulator with value of Memory at #$06, A <- (#$06)
          eor STACK_0d4                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d4)
          sta STACK_0d4                 ; Store Accumulator in Memory at STACK_0d4
          ldx #$A6                      ; Load Index Register with Memory Byte, X <- (#$A6)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          bclr 0,STACK_0d4              ; Clear bit 0 at STACK_0d4                
          ldx #$83                      ; Load Index Register with Memory Byte, X <- (#$83)
          brset 2,STACK_0d4,L0643       ; Branch to L0643 if Bit 2 is set at STACK_0d4 (Mn=1)
          ldx #$8D                      ; Load Index Register with Memory Byte, X <- (#$8D)
          bra L0643                     ; Branch Always (1 = 1)                   
; 
          brclr 1,STACK_0d2,L0684       ; Branch to L0684 if Bit 1 Clear (Mn = 0) 
          ldx #$89                      ; Load Index Register with Memory Byte, X <- (#$89)
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          eor STACK_0d4                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d4)
          sta STACK_0d4                 ; Store Accumulator in Memory at STACK_0d4
          bset 2,RAM1_06a               ; Set Bit 2 at memory RAM1_06a (Mn <- 1 ) 
          bra L065B                     ; Branch Always (1 = 1)                   
; 
          ldx #$87                      ; Load Index Register with Memory Byte, X <- (#$87)
          cmp XAE86                     ; Compare Accumulator with Memory Byte, (A) - (XAE86)
          cmp XAE85                     ; Compare Accumulator with Memory Byte, (A) - (XAE85)
          cmp XAE84                     ; Compare Accumulator with Memory Byte, (A) - (XAE84)
          bra L065B                     ; Branch Always (1 = 1)                   
; 
          ldx #$8B                      ; Load Index Register with Memory Byte, X <- (#$8B)
          cmp XAE8A                     ; Compare Accumulator with Memory Byte, (A) - (XAE8A)
          bsr L0679                     ; Branch to Subroutine at L0679           
          bclr 0,STACK_0d4              ; Clear bit 0 at STACK_0d4                
          lda RAM2_0264                 ; Load Accumulator with value of Memory at RAM2_0264, A <- (RAM2_0264)
          and #$ED                      ; Logical AND, A ← (A) && (#$ED)        
          sta RAM2_0264                 ; Store Accumulator in Memory at RAM2_0264
          stx RAM1_07d                  ; Store Index Register In Memory at RAM1_07d
          bset 6,RAM1_094               ; Set Bit 6 at memory RAM1_094 (Mn <- 1 ) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          bclr 4,STACK_0d2              ; Clear bit 4 at STACK_0d2                
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          brset 4,STACK_0d2,L064D       ; Branch to L064D if Bit 4 is set at STACK_0d2 (Mn=1)
          brset 4,STACK_0d2,L0650       ; Branch to L0650 if Bit 4 is set at STACK_0d2 (Mn=1)
          bclr 1,STACK_0d2              ; Clear bit 1 at STACK_0d2                
          rts                           ; Return from Subroutine                  
; 
          lda #$50                      ; Load Accumulator with value of Memory at #$50, A <- (#$50)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          rts                           ; Return from Subroutine                  
; 
          lda #$90                      ; Load Accumulator with value of Memory at #$90, A <- (#$90)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          bset 4,STACK_0d2              ; Set Bit 4 at memory STACK_0d2 (Mn <- 1 )
          rts                           ; Return from Subroutine                  
; 
          lda RAM1_078                  ; Load Accumulator with value of Memory at RAM1_078, A <- (RAM1_078)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
deca 
          jsr L2664                     ; Jump to Subroutine at L2664             
          and RAM2_0266                 ; Logical AND, A ← (A) && (RAM2_0266)   
          bne L06A0                     ; Branch to L06A0 if Not Equal (Z = 0);   
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          jsr L24E5                     ; Jump to Subroutine at L24E5             
          lda STACK_0c8                 ; Load Accumulator with value of Memory at STACK_0c8, A <- (STACK_0c8)
          ora #$20                      ; Logical OR Accumulator with Memory at #$20, A <- (A) || (#$20)
          jsr L259A                     ; Jump to Subroutine at L259A             
          lda STACK_0c8                 ; Load Accumulator with value of Memory at STACK_0c8, A <- (STACK_0c8)
          ora #$C0                      ; Logical OR Accumulator with Memory at #$C0, A <- (A) || (#$C0)
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          bra L065B                     ; Branch Always (1 = 1)                   
; 
L46A7: 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          jsr L2565                     ; Jump to Subroutine at L2565             
          lda RAM2_0260                 ; Load Accumulator with value of Memory at RAM2_0260, A <- (RAM2_0260)
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          lda RAM2_0265                 ; Load Accumulator with value of Memory at RAM2_0265, A <- (RAM2_0265)
          bit #$06                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$06)
          bne L0700                     ; Branch to L0700 if Not Equal (Z = 0);   
          bit #$08                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$08)
          bne L06CA                     ; Branch to L06CA if Not Equal (Z = 0);   
          and #$F0                      ; Logical AND, A ← (A) && (#$F0)        
          cmp #$A0                      ; Compare Accumulator with Memory Byte, (A) - (#$A0)
          beq L06CA                     ; Branch to L06CA if Equal Z=1            
          cmp #$B0                      ; Compare Accumulator with Memory Byte, (A) - (#$B0)
          bne L06D3                     ; Branch to L06D3 if Not Equal (Z = 0);   
          bset 3,STACK_0d4              ; Set Bit 3 at memory STACK_0d4 (Mn <- 1 )
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          jsr L259A                     ; Jump to Subroutine at L259A             
          ldx #$08                      ; Load Index Register with Memory Byte, X <- (#$08)
          bra L06FC                     ; Branch Always (1 = 1)                   
; 
          lda RAM2_0267                 ; Load Accumulator with value of Memory at RAM2_0267, A <- (RAM2_0267)
          bpl L06E0                     ; Branch to L06E0 if Plus N = 0           
          and #$07                      ; Logical AND, A ← (A) && (#$07)        
          sta STACK_0c8                 ; Store Accumulator in Memory at STACK_0c8
          ldx #$89                      ; Load Index Register with Memory Byte, X <- (#$89)
          bra L06FC                     ; Branch Always (1 = 1)                   
; 
          lda RAM2_0266                 ; Load Accumulator with value of Memory at RAM2_0266, A <- (RAM2_0266)
          and #$3F                      ; Logical AND, A ← (A) && (#$3F)        
          beq L06CA                     ; Branch to L06CA if Equal Z=1            
          brset 0,STACK_0d2,L06FA       ; Branch to L06FA if Bit 0 is set at STACK_0d2 (Mn=1)
          brclr 2,STACK_0d4,L06FA       ; Branch to L06FA if Bit 2 Clear (Mn = 0) 
          lda RAM2_0264                 ; Load Accumulator with value of Memory at RAM2_0264, A <- (RAM2_0264)
          and #$24                      ; Logical AND, A ← (A) && (#$24)        
          bne L06FA                     ; Branch to L06FA if Not Equal (Z = 0);   
          ldx #$83                      ; Load Index Register with Memory Byte, X <- (#$83)
          stx RAM1_07d                  ; Store Index Register In Memory at RAM1_07d
          bset 6,RAM1_094               ; Set Bit 6 at memory RAM1_094 (Mn <- 1 ) 
          ldx #$C8                      ; Load Index Register with Memory Byte, X <- (#$C8)
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          jmp L24CB                     ; Unconditional Jump to L24CB             
; 
          jsr L253F                     ; Jump to Subroutine at L253F             
          lda STACK_0c8                 ; Load Accumulator with value of Memory at STACK_0c8, A <- (STACK_0c8)
          ora #$30                      ; Logical OR Accumulator with Memory at #$30, A <- (A) || (#$30)
          sta RAM2_0259                 ; Store Accumulator in Memory at RAM2_0259
          lda RAM2_0265                 ; Load Accumulator with value of Memory at RAM2_0265, A <- (RAM2_0265)
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
          and #$03                      ; Logical AND, A ← (A) && (#$03)        
          ora #$30                      ; Logical OR Accumulator with Memory at #$30, A <- (A) || (#$30)
          sta RAM2_025e                 ; Store Accumulator in Memory at RAM2_025e
          lda #$C4                      ; Load Accumulator with value of Memory at #$C4, A <- (#$C4)
          jmp L24DC                     ; Unconditional Jump to L24DC             
; 
L471A: 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          bclr 3,STACK_0cb              ; Clear bit 3 at STACK_0cb                
          brset 2,RAM1_06a,L0733        ; Branch to L0733 if Bit 2 is set at RAM1_06a (Mn=1)
          bclr 1,STACK_0d4              ; Clear bit 1 at STACK_0d4                
          bset 0,STACK_0d4              ; Set Bit 0 at memory STACK_0d4 (Mn <- 1 )
          lda RAM2_0264                 ; Load Accumulator with value of Memory at RAM2_0264, A <- (RAM2_0264)
          bit #$12                      ; Bit Test Accumulator with Memory Byte (A) ∧ (#$12)
          bne L072E                     ; Branch to L072E if Not Equal (Z = 0);   
          bclr 0,STACK_0d4              ; Clear bit 0 at STACK_0d4                
          brclr 2,STACK_0d4,L0733       ; Branch to L0733 if Bit 2 Clear (Mn = 0) 
          bset 1,STACK_0d4              ; Set Bit 1 at memory STACK_0d4 (Mn <- 1 )
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 0,STACK_0d4,L0739       ; Branch to L0739 if Bit 0 Clear (Mn = 0) 
          bset 4,RAM1_056               ; Set Bit 4 at memory RAM1_056 (Mn <- 1 ) 
          brclr 1,STACK_0d4,L073E       ; Branch to L073E if Bit 1 Clear (Mn = 0) 
          lda #$10                      ; Load Accumulator with value of Memory at #$10, A <- (#$10)
          jsr L250E                     ; Jump to Subroutine at L250E             
          rts                           ; Return from Subroutine                  
; 
L4742: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X475C,x                   ; Load Accumulator with value of Memory at X475C, A <- (X475C)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X475B,x                   ; Load Accumulator with value of Memory at X475B, A <- (X475B)
          beq L075A                     ; Branch to L075A if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L0743                     ; Branch to L0743 if Not Equal (Z = 0);   
          ldx X475A,x                   ; Load Index Register with Memory Byte, X <- (X475A)
          jsr L461F,x ;INFO: index jump ; Jump to Subroutine at L461F             
          bclr 6,RAM1_05d               ; Clear bit 6 at RAM1_05d                 
X475A: 
          rts                           ; Return from Subroutine                  
; 
X475B: 
          eor ,x                        ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X ()
X475C: 
          bmi L0745                     ; Branch to L0745 if Minus N = 1          
          bhcc L074F                    ; Branch to L074F if half carry bit Clear H=0
          bmi L0752                     ; Branch to L0752 if Minus N = 1          
          bhcc L0751                    ; Branch to L0751 if half carry bit Clear H=0
          clrx                          ; Clear Index Register, X <- 0x00         
; 
          db $8D                        ; data?  ,  ,  ,                          
; 
          asl X004D                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
decx 
          jsr L54F3                     ; Jump to Subroutine at L54F3             
          clrx                          ; Clear Index Register, X <- 0x00         
; 
          db $93, $35                   ; data?  , 5,  ,                          
; 
          comx                          ; Complement Index register (One’s Complement), 0xFF - X
decx 
cpx X51FD,x 
          clrx                          ; Clear Index Register, X <- 0x00         
          nop                           ; No Operation                            
          asl RAM1_05d                  ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
decx 
          jsr L54FC,x ;INFO: index jump ; Jump to Subroutine at L54FC             
          clrx                          ; Clear Index Register, X <- 0x00         
          rsp                           ; Reset Stack Pointer, SP <- 0x00FF       
; 
          db $35                        ; data? 5,  ,  ,                          
; 
          incx                          ; Increment Index register by 1,X++       
decx 
          jmp L51F1,x ;INFO: index jump ; Unconditional Jump to L51F1             
; 
          clrx                          ; Clear Index Register, X <- 0x00         
; 
          db $91                        ; data?  ,  ,  ,                          
; 
          asl RAM1_051                  ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
decx 
          cmp X54F2,x                   ; Compare Accumulator with Memory Byte, (A) - (X54F2)
          clrx                          ; Clear Index Register, X <- 0x00         
; 
          db $92, $35, $52              ; data?  , 5, R,                          
; 
decx 
          sbc X51EC,x                   ; Subtract Memory Byte X51EC and Carry Bit from Accumulator, A ←  (A) – (X51EC) – (C)
          brset 0,ADDATA,L0797          ; Branch to L0797 if Bit 0 is set at ADDATA (Mn=1)
          brclr 5,TCL,L077A             ; Branch to L077A if Bit 5 Clear (Mn = 0) 
          ror PortA,x                   ; Rotate Byte at PortA Right through Carry Bit, C -> [b7 >>>> b0] -> C
L479C: 
          brclr 2,STACK_0d2,L07B4       ; Branch to L07B4 if Bit 2 Clear (Mn = 0) 
          brclr 4,STACK_0cb,L07AB       ; Branch to L07AB if Bit 4 Clear (Mn = 0) 
          bclr 4,STACK_0cb              ; Clear bit 4 at STACK_0cb                
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          brclr 1,RAM1_07c,L07AB        ; Branch to L07AB if Bit 1 Clear (Mn = 0) 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          brclr 6,RAM1_05d,L07B4        ; Branch to L07B4 if Bit 6 Clear (Mn = 0) 
          brset 7,STACK_0d3,L07B4       ; Branch to L07B4 if Bit 7 is set at STACK_0d3 (Mn=1)
          jmp L489A                     ; Unconditional Jump to L489A             
          rts                           ; Return from Subroutine                  
; 
L47B5: 
          lda #$8B                      ; Load Accumulator with value of Memory at #$8B, A <- (#$8B)
          cmp XA68A                     ; Compare Accumulator with Memory Byte, (A) - (XA68A)
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          brclr 1,RAM1_07c,L07CA        ; Branch to L07CA if Bit 1 Clear (Mn = 0) 
          lda #$88                      ; Load Accumulator with value of Memory at #$88, A <- (#$88)
          brset 7,STACK_0d3,L002A       ; Branch to L002A if Bit 7 is set at STACK_0d3 (Mn=1)
          bclr 2,STACK_0d2              ; Clear bit 2 at STACK_0d2                
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          bra L002A                     ; Branch Always (1 = 1)                   
; 
          brset 3,RAM1_07f,L07B4        ; Branch to L07B4 if Bit 3 is set at RAM1_07f (Mn=1)
          brset 5,RAM1_07f,L07B4        ; Branch to L07B4 if Bit 5 is set at RAM1_07f (Mn=1)
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          bclr 1,RAM1_06a               ; Clear bit 1 at RAM1_06a                 
          bclr 3,RAM1_06a               ; Clear bit 3 at RAM1_06a                 
          brclr 5,STACK_0d3,L002E       ; Branch to L002E if Bit 5 Clear (Mn = 0) 
          bclr 3,RAM1_07b               ; Clear bit 3 at RAM1_07b                 
          bra L002E                     ; Branch Always (1 = 1)                   
; 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          brset 3,RAM1_06a,L0026        ; Branch to L0026 if Bit 3 is set at RAM1_06a (Mn=1)
          bset 3,RAM1_06a               ; Set Bit 3 at memory RAM1_06a (Mn <- 1 ) 
          lda #$89                      ; Load Accumulator with value of Memory at #$89, A <- (#$89)
          bra L002A                     ; Branch Always (1 = 1)                   
; 
          bset 4,RAM1_0bc               ; Set Bit 4 at memory RAM1_0bc (Mn <- 1 ) 
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          eor STACK_0d3                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d3)
          sta STACK_0d3                 ; Store Accumulator in Memory at STACK_0d3
          ldx #$A5                      ; Load Index Register with Memory Byte, X <- (#$A5)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          bra L0030                     ; Branch Always (1 = 1)                   
; 
          brclr 3,RAM1_06a,L07FE        ; Branch to L07FE if Bit 3 Clear (Mn = 0) 
          bset 5,STACK_0d3              ; Set Bit 5 at memory STACK_0d3 (Mn <- 1 )
          bra L0004                     ; Branch Always (1 = 1)                   
; 
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          eor STACK_0d3                 ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (STACK_0d3)
          sta STACK_0d3                 ; Store Accumulator in Memory at STACK_0d3
          ldx #$A5                      ; Load Index Register with Memory Byte, X <- (#$A5)
          jsr L38A0                     ; Jump to Subroutine at L38A0             
          brclr 1,RAM1_07c,L001C        ; Branch to L001C if Bit 1 Clear (Mn = 0) 
          lda #$8B                      ; Load Accumulator with value of Memory at #$8B, A <- (#$8B)
          brclr 0,RAM1_07c,L0017        ; Branch to L0017 if Bit 0 Clear (Mn = 0) 
          brset 2,RAM1_07c,L07D0        ; Branch to L07D0 if Bit 2 is set at RAM1_07c (Mn=1)
deca 
          bra L07D0                     ; Branch Always (1 = 1)                   
; 
          brclr 2,RAM1_07c,L07D0        ; Branch to L07D0 if Bit 2 Clear (Mn = 0) 
          bra L0014                     ; Branch Always (1 = 1)                   
; 
          brclr 3,RAM1_06a,L0030        ; Branch to L0030 if Bit 3 Clear (Mn = 0) 
          bra L0026                     ; Branch Always (1 = 1)                   
; 
          lda #$8E                      ; Load Accumulator with value of Memory at #$8E, A <- (#$8E)
          brclr 1,RAM1_07c,L0028        ; Branch to L0028 if Bit 1 Clear (Mn = 0) 
          lda #$8F                      ; Load Accumulator with value of Memory at #$8F, A <- (#$8F)
          bclr 3,RAM1_06a               ; Clear bit 3 at RAM1_06a                 
          sta RAM1_07b                  ; Store Accumulator in Memory at RAM1_07b 
          bclr 1,RAM1_06a               ; Clear bit 1 at RAM1_06a                 
          bset 5,RAM1_094               ; Set Bit 5 at memory RAM1_094 (Mn <- 1 ) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L4833: 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          jsr L2573                     ; Jump to Subroutine at L2573             
          lda #$00                      ; Load Accumulator with value of Memory at #$00, A <- (#$00)
          brclr 3,RAM1_07c,L004E        ; Branch to L004E if Bit 3 Clear (Mn = 0) 
          brset 1,RAM1_07c,L005D        ; Branch to L005D if Bit 1 is set at RAM1_07c (Mn=1)
          brclr 3,STACK_0d3,L004E       ; Branch to L004E if Bit 3 Clear (Mn = 0) 
          lda #$01                      ; Load Accumulator with value of Memory at #$01, A <- (#$01)
          bclr 4,STACK_0d3              ; Clear bit 4 at STACK_0d3                
          brset 0,RAM1_07c,L004E        ; Branch to L004E if Bit 0 is set at RAM1_07c (Mn=1)
          lda #$02                      ; Load Accumulator with value of Memory at #$02, A <- (#$02)
          bset 4,STACK_0d3              ; Set Bit 4 at memory STACK_0d3 (Mn <- 1 )
          jsr L24CB                     ; Jump to Subroutine at L24CB             
          bclr 1,RAM1_06a               ; Clear bit 1 at RAM1_06a                 
          brclr 3,STACK_0d3,L0099       ; Branch to L0099 if Bit 3 Clear (Mn = 0) 
          lda STACK_0d3                 ; Load Accumulator with value of Memory at STACK_0d3, A <- (STACK_0d3)
          ldx #$A5                      ; Load Index Register with Memory Byte, X <- (#$A5)
          jmp L38A0                     ; Unconditional Jump to L38A0             
; 
          brclr 5,STACK_0d3,L0063       ; Branch to L0063 if Bit 5 Clear (Mn = 0) 
          brset 1,RAM1_06a,L0099        ; Branch to L0099 if Bit 1 is set at RAM1_06a (Mn=1)
          brclr 0,RAM1_07c,L006F        ; Branch to L006F if Bit 0 Clear (Mn = 0) 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          brset 2,RAM1_07c,L0076        ; Branch to L0076 if Bit 2 is set at RAM1_07c (Mn=1)
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bra L0076                     ; Branch Always (1 = 1)                   
; 
          lda #$03                      ; Load Accumulator with value of Memory at #$03, A <- (#$03)
          brclr 2,RAM1_07c,L0076        ; Branch to L0076 if Bit 2 Clear (Mn = 0) 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          bclr 1,RAM1_06a               ; Clear bit 1 at RAM1_06a                 
          jmp L24DC                     ; Unconditional Jump to L24DC             
; 
L487B: 
          bclr 4,STACK_0cb              ; Clear bit 4 at STACK_0cb                
          clra                          ; Clear byte Accumulator, A <- 0x00       
          brclr 7,STACK_0d3,L0086       ; Branch to L0086 if Bit 7 Clear (Mn = 0) 
          brclr 2,STACK_0d3,L008B       ; Branch to L008B if Bit 2 Clear (Mn = 0) 
          bra L0089                     ; Branch Always (1 = 1)                   
; 
          brclr 3,RAM1_06a,L008B        ; Branch to L008B if Bit 3 Clear (Mn = 0) 
          ora #$10                      ; Logical OR Accumulator with Memory at #$10, A <- (A) || (#$10)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda STACK_0d3                 ; Load Accumulator with value of Memory at STACK_0d3, A <- (STACK_0d3)
          and #$60                      ; Logical AND, A ← (A) && (#$60)        
          brclr 4,RAM1_056,L0096        ; Branch to L0096 if Bit 4 Clear (Mn = 0) 
          and #$40                      ; Logical AND, A ← (A) && (#$40)        
          jsr L250E                     ; Jump to Subroutine at L250E             
          rts                           ; Return from Subroutine                  
; 
L489A: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda X48B4,x                   ; Load Accumulator with value of Memory at X48B4, A <- (X48B4)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X48B3,x                   ; Load Accumulator with value of Memory at X48B3, A <- (X48B3)
          beq L00B2                     ; Branch to L00B2 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L009B                     ; Branch to L009B if Not Equal (Z = 0);   
          ldx X48B2,x                   ; Load Index Register with Memory Byte, X <- (X48B2)
          jsr L47B5,x ;INFO: index jump ; Jump to Subroutine at L47B5             
          bclr 6,RAM1_05d               ; Clear bit 6 at RAM1_05d                 
X48B2: 
          rts                           ; Return from Subroutine                  
; 
X48B3: 
          adc ,x                        ; ADD with CARRY, A ← (A) + () + (C)    
X48B4: 
          inc PLMB,x                    ; Increment Byte PLMB, Byte = Byte + 1    
          bhcc L00BC                    ; Branch to L00BC if half carry bit Clear H=0
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
          brset 4,X0042,L00AF           ; Branch to L00AF if Bit 4 is set at X0042 (Mn=1)
          brset 0,STACK_0ed,L00C2       ; Branch to L00C2 if Bit 0 is set at STACK_0ed (Mn=1)
          jmp ,x ;INFO: index jump      ; Unconditional Jump to                   
; 
          brset 0,STACK_0fd,L00C6       ; Branch to L00C6 if Bit 0 is set at STACK_0fd (Mn=1)
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
          brset 0,STACK_0f1,L00CA       ; Branch to L00CA if Bit 0 is set at STACK_0f1 (Mn=1)
          brclr 2,X0033,L00CA           ; Branch to L00CA if Bit 2 Clear (Mn = 0) 
L48CA: 
          jsr L499F                     ; Jump to Subroutine at L499F             
          bclr 4,PortA                  ; Clear bit SLAVE_CLOCK at PortA          
          bset 4,DDRA                   ; Set Bit SLAVE_CLOCK at memory DDRA (Mn <- 1 )
          bclr 5,PortA                  ; Clear bit SLAVE_DATA at PortA           
          bset 5,DDRA                   ; Set Bit SLAVE_DATA at memory DDRA (Mn <- 1 )
          bclr 3,PortA                  ; Clear bit SLAVE_STATUS at PortA         
          bset 3,DDRA                   ; Set Bit SLAVE_STATUS at memory DDRA (Mn <- 1 )
          jsr L2631                     ; Jump to Subroutine at L2631             
          bclr 3,DDRA                   ; Clear bit SLAVE_STATUS at DDRA          
          rts                           ; Return from Subroutine                  
; 
L48DF: 
          bclr 3,DDRA                   ; Clear bit SLAVE_STATUS at DDRA          
          brclr 5,RAM1_06a,L00E7        ; Branch to L00E7 if Bit 5 Clear (Mn = 0) 
          brclr 3,PortA,L010A           ; Branch to L010A if Bit SLAVE_STATUS Clear (Mn = 0)
          jsr L499F                     ; Jump to Subroutine at L499F             
          bclr 5,PortB                  ; Clear bit RESET_SLAVE at PortB          
          jsr L2631                     ; Jump to Subroutine at L2631             
          bset 5,PortB                  ; Set Bit RESET_SLAVE at memory PortB (Mn <- 1 )
          bset 7,RAM1_094               ; Set Bit 7 at memory RAM1_094 (Mn <- 1 ) 
          bset 0,RAM1_05e               ; Set Bit 0 at memory RAM1_05e (Mn <- 1 ) 
          lda #$05                      ; Load Accumulator with value of Memory at #$05, A <- (#$05)
          sta RAM1_063                  ; Store Accumulator in Memory at RAM1_063 
          jsr L490B                     ; Jump to Subroutine at L490B             
          tst RAM1_094                  ; Test Memory Byte for Negative or Zero, (RAM1_094) – 0x00
          beq L010A                     ; Branch to L010A if Equal Z=1            
          jsr L0785                     ; Jump to Subroutine at L0785             
          jsr L2631                     ; Jump to Subroutine at L2631             
          tst RAM1_063                  ; Test Memory Byte for Negative or Zero, (RAM1_063) – 0x00
          bne L00F9                     ; Branch to L00F9 if Not Equal (Z = 0);   
          rts                           ; Return from Subroutine                  
; 
L490B: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM1_094                  ; Load Accumulator with value of Memory at RAM1_094, A <- (RAM1_094)
          bne L0116                     ; Branch to L0116 if Not Equal (Z = 0);   
          lda RAM1_095                  ; Load Accumulator with value of Memory at RAM1_095, A <- (RAM1_095)
          beq L0152                     ; Branch to L0152 if Equal Z=1            
          ldx #$08                      ; Load Index Register with Memory Byte, X <- (#$08)
          incx                          ; Increment Index register by 1,X++       
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          bcc L0116                     ; Branch to L0116 if C bit is cleared     
          lda X49C8,x                   ; Load Accumulator with value of Memory at X49C8, A <- (X49C8)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          lda X49D1,x                   ; Load Accumulator with value of Memory at X49D1, A <- (X49D1)
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          lda X49D2,x                   ; Load Accumulator with value of Memory at X49D2, A <- (X49D2)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda #$07                      ; Load Accumulator with value of Memory at #$07, A <- (#$07)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          lda X4A09                     ; Load Accumulator with value of Memory at X4A09, A <- (X4A09)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda X4A08                     ; Load Accumulator with value of Memory at X4A08, A <- (X4A08)
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          beq L013B                     ; Branch to L013B if Equal Z=1            
          bset 0,RAM1_059               ; Set Bit 0 at memory RAM1_059 (Mn <- 1 ) 
          jsr L2679                     ; Jump to Subroutine at L2679             
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          jsr L4A14                     ; Jump to Subroutine at L4A14             
          brset 0,RAM1_05e,L0152        ; Branch to L0152 if Bit 0 is set at RAM1_05e (Mn=1)
          brclr 0,RAM1_050,L0161        ; Branch to L0161 if Bit 0 Clear (Mn = 0) 
          ldx #$94                      ; Load Index Register with Memory Byte, X <- (#$94)
          tst ,x                        ; Test Memory Byte for Negative or Zero, () – 0x00
          bne L014F                     ; Branch to L014F if Not Equal (Z = 0);   
          incx                          ; Increment Index register by 1,X++       
          jsr L266E                     ; Jump to Subroutine at L266E             
          bclr 0,RAM1_05e               ; Clear bit 0 at RAM1_05e                 
          rts                           ; Return from Subroutine                  
; 
L4955: 
          brset 5,PortA,L019E           ; Branch to L019E if Bit SLAVE_DATA is set at PortA (Mn=1)
          brset 0,RAM1_05e,L019E        ; Branch to L019E if Bit 0 is set at RAM1_05e (Mn=1)
          jsr L4A78                     ; Jump to Subroutine at L4A78             
          brset 0,RAM1_05e,L019E        ; Branch to L019E if Bit 0 is set at RAM1_05e (Mn=1)
          ldx #$0B                      ; Load Index Register with Memory Byte, X <- (#$0B)
decx 
          bmi L019E                     ; Branch to L019E if Minus N = 1          
          cmp X49E7,x                   ; Compare Accumulator with Memory Byte, (A) - (X49E7)
          bne L0163                     ; Branch to L0163 if Not Equal (Z = 0);   
          stx RAM1_050                  ; Store Index Register In Memory at RAM1_050
          jsr L2695                     ; Jump to Subroutine at L2695             
          stx RAM1_058                  ; Store Index Register In Memory at RAM1_058
          ldx RAM1_050                  ; Load Index Register with Memory Byte, X <- (RAM1_050)
          aslx                          ; Arighmetic Shift Left of Index Register (Same as LSL), C <- [b7 <<<< b0] <- 0
          lda X4A08                     ; Load Accumulator with value of Memory at X4A08, A <- (X4A08)
          sta RAM1_059                  ; Store Accumulator in Memory at RAM1_059 
          lda X4A09                     ; Load Accumulator with value of Memory at X4A09, A <- (X4A09)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X49F3,x                   ; Load Accumulator with value of Memory at X49F3, A <- (X49F3)
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          lda X49F2,x                   ; Load Accumulator with value of Memory at X49F2, A <- (X49F2)
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          beq L018C                     ; Branch to L018C if Equal Z=1            
          bset 0,RAM1_059               ; Set Bit 0 at memory RAM1_059 (Mn <- 1 ) 
          jsr L2679                     ; Jump to Subroutine at L2679             
          lda RAM1_050                  ; Load Accumulator with value of Memory at RAM1_050, A <- (RAM1_050)
          beq L019E                     ; Branch to L019E if Equal Z=1            
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          beq L019C                     ; Branch to L019C if Equal Z=1            
          bhi L019E                     ; Branch to L019E if Higher C v Z = 0     
          bset 3,STACK_0cb              ; Set Bit 3 at memory STACK_0cb (Mn <- 1 )
          cmp X18CB                     ; Compare Accumulator with Memory Byte, (A) - (X18CB)
          rts                           ; Return from Subroutine                  
; 
L499F: 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          ldx #$07                      ; Load Index Register with Memory Byte, X <- (#$07)
          sta RAM2_0260,x               ; Store Accumulator in Memory at RAM2_0260
decx 
          bne L01A2                     ; Branch to L01A2 if Not Equal (Z = 0);   
          lda #$80                      ; Load Accumulator with value of Memory at #$80, A <- (#$80)
          sta RAM2_0260                 ; Store Accumulator in Memory at RAM2_0260
          clr RAM1_06a                  ; Clear byte at RAM1_06a <- 0x00          
          lda RAM1_07c                  ; Load Accumulator with value of Memory at RAM1_07c, A <- (RAM1_07c)
          and #$40                      ; Logical AND, A ← (A) && (#$40)        
          ora #$A0                      ; Logical OR Accumulator with Memory at #$A0, A <- (A) || (#$A0)
          sta RAM1_07c                  ; Store Accumulator in Memory at RAM1_07c 
          brset 5,RAM1_069,L01C0        ; Branch to L01C0 if Bit 5 is set at RAM1_069 (Mn=1)
          bset 2,RAM1_069               ; Set Bit 2 at memory RAM1_069 (Mn <- 1 ) 
          bset 6,RAM1_07c               ; Set Bit 6 at memory RAM1_07c (Mn <- 1 ) 
          bset 6,RAM1_06a               ; Set Bit 6 at memory RAM1_06a (Mn <- 1 ) 
          clr RAM1_092                  ; Clear byte at RAM1_092 <- 0x00          
          clr RAM1_091                  ; Clear byte at RAM1_091 <- 0x00          
          clr RAM1_094                  ; Clear byte at RAM1_094 <- 0x00          
          clr RAM1_095                  ; Clear byte at RAM1_095 <- 0x00          
X49C8: 
          rts                           ; Return from Subroutine                  
; 
          brset 5,PortC,L01D0           ; Branch to L01D0 if Bit D1-SP is set at PortC (Mn=1)
          sbc #$82                      ; Subtract Memory Byte #$82 and Carry Bit from Accumulator, A ←  (A) – (#$82) – (C)
          and #$08                      ; Logical AND, A ← (A) && (#$08)        
          brset 6,RAM1_0a6,L01E1        ; Branch to L01E1 if Bit 6 is set at RAM1_0a6 (Mn=1)
          brset 0,STACK_0ce,L01D6       ; Branch to L01D6 if Bit 0 is set at STACK_0ce (Mn=1)
          tst ,x                        ; Test Memory Byte for Negative or Zero, () – 0x00
          brset 0,RAM1_07b,L01DC        ; Branch to L01DC if Bit 0 is set at RAM1_07b (Mn=1)
          eor PortA                     ; "EXCLUSIVE OR" Accumulator with Memory Byte, (A) X (PortA)
          sta PortC                     ; Store Accumulator in Memory at PortC    
          rti                           ; Return from Interrupt                   
; 
          brset 0,STACK_0d5,L01E2       ; Branch to L01E2 if Bit 0 is set at STACK_0d5 (Mn=1)
          ldx RAM2_02b0                 ; Load Index Register with Memory Byte, X <- (RAM2_02b0)
          brset 0,RAM1_06b,L022E        ; Branch to L022E if Bit 0 is set at RAM1_06b (Mn=1)
          sbc XD4D6,x                   ; Subtract Memory Byte XD4D6 and Carry Bit from Accumulator, A ←  (A) – (XD4D6) – (C)
          sbc X0048,x                   ; Subtract Memory Byte X0048 and Carry Bit from Accumulator, A ←  (A) – (X0048) – (C)
          lda X0044,x                   ; Load Accumulator with value of Memory at X0044, A <- (X0044)
          and STACK_0e8,x               ; Logical AND, A ← (A) && (STACK_0e8)   
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
X49F2: 
          brset 0,RAM1_06a,L01F7        ; Branch to L01F7 if Bit 0 is set at RAM1_06a (Mn=1)
; 
          db $61                        ; data? a,  ,  ,                          
; 
          brset 1,RAM1_060,L01FB        ; Branch to L01FB if Bit 1 is set at RAM1_060 (Mn=1)
          lsr PortC,x                   ; Logical Shift Right of PortC, b7 -> [b7 >>>> b0] -> C
          neg PortA,x                   ; Negate Byte of PortA (Two’s Complement), PortA = 0x00 - (PortA)
          inc ,x                        ; Increment Byte , Byte = Byte + 1        
          brset 1,RAM1_0b8,L0201        ; Branch to L0201 if Bit 1 is set at RAM1_0b8 (Mn=1)
; 
          db $91                        ; data?  ,  ,  ,                          
; 
          brset 0,RAM1_0a3,L0207        ; Branch to L0207 if Bit 0 is set at RAM1_0a3 (Mn=1)
          sub PortA                     ; Subtract Memory Byte from Accumulator , A ← (A) – (PortA)
; 
          db $92                        ; data?  ,  ,  ,                          
; 
X4A08: 
          brset 1,RAM1_068,L020D        ; Branch to L020D if Bit 1 is set at RAM1_068 (Mn=1)
; 
          db $5E                        ; data? ^,  ,  ,                          
; 
          brset 3,TCH,L0213             ; Branch to L0213 if Bit 3 is set at TCH (Mn=1)
          bclr 4,PortA                  ; Clear bit SLAVE_CLOCK at PortA          
          bset 1,RAM1_05e               ; Set Bit 1 at memory RAM1_05e (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L4A14: 
          sta RAM1_057                  ; Store Accumulator in Memory at RAM1_057 
          jsr L2695                     ; Jump to Subroutine at L2695             
          stx RAM1_059                  ; Store Index Register In Memory at RAM1_059
          bset 1,RAM1_05e               ; Set Bit 1 at memory RAM1_05e (Mn <- 1 ) 
          ldx #$0C                      ; Load Index Register with Memory Byte, X <- (#$0C)
          brclr 4,PortA,L026E           ; Branch to L026E if Bit SLAVE_CLOCK Clear (Mn = 0)
decx 
          bne L021F                     ; Branch to L021F if Not Equal (Z = 0);   
          bclr 2,RAM1_050               ; Clear bit 2 at RAM1_050                 
          bset 0,RAM1_050               ; Set Bit 0 at memory RAM1_050 (Mn <- 1 ) 
          brclr 5,PortA,L0278           ; Branch to L0278 if Bit SLAVE_DATA Clear (Mn = 0)
          jsr L4B09                     ; Jump to Subroutine at L4B09             
          lda #$C8                      ; Load Accumulator with value of Memory at #$C8, A <- (#$C8)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          jsr L4AF3                     ; Jump to Subroutine at L4AF3             
          brclr 0,RAM1_05e,L023E        ; Branch to L023E if Bit 0 Clear (Mn = 0) 
          bclr 0,RAM1_05e               ; Clear bit 0 at RAM1_05e                 
          jsr L4AFC                     ; Jump to Subroutine at L4AFC             
          jsr L4AFC                     ; Jump to Subroutine at L4AFC             
          brclr 5,PortA,L0278           ; Branch to L0278 if Bit SLAVE_DATA Clear (Mn = 0)
          clr RAM1_051                  ; Clear byte at RAM1_051 <- 0x00          
          lda #$AA                      ; Load Accumulator with value of Memory at #$AA, A <- (#$AA)
          jsr L4B2A                     ; Jump to Subroutine at L4B2A             
          lda RAM1_057                  ; Load Accumulator with value of Memory at RAM1_057, A <- (RAM1_057)
          jsr L4B2A                     ; Jump to Subroutine at L4B2A             
          jsr L4AB8                     ; Jump to Subroutine at L4AB8             
          lda RAM1_051                  ; Load Accumulator with value of Memory at RAM1_051, A <- (RAM1_051)
          jsr L4B2A                     ; Jump to Subroutine at L4B2A             
          jsr L4AFE                     ; Jump to Subroutine at L4AFE             
          jsr L4B09                     ; Jump to Subroutine at L4B09             
          jsr L4ACA                     ; Jump to Subroutine at L4ACA             
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          jsr L4B25                     ; Jump to Subroutine at L4B25             
          cmp X105E                     ; Compare Accumulator with Memory Byte, (A) - (X105E)
          bclr 1,RAM1_05e               ; Clear bit 1 at RAM1_05e                 
          bclr 5,DDRA                   ; Clear bit SLAVE_DATA at DDRA            
          bclr 4,DDRA                   ; Clear bit SLAVE_CLOCK at DDRA           
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
L4A78: 
          jsr L4AFE                     ; Jump to Subroutine at L4AFE             
          ldx #$50                      ; Load Index Register with Memory Byte, X <- (#$50)
decx 
          bne L027D                     ; Branch to L027D if Not Equal (Z = 0);   
          clr RAM1_059                  ; Clear byte at RAM1_059 <- 0x00          
          bclr 0,RAM1_050               ; Clear bit 0 at RAM1_050                 
          bclr 0,RAM1_05e               ; Clear bit 0 at RAM1_05e                 
          bclr 2,RAM1_050               ; Clear bit 2 at RAM1_050                 
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          lda #$56                      ; Load Accumulator with value of Memory at #$56, A <- (#$56)
          jsr L4B28                     ; Jump to Subroutine at L4B28             
          bset 2,RAM1_059               ; Set Bit 2 at memory RAM1_059 (Mn <- 1 ) 
          lda #$56                      ; Load Accumulator with value of Memory at #$56, A <- (#$56)
          jsr L4B28                     ; Jump to Subroutine at L4B28             
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM1_058                  ; Store Accumulator in Memory at RAM1_058 
          jsr L2695                     ; Jump to Subroutine at L2695             
          stx RAM1_059                  ; Store Index Register In Memory at RAM1_059
          inc RAM1_059                  ; Increment Byte RAM1_059, Byte = Byte + 1
          bclr 2,RAM1_050               ; Clear bit 2 at RAM1_050                 
          bsr L02B8                     ; Branch to Subroutine at L02B8           
          bsr L02C4                     ; Branch to Subroutine at L02C4           
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bmi L02AF                     ; Branch to L02AF if Minus N = 1          
          brclr 5,PortA,L02A8           ; Branch to L02A8 if Bit SLAVE_DATA Clear (Mn = 0)
          brclr 2,RAM1_050,L026E        ; Branch to L026E if Bit 2 Clear (Mn = 0) 
          bclr 0,RAM1_05e               ; Clear bit 0 at RAM1_05e                 
          lda RAM1_058                  ; Load Accumulator with value of Memory at RAM1_058, A <- (RAM1_058)
          bra L0270                     ; Branch Always (1 = 1)                   
; 
L4AB8: 
          clrx                          ; Clear Index Register, X <- 0x00         
          lda RAM2_0268,x               ; Load Accumulator with value of Memory at RAM2_0268, A <- (RAM2_0268)
          bsr L032C                     ; Branch to Subroutine at L032C           
          incx                          ; Increment Index register by 1,X++       
          dec RAM1_059                  ; Decrement Byte at RAM1_059 Byte = Byte - 1
          bpl L02B9                     ; Branch to L02B9 if Plus N = 0           
          rts                           ; Return from Subroutine                  
; 
L4AC4: 
          brset 0,RAM1_05e,L0325        ; Branch to L0325 if Bit 0 is set at RAM1_05e (Mn=1)
          brclr 0,RAM1_050,L02CD        ; Branch to L02CD if Bit 0 Clear (Mn = 0) 
L4ACA: 
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          sei                           ; Set Interrupt Mask, I ← 1);           
          bclr 4,DDRA                   ; Clear bit SLAVE_CLOCK at DDRA           
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          bset 7,RAM1_056               ; Set Bit 7 at memory RAM1_056 (Mn <- 1 ) 
          brset 4,PortA,L02E3           ; Branch to L02E3 if Bit SLAVE_CLOCK is set at PortA (Mn=1)
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bpl L02D4                     ; Branch to L02D4 if Plus N = 0           
          bset 0,RAM1_05e               ; Set Bit 0 at memory RAM1_05e (Mn <- 1 ) 
          jmp L04C4                     ; Unconditional Jump to L04C4             
; 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          bset 0,RAM1_05e               ; Set Bit 0 at memory RAM1_05e (Mn <- 1 ) 
L4AE3: 
          rts                           ; Return from Subroutine                  
; 
L4AE4: 
          brset 0,RAM1_05e,L0325        ; Branch to L0325 if Bit 0 is set at RAM1_05e (Mn=1)
          brclr 0,RAM1_050,L02EF        ; Branch to L02EF if Bit 0 Clear (Mn = 0) 
          jsr L4AE3                     ; Jump to Subroutine at L4AE3             
          bra L02FE                     ; Branch Always (1 = 1)                   
; 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          bset 4,RAM1_056               ; Set Bit 4 at memory RAM1_056 (Mn <- 1 ) 
L4AF3: 
          brclr 4,PortA,L02FC           ; Branch to L02FC if Bit SLAVE_CLOCK Clear (Mn = 0)
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bne L02F3                     ; Branch to L02F3 if Not Equal (Z = 0);   
          bra L02DB                     ; Branch Always (1 = 1)                   
; 
L4AFC: 
          bclr 5,DDRA                   ; Clear bit SLAVE_DATA at DDRA            
L4AFE: 
          bclr 4,PortA                  ; Clear bit SLAVE_CLOCK at PortA          
          bset 4,DDRA                   ; Set Bit SLAVE_CLOCK at memory DDRA (Mn <- 1 )
          bclr 4,PortA                  ; Clear bit SLAVE_CLOCK at PortA          
          cli                           ; Clear Interrupt Mask (I <- 0)           
          rts                           ; Return from Subroutine                  
; 
          brset 0,RAM1_05e,L0325        ; Branch to L0325 if Bit 0 is set at RAM1_05e (Mn=1)
L4B09: 
          bclr 5,PortA                  ; Clear bit SLAVE_DATA at PortA           
          bset 5,DDRA                   ; Set Bit SLAVE_DATA at memory DDRA (Mn <- 1 )
          bclr 5,PortA                  ; Clear bit SLAVE_DATA at PortA           
          rts                           ; Return from Subroutine                  
; 
          brclr 0,RAM1_050,L0325        ; Branch to L0325 if Bit 0 Clear (Mn = 0) 
          tsta                          ; Test Accumulator for Negative or Zero, (tsta) – 0x00
          bpl L0306                     ; Branch to L0306 if Plus N = 0           
          bclr 5,DDRA                   ; Clear bit SLAVE_DATA at DDRA            
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          bset 4,RAM1_056               ; Set Bit 4 at memory RAM1_056 (Mn <- 1 ) 
          brset 5,PortA,L0327           ; Branch to L0327 if Bit SLAVE_DATA is set at PortA (Mn=1)
          dec RAM1_056                  ; Decrement Byte at RAM1_056 Byte = Byte - 1
          bpl L031C                     ; Branch to L031C if Plus N = 0           
          bra L02DB                     ; Branch Always (1 = 1)                   
; 
L4B25: 
          bclr 5,DDRA                   ; Clear bit SLAVE_DATA at DDRA            
          rts                           ; Return from Subroutine                  
; 
L4B28: 
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
L4B2A: 
          ldx #$09                      ; Load Index Register with Memory Byte, X <- (#$09)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          clr RAM1_05a                  ; Clear byte at RAM1_05a <- 0x00          
          bset 3,RAM1_05a               ; Set Bit 3 at memory RAM1_05a (Mn <- 1 ) 
          bsr L0310                     ; Branch to Subroutine at L0310           
          bsr L02C4                     ; Branch to Subroutine at L02C4           
          brset 5,PortA,L0339           ; Branch to L0339 if Bit SLAVE_DATA is set at PortA (Mn=1)
          rola                          ; Rotate Accumulator Left through Carry Bit, C <- [b7 <<<< b0] <- C
          bsr L02E4                     ; Branch to Subroutine at L02E4           
          dec RAM1_05a                  ; Decrement Byte at RAM1_05a Byte = Byte - 1
          bne L0332                     ; Branch to L0332 if Not Equal (Z = 0);   
          brset 0,RAM1_050,L035C        ; Branch to L035C if Bit 0 is set at RAM1_050 (Mn=1)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          tst RAM1_059                  ; Test Memory Byte for Negative or Zero, (RAM1_059) – 0x00
          bne L0352                     ; Branch to L0352 if Not Equal (Z = 0);   
          ldx #$51                      ; Load Index Register with Memory Byte, X <- (#$51)
          cmp ,x                        ; Compare Accumulator with Memory Byte, (A) - ()
          bne L0364                     ; Branch to L0364 if Not Equal (Z = 0);   
          bset 2,RAM1_050               ; Set Bit 2 at memory RAM1_050 (Mn <- 1 ) 
          bra L0355                     ; Branch Always (1 = 1)                   
; 
          sta RAM2_0268,x               ; Store Accumulator in Memory at RAM2_0268
          bsr L0306                     ; Branch to Subroutine at L0306           
          jsr L4AC4                     ; Jump to Subroutine at L4AC4             
          bra L0367                     ; Branch Always (1 = 1)                   
; 
          bclr 5,DDRA                   ; Clear bit SLAVE_DATA at DDRA            
          jsr L4AC4                     ; Jump to Subroutine at L4AC4             
          brclr 5,PortA,L0367           ; Branch to L0367 if Bit SLAVE_DATA Clear (Mn = 0)
          bset 0,RAM1_05e               ; Set Bit 0 at memory RAM1_05e (Mn <- 1 ) 
          cli                           ; Clear Interrupt Mask (I <- 0)           
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          add RAM1_051                  ; Add without Carry, A ← (A) + (RAM1_051)
          bhcc L036F                    ; Branch to L036F if half carry bit Clear H=0
          sub #$10                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$10)
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          jsr L4AE4                     ; Jump to Subroutine at L4AE4             
          bra L0310                     ; Branch Always (1 = 1)                   
; 
L4B76: 
          brset 2,RAM1_08b,L03B3        ; Branch to L03B3 if Bit 2 is set at RAM1_08b (Mn=1)
          brclr 6,RAM1_05d,L03B3        ; Branch to L03B3 if Bit 6 Clear (Mn = 0) 
          jmp L4C26                     ; Unconditional Jump to L4C26             
; 
L4B7F: 
          bclr 4,RAM1_0ba               ; Clear bit 4 at RAM1_0ba                 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          lda #$70                      ; Load Accumulator with value of Memory at #$70, A <- (#$70)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          rts                           ; Return from Subroutine                  
; 
          brset 7,STACK_0ce,L03B4       ; Branch to L03B4 if Bit 7 is set at STACK_0ce (Mn=1)
          brclr 3,RAM1_08b,L0393        ; Branch to L0393 if Bit 3 Clear (Mn = 0) 
          brclr 7,RAM1_08b,L03AC        ; Branch to L03AC if Bit 7 Clear (Mn = 0) 
          bclr 3,RAM1_08b               ; Clear bit 3 at RAM1_08b                 
          bset 4,RAM1_0b3               ; Set Bit 4 at memory RAM1_0b3 (Mn <- 1 ) 
          clr STACK_0ce                 ; Clear byte at STACK_0ce <- 0x00         
          bset 7,STACK_0ce              ; Set Bit 7 at memory STACK_0ce (Mn <- 1 )
          inc RAM1_08b                  ; Increment Byte RAM1_08b, Byte = Byte + 1
          bclr 2,RAM1_08b               ; Clear bit 2 at RAM1_08b                 
          lda #$10                      ; Load Accumulator with value of Memory at #$10, A <- (#$10)
          sta RAM2_029e                 ; Store Accumulator in Memory at RAM2_029e
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM2_029f                 ; Store Accumulator in Memory at RAM2_029f
          lda #$0C                      ; Load Accumulator with value of Memory at #$0C, A <- (#$0C)
          brclr 7,RAM1_08b,L03FA        ; Branch to L03FA if Bit 7 Clear (Mn = 0) 
          cmp XA60B                     ; Compare Accumulator with Memory Byte, (A) - (XA60B)
          bset 1,STACK_0cb              ; Set Bit 1 at memory STACK_0cb (Mn <- 1 )
          jsr L24E5                     ; Jump to Subroutine at L24E5             
          rts                           ; Return from Subroutine                  
; 
          bclr 7,STACK_0ce              ; Clear bit 7 at STACK_0ce                
          ldx RAM2_029e                 ; Load Index Register with Memory Byte, X <- (RAM2_029e)
cpx SEC_CODE1 
          bne L03CD                     ; Branch to L03CD if Not Equal (Z = 0);   
          lda RAM2_029f                 ; Load Accumulator with value of Memory at RAM2_029f, A <- (RAM2_029f)
          cmp SEC_CODE2                 ; Compare Accumulator with Memory Byte, (A) - (SEC_CODE2)
          bne L03CD                     ; Branch to L03CD if Not Equal (Z = 0);   
          stx RAM1_08c                  ; Store Index Register In Memory at RAM1_08c
          sta RAM1_08d                  ; Store Accumulator in Memory at RAM1_08d 
          jmp L375F                     ; Unconditional Jump to L375F             
; 
          brset 7,RAM1_08b,L0393        ; Branch to L0393 if Bit 7 is set at RAM1_08b (Mn=1)
          jmp L3757                     ; Unconditional Jump to L3757             
; 
          clrx                          ; Clear Index Register, X <- 0x00         
          cmp XAE01                     ; Compare Accumulator with Memory Byte, (A) - (XAE01)
          lda #$70                      ; Load Accumulator with value of Memory at #$70, A <- (#$70)
          add RAM2_029e,x               ; Add without Carry, A ← (A) + (RAM2_029e)
          bcs L03EF                     ; Branch to L03EF if C = 1                
          add #$A0                      ; Add without Carry, A ← (A) + (#$A0)   
          bra L03EF                     ; Branch Always (1 = 1)                   
; 
          clrx                          ; Clear Index Register, X <- 0x00         
          cmp XAE01                     ; Compare Accumulator with Memory Byte, (A) - (XAE01)
          lda #$F7                      ; Load Accumulator with value of Memory at #$F7, A <- (#$F7)
          add RAM2_029e,x               ; Add without Carry, A ← (A) + (RAM2_029e)
          bhcs L03EF                    ; Branch to L03EF if Half-Carry Bit is Set, H=1
          add #$0A                      ; Add without Carry, A ← (A) + (#$0A)   
          sta RAM2_029e,x               ; Store Accumulator in Memory at RAM2_029e
          lda #$50                      ; Load Accumulator with value of Memory at #$50, A <- (#$50)
          sta RAM1_077                  ; Store Accumulator in Memory at RAM1_077 
          bset 2,STACK_0cb              ; Set Bit 2 at memory STACK_0cb (Mn <- 1 )
          bclr 1,STACK_0cb              ; Clear bit 1 at STACK_0cb                
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
L4BFD: 
          lda #$0B                      ; Load Accumulator with value of Memory at #$0B, A <- (#$0B)
          brset 7,STACK_0ce,L0405       ; Branch to L0405 if Bit 7 is set at STACK_0ce (Mn=1)
          brclr 3,RAM1_08b,L040B        ; Branch to L040B if Bit 3 Clear (Mn = 0) 
          lda #$C6                      ; Load Accumulator with value of Memory at #$C6, A <- (#$C6)
          jsr L24CB                     ; Jump to Subroutine at L24CB             
          rts                           ; Return from Subroutine                  
; 
          jsr L24E5                     ; Jump to Subroutine at L24E5             
          rts                           ; Return from Subroutine                  
; 
L4C0F: 
          brset 3,RAM1_08b,L041E        ; Branch to L041E if Bit 3 is set at RAM1_08b (Mn=1)
          brset 7,RAM1_08b,L041E        ; Branch to L041E if Bit 7 is set at RAM1_08b (Mn=1)
          lda #$20                      ; Load Accumulator with value of Memory at #$20, A <- (#$20)
          brset 1,RAM1_08b,L041F        ; Branch to L041F if Bit 1 is set at RAM1_08b (Mn=1)
          asla                          ; Arighmetic Shift Left of accumualator (Same as LSL), C <- [b7 <<<< b0] <- 0
          brset 0,RAM1_08b,L041F        ; Branch to L041F if Bit 0 is set at RAM1_08b (Mn=1)
          clra                          ; Clear byte Accumulator, A <- 0x00       
          clrx                          ; Clear Index Register, X <- 0x00         
          jsr L24F5                     ; Jump to Subroutine at L24F5             
          jmp L2505                     ; Unconditional Jump to L2505             
; 
L4C26: 
          clrx                          ; Clear Index Register, X <- 0x00         
          brset 7,STACK_0ce,L042C       ; Branch to L042C if Bit 7 is set at STACK_0ce (Mn=1)
          ldx #$10                      ; Load Index Register with Memory Byte, X <- (#$10)
          lda X4C43,x                   ; Load Accumulator with value of Memory at X4C43, A <- (X4C43)
          sta RAM1_056                  ; Store Accumulator in Memory at RAM1_056 
          lda X4C42,x                   ; Load Accumulator with value of Memory at X4C42, A <- (X4C42)
          beq L0441                     ; Branch to L0441 if Equal Z=1            
          jsr L2889                     ; Jump to Subroutine at L2889             
          bne L042C                     ; Branch to L042C if Not Equal (Z = 0);   
          ldx X4C41,x                   ; Load Index Register with Memory Byte, X <- (X4C41)
          jsr L4B7F,x ;INFO: index jump ; Jump to Subroutine at L4B7F             
X4C41: 
          rts                           ; Return from Subroutine                  
; 
X4C42: 
          cmp RAM1_054,x                ; Compare Accumulator with Memory Byte, (A) - (RAM1_054)
; 
          db $41                        ; data? A,  ,  ,                          
; 
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          sbc RAM1_063,x                ; Subtract Memory Byte RAM1_063 and Carry Bit from Accumulator, A ←  (A) – (RAM1_063) – (C)
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
          com STACK_0e3,x               ; Complement Byte (One’s Complement), 0xFF - STACK_0e3
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          coma                          ; Complement Accumulator (One’s Complement), 0xFF - A
          rorx                          ; Rotate Index Register Right through Carry Bit, C -> [b7 >>>> b0] -> C
          and RAM1_065,x                ; Logical AND, A ← (A) && (RAM1_065)    
          lsra                          ; Logical Shift Left of Accumulator (Same as ASL), b7 -> [b7 >>>> b0] -> C
; 
          db $65                        ; data? e,  ,  ,                          
; 
          ldx ,x                        ; Load Index Register with Memory Byte, X <- ()
          brset 0,RAM1_07e,L045F        ; Branch to L045F if Bit 0 is set at RAM1_07e (Mn=1)
          brset 0,SCCR1,L03EF           ; Branch to L03EF if Bit LBCL is set at SCCR1 (Mn=1)
          brset 6,RAM1_0b6,L0479        ; Branch to L0479 if Bit 6 is set at RAM1_0b6 (Mn=1)
          sub RAM1_097                  ; Subtract Memory Byte from Accumulator , A ← (A) – (RAM1_097)
          sta RAM1_099                  ; Store Accumulator in Memory at RAM1_099 
          lda ICH2                      ; Load Accumulator with value of Memory at ICH2, A <- (ICH2)
          sbc RAM1_096                  ; Subtract Memory Byte RAM1_096 and Carry Bit from Accumulator, A ←  (A) – (RAM1_096) – (C)
          sta RAM1_098                  ; Store Accumulator in Memory at RAM1_098 
          bclr 7,RAM1_096               ; Clear bit 7 at RAM1_096                 
          bset 3,RAM1_05e               ; Set Bit 3 at memory RAM1_05e (Mn <- 1 ) 
          lda ICH2                      ; Load Accumulator with value of Memory at ICH2, A <- (ICH2)
          sta RAM1_096                  ; Store Accumulator in Memory at RAM1_096 
          lda ICL2                      ; Load Accumulator with value of Memory at ICL2, A <- (ICL2)
          sta RAM1_097                  ; Store Accumulator in Memory at RAM1_097 
          rts                           ; Return from Subroutine                  
; 
L4C73: 
          lda #$40                      ; Load Accumulator with value of Memory at #$40, A <- (#$40)
          brclr 3,RAM1_05e,L0464        ; Branch to L0464 if Bit 3 Clear (Mn = 0) 
          bclr 3,RAM1_05e               ; Clear bit 3 at RAM1_05e                 
          rts                           ; Return from Subroutine                  
; 
L4C7B: 
          tst RAM1_098                  ; Test Memory Byte for Negative or Zero, (RAM1_098) – 0x00
          beq L04B3                     ; Branch to L04B3 if Equal Z=1            
          lsr RAM1_098                  ; Logical Shift Right of RAM1_098, b7 -> [b7 >>>> b0] -> C
          ror RAM1_099                  ; Rotate Byte at RAM1_099 Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsr RAM1_098                  ; Logical Shift Right of RAM1_098, b7 -> [b7 >>>> b0] -> C
          ror RAM1_099                  ; Rotate Byte at RAM1_099 Right through Carry Bit, C -> [b7 >>>> b0] -> C
          ldx RAM1_09a                  ; Load Index Register with Memory Byte, X <- (RAM1_09a)
          lda RAM1_09b                  ; Load Accumulator with value of Memory at RAM1_09b, A <- (RAM1_09b)
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          lsrx                          ; Logical Shift Left of Index register (Same as ASL),  b7 -> [b7 >>>> b0] -> C
          rora                          ; Rotate Accumulator Right through Carry Bit, C -> [b7 >>>> b0] -> C
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add RAM1_09b                  ; Add without Carry, A ← (A) + (RAM1_09b)
          sta RAM1_09b                  ; Store Accumulator in Memory at RAM1_09b 
          txa                           ; Transfer Index Register to Accumulator, A ← (X)
          bcs L049C                     ; Branch to L049C if C = 1                
          inca                          ; Increment Accumulator by 1,A++          
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          add RAM1_09a                  ; Add without Carry, A ← (A) + (RAM1_09a)
          sta RAM1_09a                  ; Store Accumulator in Memory at RAM1_09a 
          lda RAM1_09b                  ; Load Accumulator with value of Memory at RAM1_09b, A <- (RAM1_09b)
          add RAM1_099                  ; Add without Carry, A ← (A) + (RAM1_099)
          sta RAM1_09b                  ; Store Accumulator in Memory at RAM1_09b 
          lda RAM1_09a                  ; Load Accumulator with value of Memory at RAM1_09a, A <- (RAM1_09a)
          adc RAM1_098                  ; ADD with CARRY, A ← (A) + (RAM1_098) + (C) 
          bcc L04AF                     ; Branch to L04AF if C bit is cleared     
          lda #$FF                      ; Load Accumulator with value of Memory at #$FF, A <- (#$FF)
          sta RAM1_09a                  ; Store Accumulator in Memory at RAM1_09a 
          clr RAM1_098                  ; Clear byte at RAM1_098 <- 0x00          
          rts                           ; Return from Subroutine                  
; 
L4CB4: 
          ldx #$AA                      ; Load Index Register with Memory Byte, X <- (#$AA)
          jsr L38CC                     ; Jump to Subroutine at L38CC             
          beq L050C                     ; Branch to L050C if Equal Z=1            
          cmp #$05                      ; Compare Accumulator with Memory Byte, (A) - (#$05)
          bhi L050C                     ; Branch to L050C if Higher C v Z = 0     
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
decx 
          bclr 6,RAM1_081               ; Clear bit 6 at RAM1_081                 
          lda #$12                      ; Load Accumulator with value of Memory at #$12, A <- (#$12)
          mul                           ; Unsigned Multiply, X:A <- (X) * (A)     
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          lda RAM1_09a                  ; Load Accumulator with value of Memory at RAM1_09a, A <- (RAM1_09a)
          sta RAM1_09c                  ; Store Accumulator in Memory at RAM1_09c 
          lda RAM1_09b                  ; Load Accumulator with value of Memory at RAM1_09b, A <- (RAM1_09b)
          sta RAM1_09d                  ; Store Accumulator in Memory at RAM1_09d 
          clr RAM1_056                  ; Clear byte at RAM1_056 <- 0x00          
          lda RAM1_09a                  ; Load Accumulator with value of Memory at RAM1_09a, A <- (RAM1_09a)
          cmp X4D6C,x                   ; Compare Accumulator with Memory Byte, (A) - (X4D6C)
          bhi L04E7                     ; Branch to L04E7 if Higher C v Z = 0     
          bne L04E1                     ; Branch to L04E1 if Not Equal (Z = 0);   
          lda RAM1_09b                  ; Load Accumulator with value of Memory at RAM1_09b, A <- (RAM1_09b)
          cmp X4D6D,x                   ; Compare Accumulator with Memory Byte, (A) - (X4D6D)
          bcc L04E7                     ; Branch to L04E7 if C bit is cleared     
          inc RAM1_056                  ; Increment Byte RAM1_056, Byte = Byte + 1
          incx                          ; Increment Index register by 1,X++       
          incx                          ; Increment Index register by 1,X++       
          bra L04D1                     ; Branch Always (1 = 1)                   
; 
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          cmp RAM1_084                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_084)
          bcc L04FF                     ; Branch to L04FF if C bit is cleared     
          lda RAM1_09c                  ; Load Accumulator with value of Memory at RAM1_09c, A <- (RAM1_09c)
          cmp X4DC6,x                   ; Compare Accumulator with Memory Byte, (A) - (X4DC6)
          bhi L04FF                     ; Branch to L04FF if Higher C v Z = 0     
          bne L04FD                     ; Branch to L04FD if Not Equal (Z = 0);   
          lda RAM1_09d                  ; Load Accumulator with value of Memory at RAM1_09d, A <- (RAM1_09d)
          cmp X4DC7,x                   ; Compare Accumulator with Memory Byte, (A) - (X4DC7)
          bcc L04FF                     ; Branch to L04FF if C bit is cleared     
          inc RAM1_056                  ; Increment Byte RAM1_056, Byte = Byte + 1
          lda RAM1_056                  ; Load Accumulator with value of Memory at RAM1_056, A <- (RAM1_056)
          cmp RAM1_084                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_084)
          beq L050C                     ; Branch to L050C if Equal Z=1            
          sta RAM1_084                  ; Store Accumulator in Memory at RAM1_084 
          brclr 5,STACK_0ce,L050C       ; Branch to L050C if Bit 5 Clear (Mn = 0) 
          bset 7,RAM1_05d               ; Set Bit 7 at memory RAM1_05d (Mn <- 1 ) 
          rts                           ; Return from Subroutine                  
; 
          clra                          ; Clear byte Accumulator, A <- 0x00       
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          sta RAM1_053                  ; Store Accumulator in Memory at RAM1_053 
          lda #$04                      ; Load Accumulator with value of Memory at #$04, A <- (#$04)
          sta RAM1_052                  ; Store Accumulator in Memory at RAM1_052 
          inc RAM1_053                  ; Increment Byte RAM1_053, Byte = Byte + 1
          bne L051F                     ; Branch to L051F if Not Equal (Z = 0);   
          inc RAM1_052                  ; Increment Byte RAM1_052, Byte = Byte + 1
          brset 6,RAM1_052,L0530        ; Branch to L0530 if Bit 6 is set at RAM1_052 (Mn=1)
          bsr L054E                     ; Branch to Subroutine at L054E           
          beq L0516                     ; Branch to L0516 if Equal Z=1            
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM2_02c0,x               ; Store Accumulator in Memory at RAM2_02c0
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          sta RAM2_02d0,x               ; Store Accumulator in Memory at RAM2_02d0
          tstx                          ; Test Index Register for Negative or Zero, (tstx) – 0x00
          bne L0516                     ; Branch to L0516 if Not Equal (Z = 0);   
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          add #$FF                      ; Add without Carry, A ← (A) + (#$FF)   
          sta RAM1_053                  ; Store Accumulator in Memory at RAM1_053 
          bcs L053E                     ; Branch to L053E if C = 1                
          dec RAM1_052                  ; Decrement Byte at RAM1_052 Byte = Byte - 1
          bpl L053E                     ; Branch to L053E if Plus N = 0           
          bra L0516                     ; Branch Always (1 = 1)                   
; 
          bsr L054E                     ; Branch to Subroutine at L054E           
          beq L0530                     ; Branch to L0530 if Equal Z=1            
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM2_02e0,x               ; Store Accumulator in Memory at RAM2_02e0
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          sta RAM2_02f0,x               ; Store Accumulator in Memory at RAM2_02f0
          bra L0530                     ; Branch Always (1 = 1)                   
; 
          lda #$50                      ; Load Accumulator with value of Memory at #$50, A <- (#$50)
          sta RAM1_050                  ; Store Accumulator in Memory at RAM1_050 
          lda RAM1_084                  ; Load Accumulator with value of Memory at RAM1_084, A <- (RAM1_084)
          sta RAM1_051                  ; Store Accumulator in Memory at RAM1_051 
          lda RAM1_052                  ; Load Accumulator with value of Memory at RAM1_052, A <- (RAM1_052)
          sta RAM1_098                  ; Store Accumulator in Memory at RAM1_098 
          lda RAM1_053                  ; Load Accumulator with value of Memory at RAM1_053, A <- (RAM1_053)
          sta RAM1_099                  ; Store Accumulator in Memory at RAM1_099 
          jsr L4C7B                     ; Jump to Subroutine at L4C7B             
          dec RAM1_050                  ; Decrement Byte at RAM1_050 Byte = Byte - 1
          bne L0556                     ; Branch to L0556 if Not Equal (Z = 0);   
          jsr L4CB4                     ; Jump to Subroutine at L4CB4             
          tax                           ; Transfer Accumulator to Index Register, X ← (A))
          cmp RAM1_051                  ; Compare Accumulator with Memory Byte, (A) - (RAM1_051)
          rts                           ; Return from Subroutine                  
; 
X4D6C: 
deca 
X4D6D: 
          brset 2,X003A,L0508           ; Branch to L0508 if Bit 2 is set at X003A (Mn=1)
          neg RAM1_07e                  ; Negate Byte of RAM1_07e (Two’s Complement), RAM1_07e = 0x00 - (RAM1_07e)
          bhcs L05D0                    ; Branch to L05D0 if Half-Carry Bit is Set, H=1
          bcc L0585                     ; Branch to L0585 if C bit is cleared     
          bclr 7,STACK_0f6              ; Clear bit 7 at STACK_0f6                
          bset 6,RAM1_0b3               ; Set Bit 6 at memory RAM1_0b3 (Mn <- 1 ) 
          bset 5,PLMB                   ; Set Bit 5 at memory PLMB (Mn <- 1 )     
          brset 0,PortA,L05DC           ; Branch to L05DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          sub X4650                     ; Subtract Memory Byte from Accumulator , A ← (A) – (X4650)
          asl X0040                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          bil L0566                     ; Branch to L0566 if IRQ Pin Low IRQ=0    
          bhcc L05B6                    ; Branch to L05B6 if half carry bit Clear H=0
          bls L05B2                     ; Branch to L05B2 if Lower or Same C v Z = 1
          bclr 7,X0040                  ; Clear bit 7 at X0040                    
          bset 6,X0020                  ; Set Bit 6 at memory X0020 (Mn <- 1 )    
          brset 0,PortA,L0606           ; Branch to L0606 if Bit PANEL_STATUS is set at PortA (Mn=1)
          neg RAM1_052                  ; Negate Byte of RAM1_052 (Two’s Complement), RAM1_052 = 0x00 - (RAM1_052)
          adc X003F                     ; ADD with CARRY, A ← (A) + (X003F) + (C) 
          add X0034,x                   ; Add without Carry, A ← (A) + (X0034)  
          bclr 2,X002B                  ; Clear bit 2 at X002B                    
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
          bne L059E                     ; Branch to L059E if Not Equal (Z = 0);   
          brn L061A                     ; Branch Never (1 = 0)                    
          bclr 6,STACK_0ec              ; Clear bit 6 at STACK_0ec                
          brset 0,PortA,L053F           ; Branch to L053F if Bit PANEL_STATUS is set at PortA (Mn=1)
          nega                          ; Negate Byte of Accumulator (Two’s Complement), A = 0x00 - (A)
          lsr RAM1_072,x                ; Logical Shift Right of RAM1_072, b7 -> [b7 >>>> b0] -> C
deca 
          brclr 1,X003A,L0542           ; Branch to L0542 if Bit 1 Clear (Mn = 0) 
          neg RAM1_07d                  ; Negate Byte of RAM1_07d (Two’s Complement), RAM1_07d = 0x00 - (RAM1_07d)
          bhcs L060A                    ; Branch to L060A if Half-Carry Bit is Set, H=1
          bcc L05BF                     ; Branch to L05BF if C bit is cleared     
          bclr 7,STACK_0f6              ; Clear bit 7 at STACK_0f6                
          brset 0,PortA,L057D           ; Branch to L057D if Bit PANEL_STATUS is set at PortA (Mn=1)
          and RAM1_075,x                ; Logical AND, A ← (A) && (RAM1_075)    
          neg RAM1_052                  ; Negate Byte of RAM1_052 (Two’s Complement), RAM1_052 = 0x00 - (RAM1_052)
          adc X003F                     ; ADD with CARRY, A ← (A) + (X003F) + (C) 
          add X0034,x                   ; Add without Carry, A ← (A) + (X0034)  
          bclr 2,X002B                  ; Clear bit 2 at X002B                    
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
          bne L05C4                     ; Branch to L05C4 if Not Equal (Z = 0);   
          brn L0640                     ; Branch Never (1 = 0)                    
          brset 0,PortA,L0619           ; Branch to L0619 if Bit PANEL_STATUS is set at PortA (Mn=1)
X4DC7: 
          adc X003F                     ; ADD with CARRY, A ← (A) + (X003F) + (C) 
          add X0034,x                   ; Add without Carry, A ← (A) + (X0034)  
          bclr 2,X002B                  ; Clear bit 2 at X002B                    
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
          bne L05D2                     ; Branch to L05D2 if Not Equal (Z = 0);   
          brn L064E                     ; Branch Never (1 = 0)                    
          bclr 6,STACK_0ec              ; Clear bit 6 at STACK_0ec                
          bclr 5,PLMB                   ; Clear bit 5 at PLMB                     
          brset 0,PortA,L0645           ; Branch to L0645 if Bit PANEL_STATUS is set at PortA (Mn=1)
          bms L0629                     ; Branch to L0629 if Interrupt Mask Set (I=1)
          bra L061A                     ; Branch Always (1 = 1)                   
; 
          bcc L0611                     ; Branch to L0611 if C bit is cleared     
          rol X002A                     ; Rotate Byte at X002A Left through Carry Bit, C <- [b7 <<<< b0] <- C
          nop                           ; No Operation                            
          bcs L05E6                     ; Branch to L05E6 if C = 1                
          bra L059A                     ; Branch Always (1 = 1)                   
; 
          bclr 6,X004C                  ; Clear bit 6 at X004C                    
          brset 0,PortA,L0577           ; Branch to L0577 if Bit PANEL_STATUS is set at PortA (Mn=1)
          sub #$5D                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$5D)
          sub X4650                     ; Subtract Memory Byte from Accumulator , A ← (A) – (X4650)
          asl X0040                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          bil L05D4                     ; Branch to L05D4 if IRQ Pin Low IRQ=0    
          bhcc L0624                    ; Branch to L0624 if half carry bit Clear H=0
          bls L0620                     ; Branch to L0620 if Lower or Same C v Z = 1
          bclr 7,X0040                  ; Clear bit 7 at X0040                    
          brset 0,PortA,L05C5           ; Branch to L05C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          and RAM1_075,x                ; Logical AND, A ← (A) && (RAM1_075)    
          neg RAM1_052                  ; Negate Byte of RAM1_052 (Two’s Complement), RAM1_052 = 0x00 - (RAM1_052)
          adc X003F                     ; ADD with CARRY, A ← (A) + (X003F) + (C) 
          add X0034,x                   ; Add without Carry, A ← (A) + (X0034)  
          bclr 2,X002B                  ; Clear bit 2 at X002B                    
          sbc ,x                        ; Subtract Memory Byte  and Carry Bit from Accumulator, A ←  (A) – () – (C)
          bne L060C                     ; Branch to L060C if Not Equal (Z = 0);   
          brn L0688                     ; Branch Never (1 = 0)                    
          brset 0,PortA,L060A           ; Branch to L060A if Bit PANEL_STATUS is set at PortA (Mn=1)
          bclr 6,RAM1_08c               ; Clear bit 6 at RAM1_08c                 
          sub #$5D                      ; Subtract Memory Byte from Accumulator , A ← (A) – (#$5D)
          sub X4650                     ; Subtract Memory Byte from Accumulator , A ← (A) – (X4650)
          asl X0040                     ; Arighmetic Shift Left (Same as LSL), C <- [b7 <<<< b0] <- 0
          bil L05FA                     ; Branch to L05FA if IRQ Pin Low IRQ=0    
          bhcc L064A                    ; Branch to L064A if half carry bit Clear H=0
          bls L0646                     ; Branch to L0646 if Lower or Same C v Z = 1
          brset 0,PortA,L0621           ; Branch to L0621 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0624           ; Branch to L0624 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0627           ; Branch to L0627 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062A           ; Branch to L062A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062D           ; Branch to L062D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0630           ; Branch to L0630 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0633           ; Branch to L0633 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0636           ; Branch to L0636 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0639           ; Branch to L0639 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063C           ; Branch to L063C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063F           ; Branch to L063F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0642           ; Branch to L0642 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0645           ; Branch to L0645 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0648           ; Branch to L0648 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064B           ; Branch to L064B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064E           ; Branch to L064E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0651           ; Branch to L0651 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0654           ; Branch to L0654 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0657           ; Branch to L0657 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065A           ; Branch to L065A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065D           ; Branch to L065D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0660           ; Branch to L0660 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0663           ; Branch to L0663 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0666           ; Branch to L0666 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0669           ; Branch to L0669 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066C           ; Branch to L066C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066F           ; Branch to L066F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0672           ; Branch to L0672 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0675           ; Branch to L0675 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0678           ; Branch to L0678 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067B           ; Branch to L067B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067E           ; Branch to L067E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0681           ; Branch to L0681 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0684           ; Branch to L0684 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0687           ; Branch to L0687 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068A           ; Branch to L068A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068D           ; Branch to L068D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0690           ; Branch to L0690 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0693           ; Branch to L0693 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0696           ; Branch to L0696 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0699           ; Branch to L0699 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069C           ; Branch to L069C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069F           ; Branch to L069F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A2           ; Branch to L06A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A5           ; Branch to L06A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A8           ; Branch to L06A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AB           ; Branch to L06AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AE           ; Branch to L06AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B1           ; Branch to L06B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B4           ; Branch to L06B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B7           ; Branch to L06B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BA           ; Branch to L06BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BD           ; Branch to L06BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C0           ; Branch to L06C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C3           ; Branch to L06C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C6           ; Branch to L06C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C9           ; Branch to L06C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CC           ; Branch to L06CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CF           ; Branch to L06CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D2           ; Branch to L06D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D5           ; Branch to L06D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D8           ; Branch to L06D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DB           ; Branch to L06DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DE           ; Branch to L06DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E1           ; Branch to L06E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E4           ; Branch to L06E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E7           ; Branch to L06E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EA           ; Branch to L06EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06ED           ; Branch to L06ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F0           ; Branch to L06F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F3           ; Branch to L06F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F6           ; Branch to L06F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F9           ; Branch to L06F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FC           ; Branch to L06FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FF           ; Branch to L06FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0702           ; Branch to L0702 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0705           ; Branch to L0705 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0708           ; Branch to L0708 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070B           ; Branch to L070B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070E           ; Branch to L070E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0711           ; Branch to L0711 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0714           ; Branch to L0714 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0717           ; Branch to L0717 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071A           ; Branch to L071A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071D           ; Branch to L071D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0720           ; Branch to L0720 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0723           ; Branch to L0723 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0726           ; Branch to L0726 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0729           ; Branch to L0729 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072C           ; Branch to L072C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072F           ; Branch to L072F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0732           ; Branch to L0732 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0735           ; Branch to L0735 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0738           ; Branch to L0738 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073B           ; Branch to L073B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073E           ; Branch to L073E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0741           ; Branch to L0741 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0744           ; Branch to L0744 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0747           ; Branch to L0747 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074A           ; Branch to L074A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074D           ; Branch to L074D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0750           ; Branch to L0750 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0753           ; Branch to L0753 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0756           ; Branch to L0756 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0759           ; Branch to L0759 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075C           ; Branch to L075C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075F           ; Branch to L075F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0762           ; Branch to L0762 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0765           ; Branch to L0765 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0768           ; Branch to L0768 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076B           ; Branch to L076B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076E           ; Branch to L076E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0771           ; Branch to L0771 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0774           ; Branch to L0774 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0777           ; Branch to L0777 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077A           ; Branch to L077A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077D           ; Branch to L077D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0780           ; Branch to L0780 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0783           ; Branch to L0783 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0786           ; Branch to L0786 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0789           ; Branch to L0789 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078C           ; Branch to L078C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078F           ; Branch to L078F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0792           ; Branch to L0792 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0795           ; Branch to L0795 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0798           ; Branch to L0798 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079B           ; Branch to L079B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079E           ; Branch to L079E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A1           ; Branch to L07A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A4           ; Branch to L07A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A7           ; Branch to L07A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AA           ; Branch to L07AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AD           ; Branch to L07AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B0           ; Branch to L07B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B3           ; Branch to L07B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B6           ; Branch to L07B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B9           ; Branch to L07B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BC           ; Branch to L07BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BF           ; Branch to L07BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C2           ; Branch to L07C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C5           ; Branch to L07C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C8           ; Branch to L07C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CB           ; Branch to L07CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CE           ; Branch to L07CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D1           ; Branch to L07D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D4           ; Branch to L07D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D7           ; Branch to L07D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DA           ; Branch to L07DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DD           ; Branch to L07DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E0           ; Branch to L07E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E3           ; Branch to L07E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E6           ; Branch to L07E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E9           ; Branch to L07E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EC           ; Branch to L07EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EF           ; Branch to L07EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F2           ; Branch to L07F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F5           ; Branch to L07F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F8           ; Branch to L07F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FB           ; Branch to L07FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FE           ; Branch to L07FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0001           ; Branch to L0001 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0004           ; Branch to L0004 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0007           ; Branch to L0007 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000A           ; Branch to L000A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000D           ; Branch to L000D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0010           ; Branch to L0010 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0013           ; Branch to L0013 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0016           ; Branch to L0016 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0019           ; Branch to L0019 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001C           ; Branch to L001C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001F           ; Branch to L001F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0022           ; Branch to L0022 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0025           ; Branch to L0025 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0028           ; Branch to L0028 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002B           ; Branch to L002B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002E           ; Branch to L002E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0031           ; Branch to L0031 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0034           ; Branch to L0034 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0037           ; Branch to L0037 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003A           ; Branch to L003A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003D           ; Branch to L003D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0040           ; Branch to L0040 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0043           ; Branch to L0043 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0046           ; Branch to L0046 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0049           ; Branch to L0049 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004C           ; Branch to L004C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004F           ; Branch to L004F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0052           ; Branch to L0052 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0055           ; Branch to L0055 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0058           ; Branch to L0058 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005B           ; Branch to L005B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005E           ; Branch to L005E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0061           ; Branch to L0061 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0064           ; Branch to L0064 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0067           ; Branch to L0067 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006A           ; Branch to L006A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006D           ; Branch to L006D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0070           ; Branch to L0070 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0073           ; Branch to L0073 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0076           ; Branch to L0076 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0079           ; Branch to L0079 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007C           ; Branch to L007C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007F           ; Branch to L007F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0082           ; Branch to L0082 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0085           ; Branch to L0085 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0088           ; Branch to L0088 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008B           ; Branch to L008B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008E           ; Branch to L008E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0091           ; Branch to L0091 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0094           ; Branch to L0094 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0097           ; Branch to L0097 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009A           ; Branch to L009A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009D           ; Branch to L009D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A0           ; Branch to L00A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A3           ; Branch to L00A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A6           ; Branch to L00A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A9           ; Branch to L00A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AC           ; Branch to L00AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AF           ; Branch to L00AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B2           ; Branch to L00B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B5           ; Branch to L00B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B8           ; Branch to L00B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BB           ; Branch to L00BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BE           ; Branch to L00BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C1           ; Branch to L00C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C4           ; Branch to L00C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C7           ; Branch to L00C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CA           ; Branch to L00CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CD           ; Branch to L00CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D0           ; Branch to L00D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D3           ; Branch to L00D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D6           ; Branch to L00D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D9           ; Branch to L00D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DC           ; Branch to L00DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DF           ; Branch to L00DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E2           ; Branch to L00E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E5           ; Branch to L00E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E8           ; Branch to L00E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EB           ; Branch to L00EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EE           ; Branch to L00EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F1           ; Branch to L00F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F4           ; Branch to L00F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F7           ; Branch to L00F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FA           ; Branch to L00FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FD           ; Branch to L00FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0100           ; Branch to L0100 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0103           ; Branch to L0103 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0106           ; Branch to L0106 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0109           ; Branch to L0109 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010C           ; Branch to L010C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010F           ; Branch to L010F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0112           ; Branch to L0112 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0115           ; Branch to L0115 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0118           ; Branch to L0118 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011B           ; Branch to L011B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011E           ; Branch to L011E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0121           ; Branch to L0121 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0124           ; Branch to L0124 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0127           ; Branch to L0127 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012A           ; Branch to L012A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012D           ; Branch to L012D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0130           ; Branch to L0130 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0133           ; Branch to L0133 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0136           ; Branch to L0136 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0139           ; Branch to L0139 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013C           ; Branch to L013C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013F           ; Branch to L013F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0142           ; Branch to L0142 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0145           ; Branch to L0145 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0148           ; Branch to L0148 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014B           ; Branch to L014B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014E           ; Branch to L014E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0151           ; Branch to L0151 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0154           ; Branch to L0154 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0157           ; Branch to L0157 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015A           ; Branch to L015A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015D           ; Branch to L015D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0160           ; Branch to L0160 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0163           ; Branch to L0163 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0166           ; Branch to L0166 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0169           ; Branch to L0169 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016C           ; Branch to L016C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016F           ; Branch to L016F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0172           ; Branch to L0172 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0175           ; Branch to L0175 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0178           ; Branch to L0178 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017B           ; Branch to L017B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017E           ; Branch to L017E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0181           ; Branch to L0181 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0184           ; Branch to L0184 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0187           ; Branch to L0187 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018A           ; Branch to L018A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018D           ; Branch to L018D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0190           ; Branch to L0190 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0193           ; Branch to L0193 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0196           ; Branch to L0196 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0199           ; Branch to L0199 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019C           ; Branch to L019C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019F           ; Branch to L019F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A2           ; Branch to L01A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A5           ; Branch to L01A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A8           ; Branch to L01A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AB           ; Branch to L01AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AE           ; Branch to L01AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B1           ; Branch to L01B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B4           ; Branch to L01B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B7           ; Branch to L01B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BA           ; Branch to L01BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BD           ; Branch to L01BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C0           ; Branch to L01C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C3           ; Branch to L01C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C6           ; Branch to L01C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C9           ; Branch to L01C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CC           ; Branch to L01CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CF           ; Branch to L01CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D2           ; Branch to L01D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D5           ; Branch to L01D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D8           ; Branch to L01D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DB           ; Branch to L01DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DE           ; Branch to L01DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E1           ; Branch to L01E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E4           ; Branch to L01E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E7           ; Branch to L01E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EA           ; Branch to L01EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01ED           ; Branch to L01ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F0           ; Branch to L01F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F3           ; Branch to L01F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F6           ; Branch to L01F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F9           ; Branch to L01F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FC           ; Branch to L01FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FF           ; Branch to L01FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0202           ; Branch to L0202 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0205           ; Branch to L0205 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0208           ; Branch to L0208 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020B           ; Branch to L020B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020E           ; Branch to L020E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0211           ; Branch to L0211 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0214           ; Branch to L0214 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0217           ; Branch to L0217 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021A           ; Branch to L021A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021D           ; Branch to L021D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0220           ; Branch to L0220 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0223           ; Branch to L0223 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0226           ; Branch to L0226 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0229           ; Branch to L0229 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022C           ; Branch to L022C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022F           ; Branch to L022F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0232           ; Branch to L0232 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0235           ; Branch to L0235 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0238           ; Branch to L0238 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023B           ; Branch to L023B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023E           ; Branch to L023E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0241           ; Branch to L0241 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0244           ; Branch to L0244 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0247           ; Branch to L0247 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024A           ; Branch to L024A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024D           ; Branch to L024D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0250           ; Branch to L0250 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0253           ; Branch to L0253 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0256           ; Branch to L0256 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0259           ; Branch to L0259 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025C           ; Branch to L025C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025F           ; Branch to L025F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0262           ; Branch to L0262 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0265           ; Branch to L0265 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0268           ; Branch to L0268 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026B           ; Branch to L026B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026E           ; Branch to L026E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0271           ; Branch to L0271 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0274           ; Branch to L0274 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0277           ; Branch to L0277 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027A           ; Branch to L027A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027D           ; Branch to L027D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0280           ; Branch to L0280 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0283           ; Branch to L0283 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0286           ; Branch to L0286 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0289           ; Branch to L0289 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028C           ; Branch to L028C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028F           ; Branch to L028F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0292           ; Branch to L0292 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0295           ; Branch to L0295 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0298           ; Branch to L0298 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029B           ; Branch to L029B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029E           ; Branch to L029E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A1           ; Branch to L02A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A4           ; Branch to L02A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A7           ; Branch to L02A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AA           ; Branch to L02AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AD           ; Branch to L02AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B0           ; Branch to L02B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B3           ; Branch to L02B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B6           ; Branch to L02B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B9           ; Branch to L02B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BC           ; Branch to L02BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BF           ; Branch to L02BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C2           ; Branch to L02C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C5           ; Branch to L02C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C8           ; Branch to L02C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CB           ; Branch to L02CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CE           ; Branch to L02CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D1           ; Branch to L02D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D4           ; Branch to L02D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D7           ; Branch to L02D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DA           ; Branch to L02DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DD           ; Branch to L02DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E0           ; Branch to L02E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E3           ; Branch to L02E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E6           ; Branch to L02E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E9           ; Branch to L02E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EC           ; Branch to L02EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EF           ; Branch to L02EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F2           ; Branch to L02F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F5           ; Branch to L02F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F8           ; Branch to L02F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FB           ; Branch to L02FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FE           ; Branch to L02FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0301           ; Branch to L0301 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0304           ; Branch to L0304 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0307           ; Branch to L0307 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030A           ; Branch to L030A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030D           ; Branch to L030D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0310           ; Branch to L0310 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0313           ; Branch to L0313 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0316           ; Branch to L0316 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0319           ; Branch to L0319 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031C           ; Branch to L031C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031F           ; Branch to L031F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0322           ; Branch to L0322 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0325           ; Branch to L0325 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0328           ; Branch to L0328 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032B           ; Branch to L032B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032E           ; Branch to L032E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0331           ; Branch to L0331 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0334           ; Branch to L0334 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0337           ; Branch to L0337 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033A           ; Branch to L033A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033D           ; Branch to L033D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0340           ; Branch to L0340 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0343           ; Branch to L0343 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0346           ; Branch to L0346 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0349           ; Branch to L0349 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034C           ; Branch to L034C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034F           ; Branch to L034F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0352           ; Branch to L0352 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0355           ; Branch to L0355 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0358           ; Branch to L0358 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035B           ; Branch to L035B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035E           ; Branch to L035E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0361           ; Branch to L0361 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0364           ; Branch to L0364 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0367           ; Branch to L0367 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036A           ; Branch to L036A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036D           ; Branch to L036D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0370           ; Branch to L0370 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0373           ; Branch to L0373 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0376           ; Branch to L0376 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0379           ; Branch to L0379 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037C           ; Branch to L037C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037F           ; Branch to L037F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0382           ; Branch to L0382 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0385           ; Branch to L0385 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0388           ; Branch to L0388 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038B           ; Branch to L038B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038E           ; Branch to L038E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0391           ; Branch to L0391 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0394           ; Branch to L0394 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0397           ; Branch to L0397 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039A           ; Branch to L039A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039D           ; Branch to L039D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A0           ; Branch to L03A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A3           ; Branch to L03A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A6           ; Branch to L03A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A9           ; Branch to L03A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AC           ; Branch to L03AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AF           ; Branch to L03AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B2           ; Branch to L03B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B5           ; Branch to L03B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B8           ; Branch to L03B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BB           ; Branch to L03BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BE           ; Branch to L03BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C1           ; Branch to L03C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C4           ; Branch to L03C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C7           ; Branch to L03C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CA           ; Branch to L03CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CD           ; Branch to L03CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D0           ; Branch to L03D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D3           ; Branch to L03D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D6           ; Branch to L03D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D9           ; Branch to L03D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DC           ; Branch to L03DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DF           ; Branch to L03DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E2           ; Branch to L03E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E5           ; Branch to L03E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E8           ; Branch to L03E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EB           ; Branch to L03EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EE           ; Branch to L03EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F1           ; Branch to L03F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F4           ; Branch to L03F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F7           ; Branch to L03F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FA           ; Branch to L03FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FD           ; Branch to L03FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0400           ; Branch to L0400 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0403           ; Branch to L0403 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0406           ; Branch to L0406 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0409           ; Branch to L0409 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040C           ; Branch to L040C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040F           ; Branch to L040F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0412           ; Branch to L0412 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0415           ; Branch to L0415 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0418           ; Branch to L0418 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041B           ; Branch to L041B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041E           ; Branch to L041E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0421           ; Branch to L0421 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0424           ; Branch to L0424 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0427           ; Branch to L0427 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042A           ; Branch to L042A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042D           ; Branch to L042D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0430           ; Branch to L0430 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0433           ; Branch to L0433 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0436           ; Branch to L0436 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0439           ; Branch to L0439 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043C           ; Branch to L043C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043F           ; Branch to L043F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0442           ; Branch to L0442 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0445           ; Branch to L0445 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0448           ; Branch to L0448 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044B           ; Branch to L044B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044E           ; Branch to L044E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0451           ; Branch to L0451 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0454           ; Branch to L0454 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0457           ; Branch to L0457 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045A           ; Branch to L045A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045D           ; Branch to L045D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0460           ; Branch to L0460 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0463           ; Branch to L0463 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0466           ; Branch to L0466 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0469           ; Branch to L0469 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046C           ; Branch to L046C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046F           ; Branch to L046F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0472           ; Branch to L0472 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0475           ; Branch to L0475 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0478           ; Branch to L0478 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047B           ; Branch to L047B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047E           ; Branch to L047E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0481           ; Branch to L0481 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0484           ; Branch to L0484 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0487           ; Branch to L0487 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048A           ; Branch to L048A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048D           ; Branch to L048D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0490           ; Branch to L0490 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0493           ; Branch to L0493 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0496           ; Branch to L0496 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0499           ; Branch to L0499 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049C           ; Branch to L049C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049F           ; Branch to L049F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A2           ; Branch to L04A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A5           ; Branch to L04A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A8           ; Branch to L04A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AB           ; Branch to L04AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AE           ; Branch to L04AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B1           ; Branch to L04B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B4           ; Branch to L04B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B7           ; Branch to L04B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BA           ; Branch to L04BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BD           ; Branch to L04BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C0           ; Branch to L04C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C3           ; Branch to L04C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C6           ; Branch to L04C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C9           ; Branch to L04C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CC           ; Branch to L04CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CF           ; Branch to L04CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D2           ; Branch to L04D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D5           ; Branch to L04D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D8           ; Branch to L04D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DB           ; Branch to L04DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DE           ; Branch to L04DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E1           ; Branch to L04E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E4           ; Branch to L04E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E7           ; Branch to L04E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EA           ; Branch to L04EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04ED           ; Branch to L04ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F0           ; Branch to L04F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F3           ; Branch to L04F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
L54F3: 
          brset 0,PortA,L04F6           ; Branch to L04F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F9           ; Branch to L04F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FC           ; Branch to L04FC if Bit PANEL_STATUS is set at PortA (Mn=1)
L54FC: 
          brset 0,PortA,L04FF           ; Branch to L04FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0502           ; Branch to L0502 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0505           ; Branch to L0505 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0508           ; Branch to L0508 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050B           ; Branch to L050B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050E           ; Branch to L050E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0511           ; Branch to L0511 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0514           ; Branch to L0514 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0517           ; Branch to L0517 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051A           ; Branch to L051A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051D           ; Branch to L051D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0520           ; Branch to L0520 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0523           ; Branch to L0523 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0526           ; Branch to L0526 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0529           ; Branch to L0529 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052C           ; Branch to L052C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052F           ; Branch to L052F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0532           ; Branch to L0532 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0535           ; Branch to L0535 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0538           ; Branch to L0538 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053B           ; Branch to L053B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053E           ; Branch to L053E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0541           ; Branch to L0541 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0544           ; Branch to L0544 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0547           ; Branch to L0547 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054A           ; Branch to L054A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054D           ; Branch to L054D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0550           ; Branch to L0550 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0553           ; Branch to L0553 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0556           ; Branch to L0556 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0559           ; Branch to L0559 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055C           ; Branch to L055C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055F           ; Branch to L055F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0562           ; Branch to L0562 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0565           ; Branch to L0565 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0568           ; Branch to L0568 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056B           ; Branch to L056B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056E           ; Branch to L056E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0571           ; Branch to L0571 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0574           ; Branch to L0574 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0577           ; Branch to L0577 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057A           ; Branch to L057A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057D           ; Branch to L057D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0580           ; Branch to L0580 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0583           ; Branch to L0583 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0586           ; Branch to L0586 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0589           ; Branch to L0589 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058C           ; Branch to L058C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058F           ; Branch to L058F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0592           ; Branch to L0592 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0595           ; Branch to L0595 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0598           ; Branch to L0598 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059B           ; Branch to L059B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059E           ; Branch to L059E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A1           ; Branch to L05A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A4           ; Branch to L05A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A7           ; Branch to L05A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AA           ; Branch to L05AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AD           ; Branch to L05AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B0           ; Branch to L05B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B3           ; Branch to L05B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B6           ; Branch to L05B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B9           ; Branch to L05B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BC           ; Branch to L05BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BF           ; Branch to L05BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C2           ; Branch to L05C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C5           ; Branch to L05C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C8           ; Branch to L05C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CB           ; Branch to L05CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CE           ; Branch to L05CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D1           ; Branch to L05D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D4           ; Branch to L05D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D7           ; Branch to L05D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DA           ; Branch to L05DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DD           ; Branch to L05DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E0           ; Branch to L05E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E3           ; Branch to L05E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E6           ; Branch to L05E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E9           ; Branch to L05E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EC           ; Branch to L05EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EF           ; Branch to L05EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F2           ; Branch to L05F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F5           ; Branch to L05F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F8           ; Branch to L05F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FB           ; Branch to L05FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FE           ; Branch to L05FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0601           ; Branch to L0601 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0604           ; Branch to L0604 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0607           ; Branch to L0607 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060A           ; Branch to L060A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060D           ; Branch to L060D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0610           ; Branch to L0610 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0613           ; Branch to L0613 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0616           ; Branch to L0616 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0619           ; Branch to L0619 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061C           ; Branch to L061C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061F           ; Branch to L061F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0622           ; Branch to L0622 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0625           ; Branch to L0625 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0628           ; Branch to L0628 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062B           ; Branch to L062B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062E           ; Branch to L062E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0631           ; Branch to L0631 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0634           ; Branch to L0634 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0637           ; Branch to L0637 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063A           ; Branch to L063A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063D           ; Branch to L063D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0640           ; Branch to L0640 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0643           ; Branch to L0643 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0646           ; Branch to L0646 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0649           ; Branch to L0649 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064C           ; Branch to L064C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064F           ; Branch to L064F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0652           ; Branch to L0652 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0655           ; Branch to L0655 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0658           ; Branch to L0658 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065B           ; Branch to L065B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065E           ; Branch to L065E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0661           ; Branch to L0661 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0664           ; Branch to L0664 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0667           ; Branch to L0667 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066A           ; Branch to L066A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066D           ; Branch to L066D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0670           ; Branch to L0670 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0673           ; Branch to L0673 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0676           ; Branch to L0676 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0679           ; Branch to L0679 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067C           ; Branch to L067C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067F           ; Branch to L067F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0682           ; Branch to L0682 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0685           ; Branch to L0685 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0688           ; Branch to L0688 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068B           ; Branch to L068B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068E           ; Branch to L068E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0691           ; Branch to L0691 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0694           ; Branch to L0694 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0697           ; Branch to L0697 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069A           ; Branch to L069A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069D           ; Branch to L069D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A0           ; Branch to L06A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A3           ; Branch to L06A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A6           ; Branch to L06A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A9           ; Branch to L06A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AC           ; Branch to L06AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AF           ; Branch to L06AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B2           ; Branch to L06B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B5           ; Branch to L06B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B8           ; Branch to L06B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BB           ; Branch to L06BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BE           ; Branch to L06BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C1           ; Branch to L06C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C4           ; Branch to L06C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C7           ; Branch to L06C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CA           ; Branch to L06CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CD           ; Branch to L06CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D0           ; Branch to L06D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D3           ; Branch to L06D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D6           ; Branch to L06D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D9           ; Branch to L06D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DC           ; Branch to L06DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DF           ; Branch to L06DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E2           ; Branch to L06E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E5           ; Branch to L06E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E8           ; Branch to L06E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EB           ; Branch to L06EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EE           ; Branch to L06EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F1           ; Branch to L06F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F4           ; Branch to L06F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F7           ; Branch to L06F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FA           ; Branch to L06FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FD           ; Branch to L06FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0700           ; Branch to L0700 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0703           ; Branch to L0703 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0706           ; Branch to L0706 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0709           ; Branch to L0709 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070C           ; Branch to L070C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070F           ; Branch to L070F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0712           ; Branch to L0712 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0715           ; Branch to L0715 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0718           ; Branch to L0718 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071B           ; Branch to L071B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071E           ; Branch to L071E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0721           ; Branch to L0721 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0724           ; Branch to L0724 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0727           ; Branch to L0727 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072A           ; Branch to L072A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072D           ; Branch to L072D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0730           ; Branch to L0730 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0733           ; Branch to L0733 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0736           ; Branch to L0736 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0739           ; Branch to L0739 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073C           ; Branch to L073C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073F           ; Branch to L073F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0742           ; Branch to L0742 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0745           ; Branch to L0745 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0748           ; Branch to L0748 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074B           ; Branch to L074B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074E           ; Branch to L074E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0751           ; Branch to L0751 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0754           ; Branch to L0754 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0757           ; Branch to L0757 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075A           ; Branch to L075A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075D           ; Branch to L075D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0760           ; Branch to L0760 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0763           ; Branch to L0763 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0766           ; Branch to L0766 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0769           ; Branch to L0769 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076C           ; Branch to L076C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076F           ; Branch to L076F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0772           ; Branch to L0772 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0775           ; Branch to L0775 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0778           ; Branch to L0778 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077B           ; Branch to L077B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077E           ; Branch to L077E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0781           ; Branch to L0781 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0784           ; Branch to L0784 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0787           ; Branch to L0787 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078A           ; Branch to L078A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078D           ; Branch to L078D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0790           ; Branch to L0790 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0793           ; Branch to L0793 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0796           ; Branch to L0796 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0799           ; Branch to L0799 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079C           ; Branch to L079C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079F           ; Branch to L079F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A2           ; Branch to L07A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A5           ; Branch to L07A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A8           ; Branch to L07A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AB           ; Branch to L07AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AE           ; Branch to L07AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B1           ; Branch to L07B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B4           ; Branch to L07B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B7           ; Branch to L07B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BA           ; Branch to L07BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BD           ; Branch to L07BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C0           ; Branch to L07C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C3           ; Branch to L07C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C6           ; Branch to L07C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C9           ; Branch to L07C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CC           ; Branch to L07CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CF           ; Branch to L07CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D2           ; Branch to L07D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D5           ; Branch to L07D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D8           ; Branch to L07D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DB           ; Branch to L07DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DE           ; Branch to L07DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E1           ; Branch to L07E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E4           ; Branch to L07E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E7           ; Branch to L07E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EA           ; Branch to L07EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07ED           ; Branch to L07ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F0           ; Branch to L07F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F3           ; Branch to L07F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F6           ; Branch to L07F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F9           ; Branch to L07F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FC           ; Branch to L07FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FF           ; Branch to L07FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0002           ; Branch to L0002 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0005           ; Branch to L0005 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0008           ; Branch to L0008 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000B           ; Branch to L000B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000E           ; Branch to L000E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0011           ; Branch to L0011 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0014           ; Branch to L0014 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0017           ; Branch to L0017 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001A           ; Branch to L001A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001D           ; Branch to L001D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0020           ; Branch to L0020 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0023           ; Branch to L0023 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0026           ; Branch to L0026 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0029           ; Branch to L0029 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002C           ; Branch to L002C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002F           ; Branch to L002F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0032           ; Branch to L0032 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0035           ; Branch to L0035 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0038           ; Branch to L0038 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003B           ; Branch to L003B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003E           ; Branch to L003E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0041           ; Branch to L0041 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0044           ; Branch to L0044 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0047           ; Branch to L0047 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004A           ; Branch to L004A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004D           ; Branch to L004D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0050           ; Branch to L0050 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0053           ; Branch to L0053 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0056           ; Branch to L0056 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0059           ; Branch to L0059 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005C           ; Branch to L005C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005F           ; Branch to L005F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0062           ; Branch to L0062 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0065           ; Branch to L0065 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0068           ; Branch to L0068 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006B           ; Branch to L006B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006E           ; Branch to L006E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0071           ; Branch to L0071 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0074           ; Branch to L0074 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0077           ; Branch to L0077 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007A           ; Branch to L007A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007D           ; Branch to L007D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0080           ; Branch to L0080 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0083           ; Branch to L0083 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0086           ; Branch to L0086 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0089           ; Branch to L0089 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008C           ; Branch to L008C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008F           ; Branch to L008F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0092           ; Branch to L0092 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0095           ; Branch to L0095 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0098           ; Branch to L0098 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009B           ; Branch to L009B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009E           ; Branch to L009E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A1           ; Branch to L00A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A4           ; Branch to L00A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A7           ; Branch to L00A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AA           ; Branch to L00AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AD           ; Branch to L00AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B0           ; Branch to L00B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B3           ; Branch to L00B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B6           ; Branch to L00B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B9           ; Branch to L00B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BC           ; Branch to L00BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BF           ; Branch to L00BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C2           ; Branch to L00C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C5           ; Branch to L00C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C8           ; Branch to L00C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CB           ; Branch to L00CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CE           ; Branch to L00CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D1           ; Branch to L00D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D4           ; Branch to L00D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D7           ; Branch to L00D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DA           ; Branch to L00DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DD           ; Branch to L00DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E0           ; Branch to L00E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E3           ; Branch to L00E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E6           ; Branch to L00E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E9           ; Branch to L00E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EC           ; Branch to L00EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EF           ; Branch to L00EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F2           ; Branch to L00F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F5           ; Branch to L00F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F8           ; Branch to L00F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FB           ; Branch to L00FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FE           ; Branch to L00FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0101           ; Branch to L0101 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0104           ; Branch to L0104 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0107           ; Branch to L0107 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010A           ; Branch to L010A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010D           ; Branch to L010D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0110           ; Branch to L0110 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0113           ; Branch to L0113 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0116           ; Branch to L0116 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0119           ; Branch to L0119 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011C           ; Branch to L011C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011F           ; Branch to L011F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0122           ; Branch to L0122 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0125           ; Branch to L0125 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0128           ; Branch to L0128 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012B           ; Branch to L012B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012E           ; Branch to L012E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0131           ; Branch to L0131 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0134           ; Branch to L0134 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0137           ; Branch to L0137 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013A           ; Branch to L013A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013D           ; Branch to L013D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0140           ; Branch to L0140 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0143           ; Branch to L0143 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0146           ; Branch to L0146 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0149           ; Branch to L0149 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014C           ; Branch to L014C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014F           ; Branch to L014F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0152           ; Branch to L0152 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0155           ; Branch to L0155 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0158           ; Branch to L0158 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015B           ; Branch to L015B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015E           ; Branch to L015E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0161           ; Branch to L0161 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0164           ; Branch to L0164 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0167           ; Branch to L0167 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016A           ; Branch to L016A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016D           ; Branch to L016D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0170           ; Branch to L0170 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0173           ; Branch to L0173 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0176           ; Branch to L0176 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0179           ; Branch to L0179 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017C           ; Branch to L017C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017F           ; Branch to L017F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0182           ; Branch to L0182 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0185           ; Branch to L0185 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0188           ; Branch to L0188 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018B           ; Branch to L018B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018E           ; Branch to L018E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0191           ; Branch to L0191 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0194           ; Branch to L0194 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0197           ; Branch to L0197 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019A           ; Branch to L019A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019D           ; Branch to L019D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A0           ; Branch to L01A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A3           ; Branch to L01A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A6           ; Branch to L01A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A9           ; Branch to L01A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AC           ; Branch to L01AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AF           ; Branch to L01AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B2           ; Branch to L01B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B5           ; Branch to L01B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B8           ; Branch to L01B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BB           ; Branch to L01BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BE           ; Branch to L01BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C1           ; Branch to L01C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C4           ; Branch to L01C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C7           ; Branch to L01C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CA           ; Branch to L01CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CD           ; Branch to L01CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D0           ; Branch to L01D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D3           ; Branch to L01D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D6           ; Branch to L01D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D9           ; Branch to L01D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DC           ; Branch to L01DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DF           ; Branch to L01DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E2           ; Branch to L01E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E5           ; Branch to L01E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E8           ; Branch to L01E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EB           ; Branch to L01EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EE           ; Branch to L01EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F1           ; Branch to L01F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F4           ; Branch to L01F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F7           ; Branch to L01F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FA           ; Branch to L01FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FD           ; Branch to L01FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0200           ; Branch to L0200 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0203           ; Branch to L0203 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0206           ; Branch to L0206 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0209           ; Branch to L0209 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020C           ; Branch to L020C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020F           ; Branch to L020F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0212           ; Branch to L0212 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0215           ; Branch to L0215 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0218           ; Branch to L0218 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021B           ; Branch to L021B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021E           ; Branch to L021E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0221           ; Branch to L0221 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0224           ; Branch to L0224 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0227           ; Branch to L0227 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022A           ; Branch to L022A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022D           ; Branch to L022D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0230           ; Branch to L0230 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0233           ; Branch to L0233 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0236           ; Branch to L0236 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0239           ; Branch to L0239 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023C           ; Branch to L023C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023F           ; Branch to L023F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0242           ; Branch to L0242 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0245           ; Branch to L0245 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0248           ; Branch to L0248 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024B           ; Branch to L024B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024E           ; Branch to L024E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0251           ; Branch to L0251 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0254           ; Branch to L0254 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0257           ; Branch to L0257 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025A           ; Branch to L025A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025D           ; Branch to L025D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0260           ; Branch to L0260 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0263           ; Branch to L0263 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0266           ; Branch to L0266 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0269           ; Branch to L0269 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026C           ; Branch to L026C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026F           ; Branch to L026F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0272           ; Branch to L0272 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0275           ; Branch to L0275 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0278           ; Branch to L0278 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027B           ; Branch to L027B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027E           ; Branch to L027E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0281           ; Branch to L0281 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0284           ; Branch to L0284 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0287           ; Branch to L0287 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028A           ; Branch to L028A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028D           ; Branch to L028D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0290           ; Branch to L0290 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0293           ; Branch to L0293 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0296           ; Branch to L0296 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0299           ; Branch to L0299 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029C           ; Branch to L029C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029F           ; Branch to L029F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A2           ; Branch to L02A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A5           ; Branch to L02A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A8           ; Branch to L02A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AB           ; Branch to L02AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AE           ; Branch to L02AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B1           ; Branch to L02B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B4           ; Branch to L02B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B7           ; Branch to L02B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BA           ; Branch to L02BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BD           ; Branch to L02BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C0           ; Branch to L02C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C3           ; Branch to L02C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C6           ; Branch to L02C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C9           ; Branch to L02C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CC           ; Branch to L02CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CF           ; Branch to L02CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D2           ; Branch to L02D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D5           ; Branch to L02D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D8           ; Branch to L02D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DB           ; Branch to L02DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DE           ; Branch to L02DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E1           ; Branch to L02E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E4           ; Branch to L02E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E7           ; Branch to L02E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EA           ; Branch to L02EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02ED           ; Branch to L02ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F0           ; Branch to L02F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F3           ; Branch to L02F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F6           ; Branch to L02F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F9           ; Branch to L02F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FC           ; Branch to L02FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FF           ; Branch to L02FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0302           ; Branch to L0302 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0305           ; Branch to L0305 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0308           ; Branch to L0308 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030B           ; Branch to L030B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030E           ; Branch to L030E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0311           ; Branch to L0311 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0314           ; Branch to L0314 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0317           ; Branch to L0317 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031A           ; Branch to L031A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031D           ; Branch to L031D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0320           ; Branch to L0320 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0323           ; Branch to L0323 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0326           ; Branch to L0326 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0329           ; Branch to L0329 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032C           ; Branch to L032C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032F           ; Branch to L032F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0332           ; Branch to L0332 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0335           ; Branch to L0335 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0338           ; Branch to L0338 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033B           ; Branch to L033B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033E           ; Branch to L033E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0341           ; Branch to L0341 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0344           ; Branch to L0344 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0347           ; Branch to L0347 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034A           ; Branch to L034A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034D           ; Branch to L034D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0350           ; Branch to L0350 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0353           ; Branch to L0353 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0356           ; Branch to L0356 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0359           ; Branch to L0359 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035C           ; Branch to L035C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035F           ; Branch to L035F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0362           ; Branch to L0362 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0365           ; Branch to L0365 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0368           ; Branch to L0368 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036B           ; Branch to L036B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036E           ; Branch to L036E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0371           ; Branch to L0371 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0374           ; Branch to L0374 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0377           ; Branch to L0377 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037A           ; Branch to L037A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037D           ; Branch to L037D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0380           ; Branch to L0380 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0383           ; Branch to L0383 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0386           ; Branch to L0386 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0389           ; Branch to L0389 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038C           ; Branch to L038C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038F           ; Branch to L038F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0392           ; Branch to L0392 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0395           ; Branch to L0395 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0398           ; Branch to L0398 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039B           ; Branch to L039B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039E           ; Branch to L039E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A1           ; Branch to L03A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A4           ; Branch to L03A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A7           ; Branch to L03A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AA           ; Branch to L03AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AD           ; Branch to L03AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B0           ; Branch to L03B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B3           ; Branch to L03B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B6           ; Branch to L03B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B9           ; Branch to L03B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BC           ; Branch to L03BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BF           ; Branch to L03BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C2           ; Branch to L03C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C5           ; Branch to L03C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C8           ; Branch to L03C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CB           ; Branch to L03CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CE           ; Branch to L03CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D1           ; Branch to L03D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D4           ; Branch to L03D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D7           ; Branch to L03D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DA           ; Branch to L03DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DD           ; Branch to L03DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E0           ; Branch to L03E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E3           ; Branch to L03E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E6           ; Branch to L03E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E9           ; Branch to L03E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EC           ; Branch to L03EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EF           ; Branch to L03EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F2           ; Branch to L03F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F5           ; Branch to L03F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F8           ; Branch to L03F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FB           ; Branch to L03FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FE           ; Branch to L03FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0401           ; Branch to L0401 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0404           ; Branch to L0404 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0407           ; Branch to L0407 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040A           ; Branch to L040A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040D           ; Branch to L040D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0410           ; Branch to L0410 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0413           ; Branch to L0413 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0416           ; Branch to L0416 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0419           ; Branch to L0419 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041C           ; Branch to L041C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041F           ; Branch to L041F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0422           ; Branch to L0422 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0425           ; Branch to L0425 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0428           ; Branch to L0428 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042B           ; Branch to L042B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042E           ; Branch to L042E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0431           ; Branch to L0431 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0434           ; Branch to L0434 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0437           ; Branch to L0437 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043A           ; Branch to L043A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043D           ; Branch to L043D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0440           ; Branch to L0440 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0443           ; Branch to L0443 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0446           ; Branch to L0446 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0449           ; Branch to L0449 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044C           ; Branch to L044C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044F           ; Branch to L044F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0452           ; Branch to L0452 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0455           ; Branch to L0455 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0458           ; Branch to L0458 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045B           ; Branch to L045B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045E           ; Branch to L045E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0461           ; Branch to L0461 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0464           ; Branch to L0464 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0467           ; Branch to L0467 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046A           ; Branch to L046A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046D           ; Branch to L046D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0470           ; Branch to L0470 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0473           ; Branch to L0473 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0476           ; Branch to L0476 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0479           ; Branch to L0479 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047C           ; Branch to L047C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047F           ; Branch to L047F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0482           ; Branch to L0482 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0485           ; Branch to L0485 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0488           ; Branch to L0488 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048B           ; Branch to L048B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048E           ; Branch to L048E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0491           ; Branch to L0491 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0494           ; Branch to L0494 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0497           ; Branch to L0497 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049A           ; Branch to L049A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049D           ; Branch to L049D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A0           ; Branch to L04A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A3           ; Branch to L04A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A6           ; Branch to L04A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A9           ; Branch to L04A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AC           ; Branch to L04AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AF           ; Branch to L04AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B2           ; Branch to L04B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B5           ; Branch to L04B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B8           ; Branch to L04B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BB           ; Branch to L04BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BE           ; Branch to L04BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C1           ; Branch to L04C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C4           ; Branch to L04C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C7           ; Branch to L04C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CA           ; Branch to L04CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CD           ; Branch to L04CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D0           ; Branch to L04D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D3           ; Branch to L04D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D6           ; Branch to L04D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D9           ; Branch to L04D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DC           ; Branch to L04DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DF           ; Branch to L04DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E2           ; Branch to L04E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E5           ; Branch to L04E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E8           ; Branch to L04E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EB           ; Branch to L04EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EE           ; Branch to L04EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F1           ; Branch to L04F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F4           ; Branch to L04F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F7           ; Branch to L04F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FA           ; Branch to L04FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FD           ; Branch to L04FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0500           ; Branch to L0500 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0503           ; Branch to L0503 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0506           ; Branch to L0506 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0509           ; Branch to L0509 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050C           ; Branch to L050C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050F           ; Branch to L050F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0512           ; Branch to L0512 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0515           ; Branch to L0515 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0518           ; Branch to L0518 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051B           ; Branch to L051B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051E           ; Branch to L051E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0521           ; Branch to L0521 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0524           ; Branch to L0524 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0527           ; Branch to L0527 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052A           ; Branch to L052A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052D           ; Branch to L052D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0530           ; Branch to L0530 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0533           ; Branch to L0533 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0536           ; Branch to L0536 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0539           ; Branch to L0539 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053C           ; Branch to L053C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053F           ; Branch to L053F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0542           ; Branch to L0542 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0545           ; Branch to L0545 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0548           ; Branch to L0548 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054B           ; Branch to L054B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054E           ; Branch to L054E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0551           ; Branch to L0551 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0554           ; Branch to L0554 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0557           ; Branch to L0557 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055A           ; Branch to L055A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055D           ; Branch to L055D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0560           ; Branch to L0560 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0563           ; Branch to L0563 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0566           ; Branch to L0566 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0569           ; Branch to L0569 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056C           ; Branch to L056C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056F           ; Branch to L056F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0572           ; Branch to L0572 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0575           ; Branch to L0575 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0578           ; Branch to L0578 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057B           ; Branch to L057B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057E           ; Branch to L057E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0581           ; Branch to L0581 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0584           ; Branch to L0584 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0587           ; Branch to L0587 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058A           ; Branch to L058A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058D           ; Branch to L058D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0590           ; Branch to L0590 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0593           ; Branch to L0593 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0596           ; Branch to L0596 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0599           ; Branch to L0599 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059C           ; Branch to L059C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059F           ; Branch to L059F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A2           ; Branch to L05A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A5           ; Branch to L05A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A8           ; Branch to L05A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AB           ; Branch to L05AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AE           ; Branch to L05AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B1           ; Branch to L05B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B4           ; Branch to L05B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B7           ; Branch to L05B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BA           ; Branch to L05BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BD           ; Branch to L05BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C0           ; Branch to L05C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C3           ; Branch to L05C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C6           ; Branch to L05C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C9           ; Branch to L05C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CC           ; Branch to L05CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CF           ; Branch to L05CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D2           ; Branch to L05D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D5           ; Branch to L05D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D8           ; Branch to L05D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DB           ; Branch to L05DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DE           ; Branch to L05DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E1           ; Branch to L05E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E4           ; Branch to L05E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E7           ; Branch to L05E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EA           ; Branch to L05EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05ED           ; Branch to L05ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F0           ; Branch to L05F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F3           ; Branch to L05F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F6           ; Branch to L05F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F9           ; Branch to L05F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FC           ; Branch to L05FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FF           ; Branch to L05FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0602           ; Branch to L0602 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0605           ; Branch to L0605 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0608           ; Branch to L0608 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060B           ; Branch to L060B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060E           ; Branch to L060E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0611           ; Branch to L0611 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0614           ; Branch to L0614 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0617           ; Branch to L0617 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061A           ; Branch to L061A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061D           ; Branch to L061D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0620           ; Branch to L0620 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0623           ; Branch to L0623 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0626           ; Branch to L0626 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0629           ; Branch to L0629 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062C           ; Branch to L062C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062F           ; Branch to L062F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0632           ; Branch to L0632 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0635           ; Branch to L0635 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0638           ; Branch to L0638 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063B           ; Branch to L063B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063E           ; Branch to L063E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0641           ; Branch to L0641 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0644           ; Branch to L0644 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0647           ; Branch to L0647 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064A           ; Branch to L064A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064D           ; Branch to L064D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0650           ; Branch to L0650 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0653           ; Branch to L0653 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0656           ; Branch to L0656 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0659           ; Branch to L0659 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065C           ; Branch to L065C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065F           ; Branch to L065F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0662           ; Branch to L0662 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0665           ; Branch to L0665 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0668           ; Branch to L0668 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066B           ; Branch to L066B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066E           ; Branch to L066E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0671           ; Branch to L0671 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0674           ; Branch to L0674 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0677           ; Branch to L0677 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067A           ; Branch to L067A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067D           ; Branch to L067D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0680           ; Branch to L0680 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0683           ; Branch to L0683 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0686           ; Branch to L0686 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0689           ; Branch to L0689 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068C           ; Branch to L068C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068F           ; Branch to L068F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0692           ; Branch to L0692 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0695           ; Branch to L0695 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0698           ; Branch to L0698 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069B           ; Branch to L069B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069E           ; Branch to L069E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A1           ; Branch to L06A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A4           ; Branch to L06A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A7           ; Branch to L06A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AA           ; Branch to L06AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AD           ; Branch to L06AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B0           ; Branch to L06B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B3           ; Branch to L06B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B6           ; Branch to L06B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B9           ; Branch to L06B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BC           ; Branch to L06BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BF           ; Branch to L06BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C2           ; Branch to L06C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C5           ; Branch to L06C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C8           ; Branch to L06C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CB           ; Branch to L06CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CE           ; Branch to L06CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D1           ; Branch to L06D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D4           ; Branch to L06D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D7           ; Branch to L06D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DA           ; Branch to L06DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DD           ; Branch to L06DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E0           ; Branch to L06E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E3           ; Branch to L06E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E6           ; Branch to L06E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E9           ; Branch to L06E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EC           ; Branch to L06EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EF           ; Branch to L06EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F2           ; Branch to L06F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F5           ; Branch to L06F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F8           ; Branch to L06F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FB           ; Branch to L06FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FE           ; Branch to L06FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0701           ; Branch to L0701 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0704           ; Branch to L0704 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0707           ; Branch to L0707 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070A           ; Branch to L070A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070D           ; Branch to L070D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0710           ; Branch to L0710 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0713           ; Branch to L0713 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0716           ; Branch to L0716 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0719           ; Branch to L0719 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071C           ; Branch to L071C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071F           ; Branch to L071F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0722           ; Branch to L0722 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0725           ; Branch to L0725 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0728           ; Branch to L0728 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072B           ; Branch to L072B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072E           ; Branch to L072E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0731           ; Branch to L0731 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0734           ; Branch to L0734 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0737           ; Branch to L0737 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073A           ; Branch to L073A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073D           ; Branch to L073D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0740           ; Branch to L0740 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0743           ; Branch to L0743 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0746           ; Branch to L0746 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0749           ; Branch to L0749 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074C           ; Branch to L074C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074F           ; Branch to L074F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0752           ; Branch to L0752 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0755           ; Branch to L0755 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0758           ; Branch to L0758 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075B           ; Branch to L075B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075E           ; Branch to L075E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0761           ; Branch to L0761 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0764           ; Branch to L0764 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0767           ; Branch to L0767 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076A           ; Branch to L076A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076D           ; Branch to L076D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0770           ; Branch to L0770 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0773           ; Branch to L0773 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0776           ; Branch to L0776 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0779           ; Branch to L0779 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077C           ; Branch to L077C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077F           ; Branch to L077F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0782           ; Branch to L0782 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0785           ; Branch to L0785 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0788           ; Branch to L0788 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078B           ; Branch to L078B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078E           ; Branch to L078E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0791           ; Branch to L0791 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0794           ; Branch to L0794 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0797           ; Branch to L0797 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079A           ; Branch to L079A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079D           ; Branch to L079D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A0           ; Branch to L07A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A3           ; Branch to L07A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A6           ; Branch to L07A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A9           ; Branch to L07A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AC           ; Branch to L07AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AF           ; Branch to L07AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B2           ; Branch to L07B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B5           ; Branch to L07B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B8           ; Branch to L07B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BB           ; Branch to L07BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BE           ; Branch to L07BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C1           ; Branch to L07C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C4           ; Branch to L07C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C7           ; Branch to L07C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CA           ; Branch to L07CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CD           ; Branch to L07CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D0           ; Branch to L07D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D3           ; Branch to L07D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D6           ; Branch to L07D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D9           ; Branch to L07D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DC           ; Branch to L07DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DF           ; Branch to L07DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E2           ; Branch to L07E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E5           ; Branch to L07E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E8           ; Branch to L07E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EB           ; Branch to L07EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EE           ; Branch to L07EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F1           ; Branch to L07F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F4           ; Branch to L07F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F7           ; Branch to L07F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FA           ; Branch to L07FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FD           ; Branch to L07FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0000           ; Branch to L0000 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0003           ; Branch to L0003 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0006           ; Branch to L0006 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0009           ; Branch to L0009 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000C           ; Branch to L000C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000F           ; Branch to L000F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0012           ; Branch to L0012 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0015           ; Branch to L0015 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0018           ; Branch to L0018 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001B           ; Branch to L001B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001E           ; Branch to L001E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0021           ; Branch to L0021 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0024           ; Branch to L0024 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0027           ; Branch to L0027 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002A           ; Branch to L002A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002D           ; Branch to L002D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0030           ; Branch to L0030 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0033           ; Branch to L0033 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0036           ; Branch to L0036 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0039           ; Branch to L0039 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003C           ; Branch to L003C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003F           ; Branch to L003F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0042           ; Branch to L0042 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0045           ; Branch to L0045 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0048           ; Branch to L0048 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004B           ; Branch to L004B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004E           ; Branch to L004E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0051           ; Branch to L0051 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0054           ; Branch to L0054 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0057           ; Branch to L0057 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005A           ; Branch to L005A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005D           ; Branch to L005D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0060           ; Branch to L0060 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0063           ; Branch to L0063 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0066           ; Branch to L0066 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0069           ; Branch to L0069 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006C           ; Branch to L006C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006F           ; Branch to L006F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0072           ; Branch to L0072 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0075           ; Branch to L0075 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0078           ; Branch to L0078 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007B           ; Branch to L007B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007E           ; Branch to L007E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0081           ; Branch to L0081 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0084           ; Branch to L0084 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0087           ; Branch to L0087 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008A           ; Branch to L008A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008D           ; Branch to L008D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0090           ; Branch to L0090 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0093           ; Branch to L0093 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0096           ; Branch to L0096 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0099           ; Branch to L0099 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009C           ; Branch to L009C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009F           ; Branch to L009F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A2           ; Branch to L00A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A5           ; Branch to L00A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A8           ; Branch to L00A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AB           ; Branch to L00AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AE           ; Branch to L00AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B1           ; Branch to L00B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B4           ; Branch to L00B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B7           ; Branch to L00B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BA           ; Branch to L00BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BD           ; Branch to L00BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C0           ; Branch to L00C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C3           ; Branch to L00C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C6           ; Branch to L00C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C9           ; Branch to L00C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CC           ; Branch to L00CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CF           ; Branch to L00CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D2           ; Branch to L00D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D5           ; Branch to L00D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D8           ; Branch to L00D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DB           ; Branch to L00DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DE           ; Branch to L00DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E1           ; Branch to L00E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E4           ; Branch to L00E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E7           ; Branch to L00E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EA           ; Branch to L00EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00ED           ; Branch to L00ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F0           ; Branch to L00F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F3           ; Branch to L00F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F6           ; Branch to L00F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F9           ; Branch to L00F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FC           ; Branch to L00FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FF           ; Branch to L00FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0102           ; Branch to L0102 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0105           ; Branch to L0105 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0108           ; Branch to L0108 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010B           ; Branch to L010B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010E           ; Branch to L010E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0111           ; Branch to L0111 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0114           ; Branch to L0114 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0117           ; Branch to L0117 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011A           ; Branch to L011A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011D           ; Branch to L011D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0120           ; Branch to L0120 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0123           ; Branch to L0123 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0126           ; Branch to L0126 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0129           ; Branch to L0129 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012C           ; Branch to L012C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012F           ; Branch to L012F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0132           ; Branch to L0132 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0135           ; Branch to L0135 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0138           ; Branch to L0138 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013B           ; Branch to L013B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013E           ; Branch to L013E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0141           ; Branch to L0141 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0144           ; Branch to L0144 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0147           ; Branch to L0147 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014A           ; Branch to L014A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014D           ; Branch to L014D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0150           ; Branch to L0150 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0153           ; Branch to L0153 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0156           ; Branch to L0156 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0159           ; Branch to L0159 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015C           ; Branch to L015C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015F           ; Branch to L015F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0162           ; Branch to L0162 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0165           ; Branch to L0165 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0168           ; Branch to L0168 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016B           ; Branch to L016B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016E           ; Branch to L016E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0171           ; Branch to L0171 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0174           ; Branch to L0174 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0177           ; Branch to L0177 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017A           ; Branch to L017A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017D           ; Branch to L017D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0180           ; Branch to L0180 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0183           ; Branch to L0183 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0186           ; Branch to L0186 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0189           ; Branch to L0189 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018C           ; Branch to L018C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018F           ; Branch to L018F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0192           ; Branch to L0192 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0195           ; Branch to L0195 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0198           ; Branch to L0198 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019B           ; Branch to L019B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019E           ; Branch to L019E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A1           ; Branch to L01A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A4           ; Branch to L01A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A7           ; Branch to L01A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AA           ; Branch to L01AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AD           ; Branch to L01AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B0           ; Branch to L01B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B3           ; Branch to L01B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B6           ; Branch to L01B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B9           ; Branch to L01B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BC           ; Branch to L01BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BF           ; Branch to L01BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C2           ; Branch to L01C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C5           ; Branch to L01C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C8           ; Branch to L01C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CB           ; Branch to L01CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CE           ; Branch to L01CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D1           ; Branch to L01D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D4           ; Branch to L01D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D7           ; Branch to L01D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DA           ; Branch to L01DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DD           ; Branch to L01DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E0           ; Branch to L01E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E3           ; Branch to L01E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E6           ; Branch to L01E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E9           ; Branch to L01E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EC           ; Branch to L01EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EF           ; Branch to L01EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F2           ; Branch to L01F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F5           ; Branch to L01F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F8           ; Branch to L01F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FB           ; Branch to L01FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FE           ; Branch to L01FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0201           ; Branch to L0201 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0204           ; Branch to L0204 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0207           ; Branch to L0207 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020A           ; Branch to L020A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020D           ; Branch to L020D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0210           ; Branch to L0210 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0213           ; Branch to L0213 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0216           ; Branch to L0216 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0219           ; Branch to L0219 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021C           ; Branch to L021C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021F           ; Branch to L021F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0222           ; Branch to L0222 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0225           ; Branch to L0225 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0228           ; Branch to L0228 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022B           ; Branch to L022B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022E           ; Branch to L022E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0231           ; Branch to L0231 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0234           ; Branch to L0234 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0237           ; Branch to L0237 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023A           ; Branch to L023A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023D           ; Branch to L023D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0240           ; Branch to L0240 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0243           ; Branch to L0243 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0246           ; Branch to L0246 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0249           ; Branch to L0249 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024C           ; Branch to L024C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024F           ; Branch to L024F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0252           ; Branch to L0252 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0255           ; Branch to L0255 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0258           ; Branch to L0258 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025B           ; Branch to L025B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025E           ; Branch to L025E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0261           ; Branch to L0261 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0264           ; Branch to L0264 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0267           ; Branch to L0267 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026A           ; Branch to L026A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026D           ; Branch to L026D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0270           ; Branch to L0270 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0273           ; Branch to L0273 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0276           ; Branch to L0276 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0279           ; Branch to L0279 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027C           ; Branch to L027C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027F           ; Branch to L027F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0282           ; Branch to L0282 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0285           ; Branch to L0285 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0288           ; Branch to L0288 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028B           ; Branch to L028B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028E           ; Branch to L028E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0291           ; Branch to L0291 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0294           ; Branch to L0294 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0297           ; Branch to L0297 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029A           ; Branch to L029A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029D           ; Branch to L029D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A0           ; Branch to L02A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A3           ; Branch to L02A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A6           ; Branch to L02A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A9           ; Branch to L02A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AC           ; Branch to L02AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AF           ; Branch to L02AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B2           ; Branch to L02B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B5           ; Branch to L02B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B8           ; Branch to L02B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BB           ; Branch to L02BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BE           ; Branch to L02BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C1           ; Branch to L02C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C4           ; Branch to L02C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C7           ; Branch to L02C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CA           ; Branch to L02CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CD           ; Branch to L02CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D0           ; Branch to L02D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D3           ; Branch to L02D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D6           ; Branch to L02D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D9           ; Branch to L02D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DC           ; Branch to L02DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DF           ; Branch to L02DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E2           ; Branch to L02E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E5           ; Branch to L02E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E8           ; Branch to L02E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EB           ; Branch to L02EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EE           ; Branch to L02EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F1           ; Branch to L02F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F4           ; Branch to L02F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F7           ; Branch to L02F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FA           ; Branch to L02FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FD           ; Branch to L02FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0300           ; Branch to L0300 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0303           ; Branch to L0303 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0306           ; Branch to L0306 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0309           ; Branch to L0309 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030C           ; Branch to L030C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030F           ; Branch to L030F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0312           ; Branch to L0312 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0315           ; Branch to L0315 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0318           ; Branch to L0318 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031B           ; Branch to L031B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031E           ; Branch to L031E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0321           ; Branch to L0321 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0324           ; Branch to L0324 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0327           ; Branch to L0327 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032A           ; Branch to L032A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032D           ; Branch to L032D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0330           ; Branch to L0330 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0333           ; Branch to L0333 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0336           ; Branch to L0336 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0339           ; Branch to L0339 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033C           ; Branch to L033C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033F           ; Branch to L033F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0342           ; Branch to L0342 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0345           ; Branch to L0345 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0348           ; Branch to L0348 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034B           ; Branch to L034B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034E           ; Branch to L034E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0351           ; Branch to L0351 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0354           ; Branch to L0354 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0357           ; Branch to L0357 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035A           ; Branch to L035A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035D           ; Branch to L035D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0360           ; Branch to L0360 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0363           ; Branch to L0363 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0366           ; Branch to L0366 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0369           ; Branch to L0369 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036C           ; Branch to L036C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036F           ; Branch to L036F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0372           ; Branch to L0372 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0375           ; Branch to L0375 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0378           ; Branch to L0378 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037B           ; Branch to L037B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037E           ; Branch to L037E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0381           ; Branch to L0381 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0384           ; Branch to L0384 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0387           ; Branch to L0387 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038A           ; Branch to L038A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038D           ; Branch to L038D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0390           ; Branch to L0390 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0393           ; Branch to L0393 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0396           ; Branch to L0396 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0399           ; Branch to L0399 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039C           ; Branch to L039C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039F           ; Branch to L039F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A2           ; Branch to L03A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A5           ; Branch to L03A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A8           ; Branch to L03A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AB           ; Branch to L03AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AE           ; Branch to L03AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B1           ; Branch to L03B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B4           ; Branch to L03B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B7           ; Branch to L03B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BA           ; Branch to L03BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BD           ; Branch to L03BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C0           ; Branch to L03C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C3           ; Branch to L03C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C6           ; Branch to L03C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C9           ; Branch to L03C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CC           ; Branch to L03CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CF           ; Branch to L03CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D2           ; Branch to L03D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D5           ; Branch to L03D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D8           ; Branch to L03D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DB           ; Branch to L03DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DE           ; Branch to L03DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E1           ; Branch to L03E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E4           ; Branch to L03E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E7           ; Branch to L03E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EA           ; Branch to L03EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03ED           ; Branch to L03ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F0           ; Branch to L03F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F3           ; Branch to L03F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F6           ; Branch to L03F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F9           ; Branch to L03F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FC           ; Branch to L03FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FF           ; Branch to L03FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0402           ; Branch to L0402 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0405           ; Branch to L0405 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0408           ; Branch to L0408 if Bit PANEL_STATUS is set at PortA (Mn=1)
X6408: 
          brset 0,PortA,L040B           ; Branch to L040B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040E           ; Branch to L040E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0411           ; Branch to L0411 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0414           ; Branch to L0414 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0417           ; Branch to L0417 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041A           ; Branch to L041A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041D           ; Branch to L041D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0420           ; Branch to L0420 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0423           ; Branch to L0423 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0426           ; Branch to L0426 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0429           ; Branch to L0429 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042C           ; Branch to L042C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042F           ; Branch to L042F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0432           ; Branch to L0432 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0435           ; Branch to L0435 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0438           ; Branch to L0438 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043B           ; Branch to L043B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043E           ; Branch to L043E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0441           ; Branch to L0441 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0444           ; Branch to L0444 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0447           ; Branch to L0447 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044A           ; Branch to L044A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044D           ; Branch to L044D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0450           ; Branch to L0450 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0453           ; Branch to L0453 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0456           ; Branch to L0456 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0459           ; Branch to L0459 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045C           ; Branch to L045C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045F           ; Branch to L045F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0462           ; Branch to L0462 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0465           ; Branch to L0465 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0468           ; Branch to L0468 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046B           ; Branch to L046B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046E           ; Branch to L046E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0471           ; Branch to L0471 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0474           ; Branch to L0474 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0477           ; Branch to L0477 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047A           ; Branch to L047A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047D           ; Branch to L047D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0480           ; Branch to L0480 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0483           ; Branch to L0483 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0486           ; Branch to L0486 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0489           ; Branch to L0489 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048C           ; Branch to L048C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048F           ; Branch to L048F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0492           ; Branch to L0492 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0495           ; Branch to L0495 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0498           ; Branch to L0498 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049B           ; Branch to L049B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049E           ; Branch to L049E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A1           ; Branch to L04A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A4           ; Branch to L04A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A7           ; Branch to L04A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AA           ; Branch to L04AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AD           ; Branch to L04AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B0           ; Branch to L04B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B3           ; Branch to L04B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B6           ; Branch to L04B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B9           ; Branch to L04B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BC           ; Branch to L04BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BF           ; Branch to L04BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C2           ; Branch to L04C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C5           ; Branch to L04C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C8           ; Branch to L04C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CB           ; Branch to L04CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CE           ; Branch to L04CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D1           ; Branch to L04D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D4           ; Branch to L04D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D7           ; Branch to L04D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DA           ; Branch to L04DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DD           ; Branch to L04DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E0           ; Branch to L04E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E3           ; Branch to L04E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E6           ; Branch to L04E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E9           ; Branch to L04E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EC           ; Branch to L04EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EF           ; Branch to L04EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F2           ; Branch to L04F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F5           ; Branch to L04F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F8           ; Branch to L04F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FB           ; Branch to L04FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FE           ; Branch to L04FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0501           ; Branch to L0501 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0504           ; Branch to L0504 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0507           ; Branch to L0507 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050A           ; Branch to L050A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050D           ; Branch to L050D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0510           ; Branch to L0510 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0513           ; Branch to L0513 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0516           ; Branch to L0516 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0519           ; Branch to L0519 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051C           ; Branch to L051C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051F           ; Branch to L051F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0522           ; Branch to L0522 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0525           ; Branch to L0525 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0528           ; Branch to L0528 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052B           ; Branch to L052B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052E           ; Branch to L052E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0531           ; Branch to L0531 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0534           ; Branch to L0534 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0537           ; Branch to L0537 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053A           ; Branch to L053A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053D           ; Branch to L053D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0540           ; Branch to L0540 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0543           ; Branch to L0543 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0546           ; Branch to L0546 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0549           ; Branch to L0549 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054C           ; Branch to L054C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054F           ; Branch to L054F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0552           ; Branch to L0552 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0555           ; Branch to L0555 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0558           ; Branch to L0558 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055B           ; Branch to L055B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055E           ; Branch to L055E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0561           ; Branch to L0561 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0564           ; Branch to L0564 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0567           ; Branch to L0567 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056A           ; Branch to L056A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056D           ; Branch to L056D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0570           ; Branch to L0570 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0573           ; Branch to L0573 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0576           ; Branch to L0576 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0579           ; Branch to L0579 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057C           ; Branch to L057C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057F           ; Branch to L057F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0582           ; Branch to L0582 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0585           ; Branch to L0585 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0588           ; Branch to L0588 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058B           ; Branch to L058B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058E           ; Branch to L058E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0591           ; Branch to L0591 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0594           ; Branch to L0594 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0597           ; Branch to L0597 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059A           ; Branch to L059A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059D           ; Branch to L059D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A0           ; Branch to L05A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A3           ; Branch to L05A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A6           ; Branch to L05A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A9           ; Branch to L05A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AC           ; Branch to L05AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AF           ; Branch to L05AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B2           ; Branch to L05B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B5           ; Branch to L05B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B8           ; Branch to L05B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BB           ; Branch to L05BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BE           ; Branch to L05BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C1           ; Branch to L05C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C4           ; Branch to L05C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C7           ; Branch to L05C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CA           ; Branch to L05CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CD           ; Branch to L05CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D0           ; Branch to L05D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D3           ; Branch to L05D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D6           ; Branch to L05D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D9           ; Branch to L05D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DC           ; Branch to L05DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DF           ; Branch to L05DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E2           ; Branch to L05E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E5           ; Branch to L05E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E8           ; Branch to L05E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EB           ; Branch to L05EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EE           ; Branch to L05EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F1           ; Branch to L05F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F4           ; Branch to L05F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F7           ; Branch to L05F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FA           ; Branch to L05FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FD           ; Branch to L05FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0600           ; Branch to L0600 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0603           ; Branch to L0603 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0606           ; Branch to L0606 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0609           ; Branch to L0609 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060C           ; Branch to L060C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060F           ; Branch to L060F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0612           ; Branch to L0612 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0615           ; Branch to L0615 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0618           ; Branch to L0618 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061B           ; Branch to L061B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061E           ; Branch to L061E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0621           ; Branch to L0621 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0624           ; Branch to L0624 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0627           ; Branch to L0627 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062A           ; Branch to L062A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062D           ; Branch to L062D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0630           ; Branch to L0630 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0633           ; Branch to L0633 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0636           ; Branch to L0636 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0639           ; Branch to L0639 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063C           ; Branch to L063C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063F           ; Branch to L063F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0642           ; Branch to L0642 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0645           ; Branch to L0645 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0648           ; Branch to L0648 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064B           ; Branch to L064B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064E           ; Branch to L064E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0651           ; Branch to L0651 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0654           ; Branch to L0654 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0657           ; Branch to L0657 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065A           ; Branch to L065A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065D           ; Branch to L065D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0660           ; Branch to L0660 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0663           ; Branch to L0663 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0666           ; Branch to L0666 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0669           ; Branch to L0669 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066C           ; Branch to L066C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066F           ; Branch to L066F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0672           ; Branch to L0672 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0675           ; Branch to L0675 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0678           ; Branch to L0678 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067B           ; Branch to L067B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067E           ; Branch to L067E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0681           ; Branch to L0681 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0684           ; Branch to L0684 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0687           ; Branch to L0687 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068A           ; Branch to L068A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068D           ; Branch to L068D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0690           ; Branch to L0690 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0693           ; Branch to L0693 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0696           ; Branch to L0696 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0699           ; Branch to L0699 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069C           ; Branch to L069C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069F           ; Branch to L069F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A2           ; Branch to L06A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A5           ; Branch to L06A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A8           ; Branch to L06A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AB           ; Branch to L06AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AE           ; Branch to L06AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B1           ; Branch to L06B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B4           ; Branch to L06B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B7           ; Branch to L06B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BA           ; Branch to L06BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BD           ; Branch to L06BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C0           ; Branch to L06C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C3           ; Branch to L06C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C6           ; Branch to L06C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C9           ; Branch to L06C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CC           ; Branch to L06CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CF           ; Branch to L06CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D2           ; Branch to L06D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D5           ; Branch to L06D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D8           ; Branch to L06D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DB           ; Branch to L06DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DE           ; Branch to L06DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E1           ; Branch to L06E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E4           ; Branch to L06E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E7           ; Branch to L06E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EA           ; Branch to L06EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06ED           ; Branch to L06ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F0           ; Branch to L06F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F3           ; Branch to L06F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F6           ; Branch to L06F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F9           ; Branch to L06F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FC           ; Branch to L06FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FF           ; Branch to L06FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0702           ; Branch to L0702 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0705           ; Branch to L0705 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0708           ; Branch to L0708 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070B           ; Branch to L070B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070E           ; Branch to L070E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0711           ; Branch to L0711 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0714           ; Branch to L0714 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0717           ; Branch to L0717 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071A           ; Branch to L071A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071D           ; Branch to L071D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0720           ; Branch to L0720 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0723           ; Branch to L0723 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0726           ; Branch to L0726 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0729           ; Branch to L0729 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072C           ; Branch to L072C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072F           ; Branch to L072F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0732           ; Branch to L0732 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0735           ; Branch to L0735 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0738           ; Branch to L0738 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073B           ; Branch to L073B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073E           ; Branch to L073E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0741           ; Branch to L0741 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0744           ; Branch to L0744 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0747           ; Branch to L0747 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074A           ; Branch to L074A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074D           ; Branch to L074D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0750           ; Branch to L0750 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0753           ; Branch to L0753 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0756           ; Branch to L0756 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0759           ; Branch to L0759 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075C           ; Branch to L075C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075F           ; Branch to L075F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0762           ; Branch to L0762 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0765           ; Branch to L0765 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0768           ; Branch to L0768 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076B           ; Branch to L076B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076E           ; Branch to L076E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0771           ; Branch to L0771 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0774           ; Branch to L0774 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0777           ; Branch to L0777 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077A           ; Branch to L077A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077D           ; Branch to L077D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0780           ; Branch to L0780 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0783           ; Branch to L0783 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0786           ; Branch to L0786 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0789           ; Branch to L0789 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078C           ; Branch to L078C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078F           ; Branch to L078F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0792           ; Branch to L0792 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0795           ; Branch to L0795 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0798           ; Branch to L0798 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079B           ; Branch to L079B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079E           ; Branch to L079E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A1           ; Branch to L07A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A4           ; Branch to L07A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A7           ; Branch to L07A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AA           ; Branch to L07AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AD           ; Branch to L07AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B0           ; Branch to L07B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B3           ; Branch to L07B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B6           ; Branch to L07B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B9           ; Branch to L07B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BC           ; Branch to L07BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BF           ; Branch to L07BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C2           ; Branch to L07C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C5           ; Branch to L07C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C8           ; Branch to L07C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CB           ; Branch to L07CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CE           ; Branch to L07CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D1           ; Branch to L07D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D4           ; Branch to L07D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D7           ; Branch to L07D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DA           ; Branch to L07DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DD           ; Branch to L07DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E0           ; Branch to L07E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E3           ; Branch to L07E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E6           ; Branch to L07E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E9           ; Branch to L07E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EC           ; Branch to L07EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EF           ; Branch to L07EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F2           ; Branch to L07F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F5           ; Branch to L07F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F8           ; Branch to L07F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FB           ; Branch to L07FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FE           ; Branch to L07FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0001           ; Branch to L0001 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0004           ; Branch to L0004 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0007           ; Branch to L0007 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000A           ; Branch to L000A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000D           ; Branch to L000D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0010           ; Branch to L0010 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0013           ; Branch to L0013 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0016           ; Branch to L0016 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0019           ; Branch to L0019 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001C           ; Branch to L001C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001F           ; Branch to L001F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0022           ; Branch to L0022 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0025           ; Branch to L0025 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0028           ; Branch to L0028 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002B           ; Branch to L002B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002E           ; Branch to L002E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0031           ; Branch to L0031 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0034           ; Branch to L0034 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0037           ; Branch to L0037 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003A           ; Branch to L003A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003D           ; Branch to L003D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0040           ; Branch to L0040 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0043           ; Branch to L0043 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0046           ; Branch to L0046 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0049           ; Branch to L0049 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004C           ; Branch to L004C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004F           ; Branch to L004F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0052           ; Branch to L0052 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0055           ; Branch to L0055 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0058           ; Branch to L0058 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005B           ; Branch to L005B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005E           ; Branch to L005E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0061           ; Branch to L0061 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0064           ; Branch to L0064 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0067           ; Branch to L0067 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006A           ; Branch to L006A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006D           ; Branch to L006D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0070           ; Branch to L0070 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0073           ; Branch to L0073 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0076           ; Branch to L0076 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0079           ; Branch to L0079 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007C           ; Branch to L007C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007F           ; Branch to L007F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0082           ; Branch to L0082 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0085           ; Branch to L0085 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0088           ; Branch to L0088 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008B           ; Branch to L008B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008E           ; Branch to L008E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0091           ; Branch to L0091 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0094           ; Branch to L0094 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0097           ; Branch to L0097 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009A           ; Branch to L009A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009D           ; Branch to L009D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A0           ; Branch to L00A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A3           ; Branch to L00A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A6           ; Branch to L00A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A9           ; Branch to L00A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AC           ; Branch to L00AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AF           ; Branch to L00AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B2           ; Branch to L00B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B5           ; Branch to L00B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B8           ; Branch to L00B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BB           ; Branch to L00BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BE           ; Branch to L00BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C1           ; Branch to L00C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C4           ; Branch to L00C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C7           ; Branch to L00C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CA           ; Branch to L00CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CD           ; Branch to L00CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D0           ; Branch to L00D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D3           ; Branch to L00D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D6           ; Branch to L00D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D9           ; Branch to L00D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DC           ; Branch to L00DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DF           ; Branch to L00DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E2           ; Branch to L00E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E5           ; Branch to L00E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E8           ; Branch to L00E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EB           ; Branch to L00EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EE           ; Branch to L00EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F1           ; Branch to L00F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F4           ; Branch to L00F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F7           ; Branch to L00F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FA           ; Branch to L00FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FD           ; Branch to L00FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0100           ; Branch to L0100 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0103           ; Branch to L0103 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0106           ; Branch to L0106 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0109           ; Branch to L0109 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010C           ; Branch to L010C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010F           ; Branch to L010F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0112           ; Branch to L0112 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0115           ; Branch to L0115 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0118           ; Branch to L0118 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011B           ; Branch to L011B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011E           ; Branch to L011E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0121           ; Branch to L0121 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0124           ; Branch to L0124 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0127           ; Branch to L0127 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012A           ; Branch to L012A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012D           ; Branch to L012D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0130           ; Branch to L0130 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0133           ; Branch to L0133 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0136           ; Branch to L0136 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0139           ; Branch to L0139 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013C           ; Branch to L013C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013F           ; Branch to L013F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0142           ; Branch to L0142 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0145           ; Branch to L0145 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0148           ; Branch to L0148 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014B           ; Branch to L014B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014E           ; Branch to L014E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0151           ; Branch to L0151 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0154           ; Branch to L0154 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0157           ; Branch to L0157 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015A           ; Branch to L015A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015D           ; Branch to L015D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0160           ; Branch to L0160 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0163           ; Branch to L0163 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0166           ; Branch to L0166 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0169           ; Branch to L0169 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016C           ; Branch to L016C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016F           ; Branch to L016F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0172           ; Branch to L0172 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0175           ; Branch to L0175 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0178           ; Branch to L0178 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017B           ; Branch to L017B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017E           ; Branch to L017E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0181           ; Branch to L0181 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0184           ; Branch to L0184 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0187           ; Branch to L0187 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018A           ; Branch to L018A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018D           ; Branch to L018D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0190           ; Branch to L0190 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0193           ; Branch to L0193 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0196           ; Branch to L0196 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0199           ; Branch to L0199 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019C           ; Branch to L019C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019F           ; Branch to L019F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A2           ; Branch to L01A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A5           ; Branch to L01A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A8           ; Branch to L01A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AB           ; Branch to L01AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AE           ; Branch to L01AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B1           ; Branch to L01B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B4           ; Branch to L01B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B7           ; Branch to L01B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BA           ; Branch to L01BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BD           ; Branch to L01BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C0           ; Branch to L01C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C3           ; Branch to L01C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C6           ; Branch to L01C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C9           ; Branch to L01C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CC           ; Branch to L01CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CF           ; Branch to L01CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D2           ; Branch to L01D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D5           ; Branch to L01D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D8           ; Branch to L01D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DB           ; Branch to L01DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DE           ; Branch to L01DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E1           ; Branch to L01E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E4           ; Branch to L01E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E7           ; Branch to L01E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EA           ; Branch to L01EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01ED           ; Branch to L01ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F0           ; Branch to L01F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F3           ; Branch to L01F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F6           ; Branch to L01F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F9           ; Branch to L01F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FC           ; Branch to L01FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FF           ; Branch to L01FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0202           ; Branch to L0202 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0205           ; Branch to L0205 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0208           ; Branch to L0208 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020B           ; Branch to L020B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020E           ; Branch to L020E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0211           ; Branch to L0211 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0214           ; Branch to L0214 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0217           ; Branch to L0217 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021A           ; Branch to L021A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021D           ; Branch to L021D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0220           ; Branch to L0220 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0223           ; Branch to L0223 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0226           ; Branch to L0226 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0229           ; Branch to L0229 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022C           ; Branch to L022C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022F           ; Branch to L022F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0232           ; Branch to L0232 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0235           ; Branch to L0235 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0238           ; Branch to L0238 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023B           ; Branch to L023B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023E           ; Branch to L023E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0241           ; Branch to L0241 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0244           ; Branch to L0244 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0247           ; Branch to L0247 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024A           ; Branch to L024A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024D           ; Branch to L024D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0250           ; Branch to L0250 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0253           ; Branch to L0253 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0256           ; Branch to L0256 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0259           ; Branch to L0259 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025C           ; Branch to L025C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025F           ; Branch to L025F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0262           ; Branch to L0262 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0265           ; Branch to L0265 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0268           ; Branch to L0268 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026B           ; Branch to L026B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026E           ; Branch to L026E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0271           ; Branch to L0271 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0274           ; Branch to L0274 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0277           ; Branch to L0277 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027A           ; Branch to L027A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027D           ; Branch to L027D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0280           ; Branch to L0280 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0283           ; Branch to L0283 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0286           ; Branch to L0286 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0289           ; Branch to L0289 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028C           ; Branch to L028C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028F           ; Branch to L028F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0292           ; Branch to L0292 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0295           ; Branch to L0295 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0298           ; Branch to L0298 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029B           ; Branch to L029B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029E           ; Branch to L029E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A1           ; Branch to L02A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A4           ; Branch to L02A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A7           ; Branch to L02A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AA           ; Branch to L02AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AD           ; Branch to L02AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B0           ; Branch to L02B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B3           ; Branch to L02B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B6           ; Branch to L02B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B9           ; Branch to L02B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BC           ; Branch to L02BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BF           ; Branch to L02BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C2           ; Branch to L02C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C5           ; Branch to L02C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C8           ; Branch to L02C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CB           ; Branch to L02CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CE           ; Branch to L02CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D1           ; Branch to L02D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D4           ; Branch to L02D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D7           ; Branch to L02D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DA           ; Branch to L02DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DD           ; Branch to L02DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E0           ; Branch to L02E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E3           ; Branch to L02E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E6           ; Branch to L02E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E9           ; Branch to L02E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EC           ; Branch to L02EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EF           ; Branch to L02EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F2           ; Branch to L02F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F5           ; Branch to L02F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F8           ; Branch to L02F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FB           ; Branch to L02FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FE           ; Branch to L02FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0301           ; Branch to L0301 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0304           ; Branch to L0304 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0307           ; Branch to L0307 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030A           ; Branch to L030A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030D           ; Branch to L030D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0310           ; Branch to L0310 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0313           ; Branch to L0313 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0316           ; Branch to L0316 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0319           ; Branch to L0319 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031C           ; Branch to L031C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031F           ; Branch to L031F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0322           ; Branch to L0322 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0325           ; Branch to L0325 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0328           ; Branch to L0328 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032B           ; Branch to L032B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032E           ; Branch to L032E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0331           ; Branch to L0331 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0334           ; Branch to L0334 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0337           ; Branch to L0337 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033A           ; Branch to L033A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033D           ; Branch to L033D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0340           ; Branch to L0340 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0343           ; Branch to L0343 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0346           ; Branch to L0346 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0349           ; Branch to L0349 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034C           ; Branch to L034C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034F           ; Branch to L034F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0352           ; Branch to L0352 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0355           ; Branch to L0355 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0358           ; Branch to L0358 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035B           ; Branch to L035B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035E           ; Branch to L035E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0361           ; Branch to L0361 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0364           ; Branch to L0364 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0367           ; Branch to L0367 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036A           ; Branch to L036A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036D           ; Branch to L036D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0370           ; Branch to L0370 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0373           ; Branch to L0373 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0376           ; Branch to L0376 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0379           ; Branch to L0379 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037C           ; Branch to L037C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037F           ; Branch to L037F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0382           ; Branch to L0382 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0385           ; Branch to L0385 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0388           ; Branch to L0388 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038B           ; Branch to L038B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038E           ; Branch to L038E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0391           ; Branch to L0391 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0394           ; Branch to L0394 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0397           ; Branch to L0397 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039A           ; Branch to L039A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039D           ; Branch to L039D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A0           ; Branch to L03A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A3           ; Branch to L03A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A6           ; Branch to L03A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A9           ; Branch to L03A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AC           ; Branch to L03AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AF           ; Branch to L03AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B2           ; Branch to L03B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B5           ; Branch to L03B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B8           ; Branch to L03B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BB           ; Branch to L03BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BE           ; Branch to L03BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C1           ; Branch to L03C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C4           ; Branch to L03C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C7           ; Branch to L03C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CA           ; Branch to L03CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CD           ; Branch to L03CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D0           ; Branch to L03D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D3           ; Branch to L03D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D6           ; Branch to L03D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D9           ; Branch to L03D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DC           ; Branch to L03DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DF           ; Branch to L03DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E2           ; Branch to L03E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E5           ; Branch to L03E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E8           ; Branch to L03E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EB           ; Branch to L03EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EE           ; Branch to L03EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F1           ; Branch to L03F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F4           ; Branch to L03F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F7           ; Branch to L03F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FA           ; Branch to L03FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FD           ; Branch to L03FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0400           ; Branch to L0400 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0403           ; Branch to L0403 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0406           ; Branch to L0406 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0409           ; Branch to L0409 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040C           ; Branch to L040C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040F           ; Branch to L040F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0412           ; Branch to L0412 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0415           ; Branch to L0415 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0418           ; Branch to L0418 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041B           ; Branch to L041B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041E           ; Branch to L041E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0421           ; Branch to L0421 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0424           ; Branch to L0424 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0427           ; Branch to L0427 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042A           ; Branch to L042A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042D           ; Branch to L042D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0430           ; Branch to L0430 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0433           ; Branch to L0433 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0436           ; Branch to L0436 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0439           ; Branch to L0439 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043C           ; Branch to L043C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043F           ; Branch to L043F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0442           ; Branch to L0442 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0445           ; Branch to L0445 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0448           ; Branch to L0448 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044B           ; Branch to L044B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044E           ; Branch to L044E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0451           ; Branch to L0451 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0454           ; Branch to L0454 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0457           ; Branch to L0457 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045A           ; Branch to L045A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045D           ; Branch to L045D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0460           ; Branch to L0460 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0463           ; Branch to L0463 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0466           ; Branch to L0466 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0469           ; Branch to L0469 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046C           ; Branch to L046C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046F           ; Branch to L046F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0472           ; Branch to L0472 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0475           ; Branch to L0475 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0478           ; Branch to L0478 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047B           ; Branch to L047B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047E           ; Branch to L047E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0481           ; Branch to L0481 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0484           ; Branch to L0484 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0487           ; Branch to L0487 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048A           ; Branch to L048A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048D           ; Branch to L048D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0490           ; Branch to L0490 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0493           ; Branch to L0493 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0496           ; Branch to L0496 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0499           ; Branch to L0499 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049C           ; Branch to L049C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049F           ; Branch to L049F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A2           ; Branch to L04A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A5           ; Branch to L04A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A8           ; Branch to L04A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AB           ; Branch to L04AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AE           ; Branch to L04AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B1           ; Branch to L04B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B4           ; Branch to L04B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B7           ; Branch to L04B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BA           ; Branch to L04BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BD           ; Branch to L04BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C0           ; Branch to L04C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C3           ; Branch to L04C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C6           ; Branch to L04C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C9           ; Branch to L04C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CC           ; Branch to L04CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CF           ; Branch to L04CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D2           ; Branch to L04D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D5           ; Branch to L04D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D8           ; Branch to L04D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DB           ; Branch to L04DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DE           ; Branch to L04DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E1           ; Branch to L04E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E4           ; Branch to L04E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E7           ; Branch to L04E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EA           ; Branch to L04EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04ED           ; Branch to L04ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F0           ; Branch to L04F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F3           ; Branch to L04F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F6           ; Branch to L04F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F9           ; Branch to L04F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FC           ; Branch to L04FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FF           ; Branch to L04FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0502           ; Branch to L0502 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0505           ; Branch to L0505 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0508           ; Branch to L0508 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050B           ; Branch to L050B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050E           ; Branch to L050E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0511           ; Branch to L0511 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0514           ; Branch to L0514 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0517           ; Branch to L0517 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051A           ; Branch to L051A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051D           ; Branch to L051D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0520           ; Branch to L0520 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0523           ; Branch to L0523 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0526           ; Branch to L0526 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0529           ; Branch to L0529 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052C           ; Branch to L052C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052F           ; Branch to L052F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0532           ; Branch to L0532 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0535           ; Branch to L0535 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0538           ; Branch to L0538 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053B           ; Branch to L053B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053E           ; Branch to L053E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0541           ; Branch to L0541 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0544           ; Branch to L0544 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0547           ; Branch to L0547 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054A           ; Branch to L054A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054D           ; Branch to L054D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0550           ; Branch to L0550 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0553           ; Branch to L0553 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0556           ; Branch to L0556 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0559           ; Branch to L0559 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055C           ; Branch to L055C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055F           ; Branch to L055F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0562           ; Branch to L0562 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0565           ; Branch to L0565 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0568           ; Branch to L0568 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056B           ; Branch to L056B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056E           ; Branch to L056E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0571           ; Branch to L0571 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0574           ; Branch to L0574 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0577           ; Branch to L0577 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057A           ; Branch to L057A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057D           ; Branch to L057D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0580           ; Branch to L0580 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0583           ; Branch to L0583 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0586           ; Branch to L0586 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0589           ; Branch to L0589 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058C           ; Branch to L058C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058F           ; Branch to L058F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0592           ; Branch to L0592 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0595           ; Branch to L0595 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0598           ; Branch to L0598 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059B           ; Branch to L059B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059E           ; Branch to L059E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A1           ; Branch to L05A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A4           ; Branch to L05A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A7           ; Branch to L05A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AA           ; Branch to L05AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AD           ; Branch to L05AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B0           ; Branch to L05B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B3           ; Branch to L05B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B6           ; Branch to L05B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B9           ; Branch to L05B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BC           ; Branch to L05BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BF           ; Branch to L05BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C2           ; Branch to L05C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C5           ; Branch to L05C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C8           ; Branch to L05C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CB           ; Branch to L05CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CE           ; Branch to L05CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D1           ; Branch to L05D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D4           ; Branch to L05D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D7           ; Branch to L05D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DA           ; Branch to L05DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DD           ; Branch to L05DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E0           ; Branch to L05E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E3           ; Branch to L05E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E6           ; Branch to L05E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E9           ; Branch to L05E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EC           ; Branch to L05EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EF           ; Branch to L05EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F2           ; Branch to L05F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F5           ; Branch to L05F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F8           ; Branch to L05F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FB           ; Branch to L05FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FE           ; Branch to L05FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0601           ; Branch to L0601 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0604           ; Branch to L0604 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0607           ; Branch to L0607 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060A           ; Branch to L060A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060D           ; Branch to L060D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0610           ; Branch to L0610 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0613           ; Branch to L0613 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0616           ; Branch to L0616 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0619           ; Branch to L0619 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061C           ; Branch to L061C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061F           ; Branch to L061F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0622           ; Branch to L0622 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0625           ; Branch to L0625 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0628           ; Branch to L0628 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062B           ; Branch to L062B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062E           ; Branch to L062E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0631           ; Branch to L0631 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0634           ; Branch to L0634 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0637           ; Branch to L0637 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063A           ; Branch to L063A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063D           ; Branch to L063D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0640           ; Branch to L0640 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0643           ; Branch to L0643 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0646           ; Branch to L0646 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0649           ; Branch to L0649 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064C           ; Branch to L064C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064F           ; Branch to L064F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0652           ; Branch to L0652 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0655           ; Branch to L0655 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0658           ; Branch to L0658 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065B           ; Branch to L065B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065E           ; Branch to L065E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0661           ; Branch to L0661 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0664           ; Branch to L0664 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0667           ; Branch to L0667 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066A           ; Branch to L066A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066D           ; Branch to L066D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0670           ; Branch to L0670 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0673           ; Branch to L0673 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0676           ; Branch to L0676 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0679           ; Branch to L0679 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067C           ; Branch to L067C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067F           ; Branch to L067F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0682           ; Branch to L0682 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0685           ; Branch to L0685 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0688           ; Branch to L0688 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068B           ; Branch to L068B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068E           ; Branch to L068E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0691           ; Branch to L0691 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0694           ; Branch to L0694 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0697           ; Branch to L0697 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069A           ; Branch to L069A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069D           ; Branch to L069D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A0           ; Branch to L06A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A3           ; Branch to L06A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A6           ; Branch to L06A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A9           ; Branch to L06A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AC           ; Branch to L06AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AF           ; Branch to L06AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B2           ; Branch to L06B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B5           ; Branch to L06B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B8           ; Branch to L06B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BB           ; Branch to L06BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BE           ; Branch to L06BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C1           ; Branch to L06C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C4           ; Branch to L06C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C7           ; Branch to L06C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CA           ; Branch to L06CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CD           ; Branch to L06CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D0           ; Branch to L06D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D3           ; Branch to L06D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D6           ; Branch to L06D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D9           ; Branch to L06D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DC           ; Branch to L06DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DF           ; Branch to L06DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E2           ; Branch to L06E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E5           ; Branch to L06E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E8           ; Branch to L06E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EB           ; Branch to L06EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EE           ; Branch to L06EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F1           ; Branch to L06F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F4           ; Branch to L06F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F7           ; Branch to L06F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FA           ; Branch to L06FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FD           ; Branch to L06FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0700           ; Branch to L0700 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0703           ; Branch to L0703 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0706           ; Branch to L0706 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0709           ; Branch to L0709 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070C           ; Branch to L070C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070F           ; Branch to L070F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0712           ; Branch to L0712 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0715           ; Branch to L0715 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0718           ; Branch to L0718 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071B           ; Branch to L071B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071E           ; Branch to L071E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0721           ; Branch to L0721 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0724           ; Branch to L0724 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0727           ; Branch to L0727 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072A           ; Branch to L072A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072D           ; Branch to L072D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0730           ; Branch to L0730 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0733           ; Branch to L0733 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0736           ; Branch to L0736 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0739           ; Branch to L0739 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073C           ; Branch to L073C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073F           ; Branch to L073F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0742           ; Branch to L0742 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0745           ; Branch to L0745 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0748           ; Branch to L0748 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074B           ; Branch to L074B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074E           ; Branch to L074E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0751           ; Branch to L0751 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0754           ; Branch to L0754 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0757           ; Branch to L0757 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075A           ; Branch to L075A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075D           ; Branch to L075D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0760           ; Branch to L0760 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0763           ; Branch to L0763 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0766           ; Branch to L0766 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0769           ; Branch to L0769 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076C           ; Branch to L076C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076F           ; Branch to L076F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0772           ; Branch to L0772 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0775           ; Branch to L0775 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0778           ; Branch to L0778 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077B           ; Branch to L077B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077E           ; Branch to L077E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0781           ; Branch to L0781 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0784           ; Branch to L0784 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0787           ; Branch to L0787 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078A           ; Branch to L078A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078D           ; Branch to L078D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0790           ; Branch to L0790 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0793           ; Branch to L0793 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0796           ; Branch to L0796 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0799           ; Branch to L0799 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079C           ; Branch to L079C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079F           ; Branch to L079F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A2           ; Branch to L07A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A5           ; Branch to L07A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A8           ; Branch to L07A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AB           ; Branch to L07AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AE           ; Branch to L07AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B1           ; Branch to L07B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B4           ; Branch to L07B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B7           ; Branch to L07B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BA           ; Branch to L07BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BD           ; Branch to L07BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C0           ; Branch to L07C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C3           ; Branch to L07C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C6           ; Branch to L07C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C9           ; Branch to L07C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CC           ; Branch to L07CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CF           ; Branch to L07CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D2           ; Branch to L07D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D5           ; Branch to L07D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D8           ; Branch to L07D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DB           ; Branch to L07DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DE           ; Branch to L07DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E1           ; Branch to L07E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E4           ; Branch to L07E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E7           ; Branch to L07E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EA           ; Branch to L07EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07ED           ; Branch to L07ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F0           ; Branch to L07F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F3           ; Branch to L07F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F6           ; Branch to L07F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F9           ; Branch to L07F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FC           ; Branch to L07FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FF           ; Branch to L07FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0002           ; Branch to L0002 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0005           ; Branch to L0005 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0008           ; Branch to L0008 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000B           ; Branch to L000B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000E           ; Branch to L000E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0011           ; Branch to L0011 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0014           ; Branch to L0014 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0017           ; Branch to L0017 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001A           ; Branch to L001A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001D           ; Branch to L001D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0020           ; Branch to L0020 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0023           ; Branch to L0023 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0026           ; Branch to L0026 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0029           ; Branch to L0029 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002C           ; Branch to L002C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002F           ; Branch to L002F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0032           ; Branch to L0032 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0035           ; Branch to L0035 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0038           ; Branch to L0038 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003B           ; Branch to L003B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003E           ; Branch to L003E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0041           ; Branch to L0041 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0044           ; Branch to L0044 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0047           ; Branch to L0047 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004A           ; Branch to L004A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004D           ; Branch to L004D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0050           ; Branch to L0050 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0053           ; Branch to L0053 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0056           ; Branch to L0056 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0059           ; Branch to L0059 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005C           ; Branch to L005C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005F           ; Branch to L005F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0062           ; Branch to L0062 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0065           ; Branch to L0065 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0068           ; Branch to L0068 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006B           ; Branch to L006B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006E           ; Branch to L006E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0071           ; Branch to L0071 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0074           ; Branch to L0074 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0077           ; Branch to L0077 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007A           ; Branch to L007A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007D           ; Branch to L007D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0080           ; Branch to L0080 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0083           ; Branch to L0083 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0086           ; Branch to L0086 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0089           ; Branch to L0089 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008C           ; Branch to L008C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008F           ; Branch to L008F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0092           ; Branch to L0092 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0095           ; Branch to L0095 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0098           ; Branch to L0098 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009B           ; Branch to L009B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009E           ; Branch to L009E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A1           ; Branch to L00A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A4           ; Branch to L00A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A7           ; Branch to L00A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AA           ; Branch to L00AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AD           ; Branch to L00AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B0           ; Branch to L00B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B3           ; Branch to L00B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B6           ; Branch to L00B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B9           ; Branch to L00B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BC           ; Branch to L00BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BF           ; Branch to L00BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C2           ; Branch to L00C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C5           ; Branch to L00C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C8           ; Branch to L00C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CB           ; Branch to L00CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CE           ; Branch to L00CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D1           ; Branch to L00D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D4           ; Branch to L00D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D7           ; Branch to L00D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DA           ; Branch to L00DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DD           ; Branch to L00DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E0           ; Branch to L00E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E3           ; Branch to L00E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E6           ; Branch to L00E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E9           ; Branch to L00E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EC           ; Branch to L00EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EF           ; Branch to L00EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F2           ; Branch to L00F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F5           ; Branch to L00F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F8           ; Branch to L00F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FB           ; Branch to L00FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FE           ; Branch to L00FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0101           ; Branch to L0101 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0104           ; Branch to L0104 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0107           ; Branch to L0107 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010A           ; Branch to L010A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010D           ; Branch to L010D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0110           ; Branch to L0110 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0113           ; Branch to L0113 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0116           ; Branch to L0116 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0119           ; Branch to L0119 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011C           ; Branch to L011C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011F           ; Branch to L011F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0122           ; Branch to L0122 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0125           ; Branch to L0125 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0128           ; Branch to L0128 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012B           ; Branch to L012B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012E           ; Branch to L012E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0131           ; Branch to L0131 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0134           ; Branch to L0134 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0137           ; Branch to L0137 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013A           ; Branch to L013A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013D           ; Branch to L013D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0140           ; Branch to L0140 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0143           ; Branch to L0143 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0146           ; Branch to L0146 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0149           ; Branch to L0149 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014C           ; Branch to L014C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014F           ; Branch to L014F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0152           ; Branch to L0152 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0155           ; Branch to L0155 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0158           ; Branch to L0158 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015B           ; Branch to L015B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015E           ; Branch to L015E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0161           ; Branch to L0161 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0164           ; Branch to L0164 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0167           ; Branch to L0167 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016A           ; Branch to L016A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016D           ; Branch to L016D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0170           ; Branch to L0170 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0173           ; Branch to L0173 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0176           ; Branch to L0176 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0179           ; Branch to L0179 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017C           ; Branch to L017C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017F           ; Branch to L017F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0182           ; Branch to L0182 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0185           ; Branch to L0185 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0188           ; Branch to L0188 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018B           ; Branch to L018B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018E           ; Branch to L018E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0191           ; Branch to L0191 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0194           ; Branch to L0194 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0197           ; Branch to L0197 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019A           ; Branch to L019A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019D           ; Branch to L019D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A0           ; Branch to L01A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A3           ; Branch to L01A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A6           ; Branch to L01A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A9           ; Branch to L01A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AC           ; Branch to L01AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AF           ; Branch to L01AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B2           ; Branch to L01B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B5           ; Branch to L01B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B8           ; Branch to L01B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BB           ; Branch to L01BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BE           ; Branch to L01BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C1           ; Branch to L01C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C4           ; Branch to L01C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C7           ; Branch to L01C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CA           ; Branch to L01CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CD           ; Branch to L01CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D0           ; Branch to L01D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D3           ; Branch to L01D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D6           ; Branch to L01D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D9           ; Branch to L01D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DC           ; Branch to L01DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DF           ; Branch to L01DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E2           ; Branch to L01E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E5           ; Branch to L01E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E8           ; Branch to L01E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EB           ; Branch to L01EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EE           ; Branch to L01EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F1           ; Branch to L01F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F4           ; Branch to L01F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F7           ; Branch to L01F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FA           ; Branch to L01FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FD           ; Branch to L01FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0200           ; Branch to L0200 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0203           ; Branch to L0203 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0206           ; Branch to L0206 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0209           ; Branch to L0209 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020C           ; Branch to L020C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020F           ; Branch to L020F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0212           ; Branch to L0212 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0215           ; Branch to L0215 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0218           ; Branch to L0218 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021B           ; Branch to L021B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021E           ; Branch to L021E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0221           ; Branch to L0221 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0224           ; Branch to L0224 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0227           ; Branch to L0227 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022A           ; Branch to L022A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022D           ; Branch to L022D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0230           ; Branch to L0230 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0233           ; Branch to L0233 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0236           ; Branch to L0236 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0239           ; Branch to L0239 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023C           ; Branch to L023C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023F           ; Branch to L023F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0242           ; Branch to L0242 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0245           ; Branch to L0245 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0248           ; Branch to L0248 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024B           ; Branch to L024B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024E           ; Branch to L024E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0251           ; Branch to L0251 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0254           ; Branch to L0254 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0257           ; Branch to L0257 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025A           ; Branch to L025A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025D           ; Branch to L025D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0260           ; Branch to L0260 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0263           ; Branch to L0263 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0266           ; Branch to L0266 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0269           ; Branch to L0269 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026C           ; Branch to L026C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026F           ; Branch to L026F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0272           ; Branch to L0272 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0275           ; Branch to L0275 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0278           ; Branch to L0278 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027B           ; Branch to L027B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027E           ; Branch to L027E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0281           ; Branch to L0281 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0284           ; Branch to L0284 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0287           ; Branch to L0287 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028A           ; Branch to L028A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028D           ; Branch to L028D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0290           ; Branch to L0290 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0293           ; Branch to L0293 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0296           ; Branch to L0296 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0299           ; Branch to L0299 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029C           ; Branch to L029C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029F           ; Branch to L029F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A2           ; Branch to L02A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A5           ; Branch to L02A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A8           ; Branch to L02A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AB           ; Branch to L02AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AE           ; Branch to L02AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B1           ; Branch to L02B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B4           ; Branch to L02B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B7           ; Branch to L02B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BA           ; Branch to L02BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BD           ; Branch to L02BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C0           ; Branch to L02C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C3           ; Branch to L02C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C6           ; Branch to L02C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C9           ; Branch to L02C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CC           ; Branch to L02CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CF           ; Branch to L02CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D2           ; Branch to L02D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D5           ; Branch to L02D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D8           ; Branch to L02D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DB           ; Branch to L02DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DE           ; Branch to L02DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E1           ; Branch to L02E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E4           ; Branch to L02E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E7           ; Branch to L02E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EA           ; Branch to L02EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02ED           ; Branch to L02ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F0           ; Branch to L02F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F3           ; Branch to L02F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F6           ; Branch to L02F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F9           ; Branch to L02F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FC           ; Branch to L02FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FF           ; Branch to L02FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0302           ; Branch to L0302 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0305           ; Branch to L0305 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0308           ; Branch to L0308 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030B           ; Branch to L030B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030E           ; Branch to L030E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0311           ; Branch to L0311 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0314           ; Branch to L0314 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0317           ; Branch to L0317 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031A           ; Branch to L031A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031D           ; Branch to L031D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0320           ; Branch to L0320 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0323           ; Branch to L0323 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0326           ; Branch to L0326 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0329           ; Branch to L0329 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032C           ; Branch to L032C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032F           ; Branch to L032F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0332           ; Branch to L0332 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0335           ; Branch to L0335 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0338           ; Branch to L0338 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033B           ; Branch to L033B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033E           ; Branch to L033E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0341           ; Branch to L0341 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0344           ; Branch to L0344 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0347           ; Branch to L0347 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034A           ; Branch to L034A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034D           ; Branch to L034D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0350           ; Branch to L0350 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0353           ; Branch to L0353 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0356           ; Branch to L0356 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0359           ; Branch to L0359 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035C           ; Branch to L035C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035F           ; Branch to L035F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0362           ; Branch to L0362 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0365           ; Branch to L0365 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0368           ; Branch to L0368 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036B           ; Branch to L036B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036E           ; Branch to L036E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0371           ; Branch to L0371 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0374           ; Branch to L0374 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0377           ; Branch to L0377 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037A           ; Branch to L037A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037D           ; Branch to L037D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0380           ; Branch to L0380 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0383           ; Branch to L0383 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0386           ; Branch to L0386 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0389           ; Branch to L0389 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038C           ; Branch to L038C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038F           ; Branch to L038F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0392           ; Branch to L0392 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0395           ; Branch to L0395 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0398           ; Branch to L0398 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039B           ; Branch to L039B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039E           ; Branch to L039E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A1           ; Branch to L03A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A4           ; Branch to L03A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A7           ; Branch to L03A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AA           ; Branch to L03AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AD           ; Branch to L03AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B0           ; Branch to L03B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B3           ; Branch to L03B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B6           ; Branch to L03B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B9           ; Branch to L03B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BC           ; Branch to L03BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BF           ; Branch to L03BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C2           ; Branch to L03C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C5           ; Branch to L03C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C8           ; Branch to L03C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CB           ; Branch to L03CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CE           ; Branch to L03CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D1           ; Branch to L03D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D4           ; Branch to L03D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D7           ; Branch to L03D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DA           ; Branch to L03DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DD           ; Branch to L03DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E0           ; Branch to L03E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E3           ; Branch to L03E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E6           ; Branch to L03E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E9           ; Branch to L03E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EC           ; Branch to L03EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EF           ; Branch to L03EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F2           ; Branch to L03F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F5           ; Branch to L03F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F8           ; Branch to L03F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FB           ; Branch to L03FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FE           ; Branch to L03FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0401           ; Branch to L0401 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0404           ; Branch to L0404 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0407           ; Branch to L0407 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040A           ; Branch to L040A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040D           ; Branch to L040D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0410           ; Branch to L0410 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0413           ; Branch to L0413 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0416           ; Branch to L0416 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0419           ; Branch to L0419 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041C           ; Branch to L041C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041F           ; Branch to L041F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0422           ; Branch to L0422 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0425           ; Branch to L0425 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0428           ; Branch to L0428 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042B           ; Branch to L042B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042E           ; Branch to L042E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0431           ; Branch to L0431 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0434           ; Branch to L0434 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0437           ; Branch to L0437 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043A           ; Branch to L043A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043D           ; Branch to L043D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0440           ; Branch to L0440 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0443           ; Branch to L0443 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0446           ; Branch to L0446 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0449           ; Branch to L0449 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044C           ; Branch to L044C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044F           ; Branch to L044F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0452           ; Branch to L0452 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0455           ; Branch to L0455 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0458           ; Branch to L0458 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045B           ; Branch to L045B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045E           ; Branch to L045E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0461           ; Branch to L0461 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0464           ; Branch to L0464 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0467           ; Branch to L0467 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046A           ; Branch to L046A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046D           ; Branch to L046D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0470           ; Branch to L0470 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0473           ; Branch to L0473 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0476           ; Branch to L0476 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0479           ; Branch to L0479 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047C           ; Branch to L047C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047F           ; Branch to L047F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0482           ; Branch to L0482 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0485           ; Branch to L0485 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0488           ; Branch to L0488 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048B           ; Branch to L048B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048E           ; Branch to L048E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0491           ; Branch to L0491 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0494           ; Branch to L0494 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0497           ; Branch to L0497 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049A           ; Branch to L049A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049D           ; Branch to L049D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A0           ; Branch to L04A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A3           ; Branch to L04A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A6           ; Branch to L04A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A9           ; Branch to L04A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AC           ; Branch to L04AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AF           ; Branch to L04AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B2           ; Branch to L04B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B5           ; Branch to L04B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B8           ; Branch to L04B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BB           ; Branch to L04BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BE           ; Branch to L04BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C1           ; Branch to L04C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C4           ; Branch to L04C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C7           ; Branch to L04C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CA           ; Branch to L04CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CD           ; Branch to L04CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D0           ; Branch to L04D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D3           ; Branch to L04D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D6           ; Branch to L04D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D9           ; Branch to L04D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DC           ; Branch to L04DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DF           ; Branch to L04DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E2           ; Branch to L04E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E5           ; Branch to L04E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E8           ; Branch to L04E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EB           ; Branch to L04EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EE           ; Branch to L04EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F1           ; Branch to L04F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F4           ; Branch to L04F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F7           ; Branch to L04F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FA           ; Branch to L04FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FD           ; Branch to L04FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0500           ; Branch to L0500 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0503           ; Branch to L0503 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0506           ; Branch to L0506 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0509           ; Branch to L0509 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050C           ; Branch to L050C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050F           ; Branch to L050F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0512           ; Branch to L0512 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0515           ; Branch to L0515 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0518           ; Branch to L0518 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051B           ; Branch to L051B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051E           ; Branch to L051E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0521           ; Branch to L0521 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0524           ; Branch to L0524 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0527           ; Branch to L0527 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052A           ; Branch to L052A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052D           ; Branch to L052D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0530           ; Branch to L0530 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0533           ; Branch to L0533 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0536           ; Branch to L0536 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0539           ; Branch to L0539 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053C           ; Branch to L053C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053F           ; Branch to L053F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0542           ; Branch to L0542 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0545           ; Branch to L0545 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0548           ; Branch to L0548 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054B           ; Branch to L054B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054E           ; Branch to L054E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0551           ; Branch to L0551 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0554           ; Branch to L0554 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0557           ; Branch to L0557 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055A           ; Branch to L055A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055D           ; Branch to L055D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0560           ; Branch to L0560 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0563           ; Branch to L0563 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0566           ; Branch to L0566 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0569           ; Branch to L0569 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056C           ; Branch to L056C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056F           ; Branch to L056F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0572           ; Branch to L0572 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0575           ; Branch to L0575 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0578           ; Branch to L0578 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057B           ; Branch to L057B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057E           ; Branch to L057E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0581           ; Branch to L0581 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0584           ; Branch to L0584 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0587           ; Branch to L0587 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058A           ; Branch to L058A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058D           ; Branch to L058D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0590           ; Branch to L0590 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0593           ; Branch to L0593 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0596           ; Branch to L0596 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0599           ; Branch to L0599 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059C           ; Branch to L059C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059F           ; Branch to L059F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A2           ; Branch to L05A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A5           ; Branch to L05A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A8           ; Branch to L05A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AB           ; Branch to L05AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AE           ; Branch to L05AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B1           ; Branch to L05B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B4           ; Branch to L05B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B7           ; Branch to L05B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BA           ; Branch to L05BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BD           ; Branch to L05BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C0           ; Branch to L05C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C3           ; Branch to L05C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C6           ; Branch to L05C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C9           ; Branch to L05C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CC           ; Branch to L05CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CF           ; Branch to L05CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D2           ; Branch to L05D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D5           ; Branch to L05D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D8           ; Branch to L05D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DB           ; Branch to L05DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DE           ; Branch to L05DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E1           ; Branch to L05E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E4           ; Branch to L05E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E7           ; Branch to L05E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EA           ; Branch to L05EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05ED           ; Branch to L05ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F0           ; Branch to L05F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F3           ; Branch to L05F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F6           ; Branch to L05F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F9           ; Branch to L05F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FC           ; Branch to L05FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FF           ; Branch to L05FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0602           ; Branch to L0602 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0605           ; Branch to L0605 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0608           ; Branch to L0608 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060B           ; Branch to L060B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L060E           ; Branch to L060E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0611           ; Branch to L0611 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0614           ; Branch to L0614 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0617           ; Branch to L0617 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061A           ; Branch to L061A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L061D           ; Branch to L061D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0620           ; Branch to L0620 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0623           ; Branch to L0623 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0626           ; Branch to L0626 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0629           ; Branch to L0629 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062C           ; Branch to L062C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L062F           ; Branch to L062F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0632           ; Branch to L0632 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0635           ; Branch to L0635 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0638           ; Branch to L0638 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063B           ; Branch to L063B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L063E           ; Branch to L063E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0641           ; Branch to L0641 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0644           ; Branch to L0644 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0647           ; Branch to L0647 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064A           ; Branch to L064A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L064D           ; Branch to L064D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0650           ; Branch to L0650 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0653           ; Branch to L0653 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0656           ; Branch to L0656 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0659           ; Branch to L0659 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065C           ; Branch to L065C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L065F           ; Branch to L065F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0662           ; Branch to L0662 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0665           ; Branch to L0665 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0668           ; Branch to L0668 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066B           ; Branch to L066B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L066E           ; Branch to L066E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0671           ; Branch to L0671 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0674           ; Branch to L0674 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0677           ; Branch to L0677 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067A           ; Branch to L067A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L067D           ; Branch to L067D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0680           ; Branch to L0680 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0683           ; Branch to L0683 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0686           ; Branch to L0686 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0689           ; Branch to L0689 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068C           ; Branch to L068C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L068F           ; Branch to L068F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0692           ; Branch to L0692 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0695           ; Branch to L0695 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0698           ; Branch to L0698 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069B           ; Branch to L069B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L069E           ; Branch to L069E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A1           ; Branch to L06A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A4           ; Branch to L06A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06A7           ; Branch to L06A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AA           ; Branch to L06AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06AD           ; Branch to L06AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B0           ; Branch to L06B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B3           ; Branch to L06B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B6           ; Branch to L06B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06B9           ; Branch to L06B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BC           ; Branch to L06BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06BF           ; Branch to L06BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C2           ; Branch to L06C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C5           ; Branch to L06C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06C8           ; Branch to L06C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CB           ; Branch to L06CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06CE           ; Branch to L06CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D1           ; Branch to L06D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D4           ; Branch to L06D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06D7           ; Branch to L06D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DA           ; Branch to L06DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06DD           ; Branch to L06DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E0           ; Branch to L06E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E3           ; Branch to L06E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E6           ; Branch to L06E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06E9           ; Branch to L06E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EC           ; Branch to L06EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06EF           ; Branch to L06EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F2           ; Branch to L06F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F5           ; Branch to L06F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06F8           ; Branch to L06F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FB           ; Branch to L06FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L06FE           ; Branch to L06FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0701           ; Branch to L0701 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0704           ; Branch to L0704 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0707           ; Branch to L0707 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070A           ; Branch to L070A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L070D           ; Branch to L070D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0710           ; Branch to L0710 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0713           ; Branch to L0713 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0716           ; Branch to L0716 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0719           ; Branch to L0719 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071C           ; Branch to L071C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L071F           ; Branch to L071F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0722           ; Branch to L0722 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0725           ; Branch to L0725 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0728           ; Branch to L0728 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072B           ; Branch to L072B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L072E           ; Branch to L072E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0731           ; Branch to L0731 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0734           ; Branch to L0734 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0737           ; Branch to L0737 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073A           ; Branch to L073A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L073D           ; Branch to L073D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0740           ; Branch to L0740 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0743           ; Branch to L0743 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0746           ; Branch to L0746 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0749           ; Branch to L0749 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074C           ; Branch to L074C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L074F           ; Branch to L074F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0752           ; Branch to L0752 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0755           ; Branch to L0755 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0758           ; Branch to L0758 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075B           ; Branch to L075B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L075E           ; Branch to L075E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0761           ; Branch to L0761 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0764           ; Branch to L0764 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0767           ; Branch to L0767 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076A           ; Branch to L076A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L076D           ; Branch to L076D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0770           ; Branch to L0770 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0773           ; Branch to L0773 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0776           ; Branch to L0776 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0779           ; Branch to L0779 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077C           ; Branch to L077C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L077F           ; Branch to L077F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0782           ; Branch to L0782 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0785           ; Branch to L0785 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0788           ; Branch to L0788 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078B           ; Branch to L078B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L078E           ; Branch to L078E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0791           ; Branch to L0791 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0794           ; Branch to L0794 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0797           ; Branch to L0797 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079A           ; Branch to L079A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L079D           ; Branch to L079D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A0           ; Branch to L07A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A3           ; Branch to L07A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A6           ; Branch to L07A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07A9           ; Branch to L07A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AC           ; Branch to L07AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07AF           ; Branch to L07AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B2           ; Branch to L07B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B5           ; Branch to L07B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07B8           ; Branch to L07B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BB           ; Branch to L07BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07BE           ; Branch to L07BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C1           ; Branch to L07C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C4           ; Branch to L07C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07C7           ; Branch to L07C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CA           ; Branch to L07CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07CD           ; Branch to L07CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D0           ; Branch to L07D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D3           ; Branch to L07D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D6           ; Branch to L07D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07D9           ; Branch to L07D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DC           ; Branch to L07DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07DF           ; Branch to L07DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E2           ; Branch to L07E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E5           ; Branch to L07E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07E8           ; Branch to L07E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EB           ; Branch to L07EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07EE           ; Branch to L07EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F1           ; Branch to L07F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F4           ; Branch to L07F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07F7           ; Branch to L07F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FA           ; Branch to L07FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L07FD           ; Branch to L07FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0000           ; Branch to L0000 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0003           ; Branch to L0003 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0006           ; Branch to L0006 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0009           ; Branch to L0009 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000C           ; Branch to L000C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L000F           ; Branch to L000F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0012           ; Branch to L0012 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0015           ; Branch to L0015 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0018           ; Branch to L0018 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001B           ; Branch to L001B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L001E           ; Branch to L001E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0021           ; Branch to L0021 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0024           ; Branch to L0024 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0027           ; Branch to L0027 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002A           ; Branch to L002A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L002D           ; Branch to L002D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0030           ; Branch to L0030 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0033           ; Branch to L0033 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0036           ; Branch to L0036 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0039           ; Branch to L0039 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003C           ; Branch to L003C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L003F           ; Branch to L003F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0042           ; Branch to L0042 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0045           ; Branch to L0045 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0048           ; Branch to L0048 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004B           ; Branch to L004B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L004E           ; Branch to L004E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0051           ; Branch to L0051 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0054           ; Branch to L0054 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0057           ; Branch to L0057 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005A           ; Branch to L005A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L005D           ; Branch to L005D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0060           ; Branch to L0060 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0063           ; Branch to L0063 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0066           ; Branch to L0066 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0069           ; Branch to L0069 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006C           ; Branch to L006C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L006F           ; Branch to L006F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0072           ; Branch to L0072 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0075           ; Branch to L0075 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0078           ; Branch to L0078 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007B           ; Branch to L007B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L007E           ; Branch to L007E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0081           ; Branch to L0081 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0084           ; Branch to L0084 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0087           ; Branch to L0087 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008A           ; Branch to L008A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L008D           ; Branch to L008D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0090           ; Branch to L0090 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0093           ; Branch to L0093 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0096           ; Branch to L0096 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0099           ; Branch to L0099 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009C           ; Branch to L009C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L009F           ; Branch to L009F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A2           ; Branch to L00A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A5           ; Branch to L00A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00A8           ; Branch to L00A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AB           ; Branch to L00AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00AE           ; Branch to L00AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B1           ; Branch to L00B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B4           ; Branch to L00B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00B7           ; Branch to L00B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BA           ; Branch to L00BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00BD           ; Branch to L00BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C0           ; Branch to L00C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C3           ; Branch to L00C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C6           ; Branch to L00C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00C9           ; Branch to L00C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CC           ; Branch to L00CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00CF           ; Branch to L00CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D2           ; Branch to L00D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D5           ; Branch to L00D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00D8           ; Branch to L00D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DB           ; Branch to L00DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00DE           ; Branch to L00DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E1           ; Branch to L00E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E4           ; Branch to L00E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00E7           ; Branch to L00E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00EA           ; Branch to L00EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00ED           ; Branch to L00ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F0           ; Branch to L00F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F3           ; Branch to L00F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F6           ; Branch to L00F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00F9           ; Branch to L00F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FC           ; Branch to L00FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L00FF           ; Branch to L00FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0102           ; Branch to L0102 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0105           ; Branch to L0105 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0108           ; Branch to L0108 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010B           ; Branch to L010B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L010E           ; Branch to L010E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0111           ; Branch to L0111 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0114           ; Branch to L0114 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0117           ; Branch to L0117 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011A           ; Branch to L011A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L011D           ; Branch to L011D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0120           ; Branch to L0120 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0123           ; Branch to L0123 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0126           ; Branch to L0126 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0129           ; Branch to L0129 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012C           ; Branch to L012C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L012F           ; Branch to L012F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0132           ; Branch to L0132 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0135           ; Branch to L0135 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0138           ; Branch to L0138 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013B           ; Branch to L013B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L013E           ; Branch to L013E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0141           ; Branch to L0141 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0144           ; Branch to L0144 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0147           ; Branch to L0147 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014A           ; Branch to L014A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L014D           ; Branch to L014D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0150           ; Branch to L0150 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0153           ; Branch to L0153 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0156           ; Branch to L0156 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0159           ; Branch to L0159 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015C           ; Branch to L015C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L015F           ; Branch to L015F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0162           ; Branch to L0162 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0165           ; Branch to L0165 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0168           ; Branch to L0168 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016B           ; Branch to L016B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L016E           ; Branch to L016E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0171           ; Branch to L0171 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0174           ; Branch to L0174 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0177           ; Branch to L0177 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017A           ; Branch to L017A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L017D           ; Branch to L017D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0180           ; Branch to L0180 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0183           ; Branch to L0183 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0186           ; Branch to L0186 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0189           ; Branch to L0189 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018C           ; Branch to L018C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L018F           ; Branch to L018F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0192           ; Branch to L0192 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0195           ; Branch to L0195 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0198           ; Branch to L0198 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019B           ; Branch to L019B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L019E           ; Branch to L019E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A1           ; Branch to L01A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A4           ; Branch to L01A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01A7           ; Branch to L01A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AA           ; Branch to L01AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01AD           ; Branch to L01AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B0           ; Branch to L01B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B3           ; Branch to L01B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B6           ; Branch to L01B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01B9           ; Branch to L01B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BC           ; Branch to L01BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01BF           ; Branch to L01BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C2           ; Branch to L01C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C5           ; Branch to L01C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01C8           ; Branch to L01C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CB           ; Branch to L01CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01CE           ; Branch to L01CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D1           ; Branch to L01D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D4           ; Branch to L01D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01D7           ; Branch to L01D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DA           ; Branch to L01DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01DD           ; Branch to L01DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E0           ; Branch to L01E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E3           ; Branch to L01E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E6           ; Branch to L01E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01E9           ; Branch to L01E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EC           ; Branch to L01EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01EF           ; Branch to L01EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F2           ; Branch to L01F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F5           ; Branch to L01F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01F8           ; Branch to L01F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FB           ; Branch to L01FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L01FE           ; Branch to L01FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0201           ; Branch to L0201 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0204           ; Branch to L0204 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0207           ; Branch to L0207 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020A           ; Branch to L020A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L020D           ; Branch to L020D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0210           ; Branch to L0210 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0213           ; Branch to L0213 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0216           ; Branch to L0216 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0219           ; Branch to L0219 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021C           ; Branch to L021C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L021F           ; Branch to L021F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0222           ; Branch to L0222 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0225           ; Branch to L0225 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0228           ; Branch to L0228 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022B           ; Branch to L022B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L022E           ; Branch to L022E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0231           ; Branch to L0231 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0234           ; Branch to L0234 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0237           ; Branch to L0237 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023A           ; Branch to L023A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L023D           ; Branch to L023D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0240           ; Branch to L0240 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0243           ; Branch to L0243 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0246           ; Branch to L0246 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0249           ; Branch to L0249 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024C           ; Branch to L024C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L024F           ; Branch to L024F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0252           ; Branch to L0252 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0255           ; Branch to L0255 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0258           ; Branch to L0258 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025B           ; Branch to L025B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L025E           ; Branch to L025E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0261           ; Branch to L0261 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0264           ; Branch to L0264 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0267           ; Branch to L0267 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026A           ; Branch to L026A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L026D           ; Branch to L026D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0270           ; Branch to L0270 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0273           ; Branch to L0273 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0276           ; Branch to L0276 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0279           ; Branch to L0279 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027C           ; Branch to L027C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L027F           ; Branch to L027F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0282           ; Branch to L0282 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0285           ; Branch to L0285 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0288           ; Branch to L0288 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028B           ; Branch to L028B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L028E           ; Branch to L028E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0291           ; Branch to L0291 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0294           ; Branch to L0294 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0297           ; Branch to L0297 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029A           ; Branch to L029A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L029D           ; Branch to L029D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A0           ; Branch to L02A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A3           ; Branch to L02A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A6           ; Branch to L02A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02A9           ; Branch to L02A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AC           ; Branch to L02AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02AF           ; Branch to L02AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B2           ; Branch to L02B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B5           ; Branch to L02B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02B8           ; Branch to L02B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BB           ; Branch to L02BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02BE           ; Branch to L02BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C1           ; Branch to L02C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C4           ; Branch to L02C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02C7           ; Branch to L02C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CA           ; Branch to L02CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02CD           ; Branch to L02CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D0           ; Branch to L02D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D3           ; Branch to L02D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D6           ; Branch to L02D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02D9           ; Branch to L02D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DC           ; Branch to L02DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02DF           ; Branch to L02DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E2           ; Branch to L02E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E5           ; Branch to L02E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02E8           ; Branch to L02E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EB           ; Branch to L02EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02EE           ; Branch to L02EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F1           ; Branch to L02F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F4           ; Branch to L02F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02F7           ; Branch to L02F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FA           ; Branch to L02FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L02FD           ; Branch to L02FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0300           ; Branch to L0300 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0303           ; Branch to L0303 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0306           ; Branch to L0306 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0309           ; Branch to L0309 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030C           ; Branch to L030C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L030F           ; Branch to L030F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0312           ; Branch to L0312 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0315           ; Branch to L0315 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0318           ; Branch to L0318 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031B           ; Branch to L031B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L031E           ; Branch to L031E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0321           ; Branch to L0321 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0324           ; Branch to L0324 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0327           ; Branch to L0327 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032A           ; Branch to L032A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L032D           ; Branch to L032D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0330           ; Branch to L0330 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0333           ; Branch to L0333 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0336           ; Branch to L0336 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0339           ; Branch to L0339 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033C           ; Branch to L033C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L033F           ; Branch to L033F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0342           ; Branch to L0342 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0345           ; Branch to L0345 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0348           ; Branch to L0348 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034B           ; Branch to L034B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L034E           ; Branch to L034E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0351           ; Branch to L0351 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0354           ; Branch to L0354 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0357           ; Branch to L0357 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035A           ; Branch to L035A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L035D           ; Branch to L035D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0360           ; Branch to L0360 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0363           ; Branch to L0363 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0366           ; Branch to L0366 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0369           ; Branch to L0369 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036C           ; Branch to L036C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L036F           ; Branch to L036F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0372           ; Branch to L0372 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0375           ; Branch to L0375 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0378           ; Branch to L0378 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037B           ; Branch to L037B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L037E           ; Branch to L037E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0381           ; Branch to L0381 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0384           ; Branch to L0384 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0387           ; Branch to L0387 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038A           ; Branch to L038A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L038D           ; Branch to L038D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0390           ; Branch to L0390 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0393           ; Branch to L0393 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0396           ; Branch to L0396 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0399           ; Branch to L0399 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039C           ; Branch to L039C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L039F           ; Branch to L039F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A2           ; Branch to L03A2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A5           ; Branch to L03A5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03A8           ; Branch to L03A8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AB           ; Branch to L03AB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03AE           ; Branch to L03AE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B1           ; Branch to L03B1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B4           ; Branch to L03B4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03B7           ; Branch to L03B7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BA           ; Branch to L03BA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03BD           ; Branch to L03BD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C0           ; Branch to L03C0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C3           ; Branch to L03C3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C6           ; Branch to L03C6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03C9           ; Branch to L03C9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CC           ; Branch to L03CC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03CF           ; Branch to L03CF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D2           ; Branch to L03D2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D5           ; Branch to L03D5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03D8           ; Branch to L03D8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DB           ; Branch to L03DB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03DE           ; Branch to L03DE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E1           ; Branch to L03E1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E4           ; Branch to L03E4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03E7           ; Branch to L03E7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03EA           ; Branch to L03EA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03ED           ; Branch to L03ED if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F0           ; Branch to L03F0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F3           ; Branch to L03F3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F6           ; Branch to L03F6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03F9           ; Branch to L03F9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FC           ; Branch to L03FC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L03FF           ; Branch to L03FF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0402           ; Branch to L0402 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0405           ; Branch to L0405 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0408           ; Branch to L0408 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040B           ; Branch to L040B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L040E           ; Branch to L040E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0411           ; Branch to L0411 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0414           ; Branch to L0414 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0417           ; Branch to L0417 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041A           ; Branch to L041A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L041D           ; Branch to L041D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0420           ; Branch to L0420 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0423           ; Branch to L0423 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0426           ; Branch to L0426 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0429           ; Branch to L0429 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042C           ; Branch to L042C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L042F           ; Branch to L042F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0432           ; Branch to L0432 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0435           ; Branch to L0435 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0438           ; Branch to L0438 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043B           ; Branch to L043B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L043E           ; Branch to L043E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0441           ; Branch to L0441 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0444           ; Branch to L0444 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0447           ; Branch to L0447 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044A           ; Branch to L044A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L044D           ; Branch to L044D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0450           ; Branch to L0450 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0453           ; Branch to L0453 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0456           ; Branch to L0456 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0459           ; Branch to L0459 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045C           ; Branch to L045C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L045F           ; Branch to L045F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0462           ; Branch to L0462 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0465           ; Branch to L0465 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0468           ; Branch to L0468 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046B           ; Branch to L046B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L046E           ; Branch to L046E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0471           ; Branch to L0471 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0474           ; Branch to L0474 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0477           ; Branch to L0477 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047A           ; Branch to L047A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L047D           ; Branch to L047D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0480           ; Branch to L0480 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0483           ; Branch to L0483 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0486           ; Branch to L0486 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0489           ; Branch to L0489 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048C           ; Branch to L048C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L048F           ; Branch to L048F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0492           ; Branch to L0492 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0495           ; Branch to L0495 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0498           ; Branch to L0498 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049B           ; Branch to L049B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L049E           ; Branch to L049E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A1           ; Branch to L04A1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A4           ; Branch to L04A4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04A7           ; Branch to L04A7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AA           ; Branch to L04AA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04AD           ; Branch to L04AD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B0           ; Branch to L04B0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B3           ; Branch to L04B3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B6           ; Branch to L04B6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04B9           ; Branch to L04B9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BC           ; Branch to L04BC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04BF           ; Branch to L04BF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C2           ; Branch to L04C2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C5           ; Branch to L04C5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04C8           ; Branch to L04C8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CB           ; Branch to L04CB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04CE           ; Branch to L04CE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D1           ; Branch to L04D1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D4           ; Branch to L04D4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04D7           ; Branch to L04D7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DA           ; Branch to L04DA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04DD           ; Branch to L04DD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E0           ; Branch to L04E0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E3           ; Branch to L04E3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E6           ; Branch to L04E6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04E9           ; Branch to L04E9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EC           ; Branch to L04EC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04EF           ; Branch to L04EF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F2           ; Branch to L04F2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F5           ; Branch to L04F5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04F8           ; Branch to L04F8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FB           ; Branch to L04FB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L04FE           ; Branch to L04FE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0501           ; Branch to L0501 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0504           ; Branch to L0504 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0507           ; Branch to L0507 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050A           ; Branch to L050A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L050D           ; Branch to L050D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0510           ; Branch to L0510 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0513           ; Branch to L0513 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0516           ; Branch to L0516 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0519           ; Branch to L0519 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051C           ; Branch to L051C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L051F           ; Branch to L051F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0522           ; Branch to L0522 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0525           ; Branch to L0525 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0528           ; Branch to L0528 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052B           ; Branch to L052B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L052E           ; Branch to L052E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0531           ; Branch to L0531 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0534           ; Branch to L0534 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0537           ; Branch to L0537 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053A           ; Branch to L053A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L053D           ; Branch to L053D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0540           ; Branch to L0540 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0543           ; Branch to L0543 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0546           ; Branch to L0546 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0549           ; Branch to L0549 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054C           ; Branch to L054C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L054F           ; Branch to L054F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0552           ; Branch to L0552 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0555           ; Branch to L0555 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0558           ; Branch to L0558 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055B           ; Branch to L055B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L055E           ; Branch to L055E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0561           ; Branch to L0561 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0564           ; Branch to L0564 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0567           ; Branch to L0567 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056A           ; Branch to L056A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L056D           ; Branch to L056D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0570           ; Branch to L0570 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0573           ; Branch to L0573 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0576           ; Branch to L0576 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0579           ; Branch to L0579 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057C           ; Branch to L057C if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L057F           ; Branch to L057F if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0582           ; Branch to L0582 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0585           ; Branch to L0585 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0588           ; Branch to L0588 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058B           ; Branch to L058B if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L058E           ; Branch to L058E if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0591           ; Branch to L0591 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0594           ; Branch to L0594 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0597           ; Branch to L0597 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059A           ; Branch to L059A if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L059D           ; Branch to L059D if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A0           ; Branch to L05A0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A3           ; Branch to L05A3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A6           ; Branch to L05A6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05A9           ; Branch to L05A9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AC           ; Branch to L05AC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05AF           ; Branch to L05AF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B2           ; Branch to L05B2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B5           ; Branch to L05B5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05B8           ; Branch to L05B8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BB           ; Branch to L05BB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05BE           ; Branch to L05BE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C1           ; Branch to L05C1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C4           ; Branch to L05C4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05C7           ; Branch to L05C7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CA           ; Branch to L05CA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05CD           ; Branch to L05CD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D0           ; Branch to L05D0 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D3           ; Branch to L05D3 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D6           ; Branch to L05D6 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05D9           ; Branch to L05D9 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DC           ; Branch to L05DC if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05DF           ; Branch to L05DF if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E2           ; Branch to L05E2 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E5           ; Branch to L05E5 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05E8           ; Branch to L05E8 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EB           ; Branch to L05EB if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05EE           ; Branch to L05EE if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F1           ; Branch to L05F1 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F4           ; Branch to L05F4 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05F7           ; Branch to L05F7 if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FA           ; Branch to L05FA if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L05FD           ; Branch to L05FD if Bit PANEL_STATUS is set at PortA (Mn=1)
          brset 0,PortA,L0600           ; Branch to L0600 if Bit PANEL_STATUS is set at PortA (Mn=1)
